https://github.com/KirinDave/phosphor,""""""
https://github.com/wycats/merb-core,"""merb-core and merb-more have been merged into http://github.com/wycats/merb"""
https://github.com/technoweenie/attachment_fu,"""attachment-fu\n=============\n\nattachment_fu is a plugin by Rick Olson (aka technoweenie <http://techno-weenie.net>) and is the successor to acts_as_attachment.  To get a basic run-through of its capabilities, check out Mike Clark's tutorial <http://clarkware.com/cgi/blosxom/2007/02/24#FileUploadFu>.\n\n\nattachment_fu functionality\n===========================\n\nattachment_fu facilitates file uploads in Ruby on Rails.  There are a few storage options for the actual file data, but the plugin always at a minimum stores metadata for each file in the database.\n\nThere are four storage options for files uploaded through attachment_fu:\n  File system\n  Database file\n  Amazon S3\n  Rackspace (Mosso) Cloud Files\n\nEach method of storage many options associated with it that will be covered in the following section.  Something to note, however, is that the Amazon S3 storage requires you to modify config/amazon_s3.yml, the Rackspace Cloud Files storage requires you to modify config/rackspace_cloudfiles.yml, and the Database file storage requires an extra table.\n\n\nattachment_fu models\n====================\n\nFor all three of these storage options a table of metadata is required.  This table will contain information about the file (hence the 'meta') and its location.  This table has no restrictions on naming, unlike the extra table required for database storage, which must have a table name of db_files (and by convention a model of DbFile).\n  \nIn the model there are two methods made available by this plugins: has_attachment and validates_as_attachment.\n\nhas_attachment(options = {})\n  This method accepts the options in a hash:\n    :content_type     # Allowed content types.\n                      # Allows all by default.  Use :image to allow all standard image types.\n    :min_size         # Minimum size allowed.\n                      # 1 byte is the default.\n    :max_size         # Maximum size allowed.\n                      # 1.megabyte is the default.\n    :size             # Range of sizes allowed.\n                      # (1..1.megabyte) is the default.  This overrides the :min_size and :max_size options.\n    :resize_to        # Used by RMagick to resize images.\n                      # Pass either an array of width/height, or a geometry string.\n    :thumbnails       # Specifies a set of thumbnails to generate.\n                      # This accepts a hash of filename suffixes and RMagick resizing options.\n                      # This option need only be included if you want thumbnailing.\n    :thumbnail_class  # Set which model class to use for thumbnails.\n                      # This current attachment class is used by default.\n    :path_prefix      # Path to store the uploaded files in.\n                      # Uses public/#{table_name} by default for the filesystem, and just #{table_name} for the S3 and Cloud Files backend.  \n                      # Setting this sets the :storage to :file_system.\n    :partition        # Whether to partiton files in directories like /0000/0001/image.jpg. Default is true. Only applicable to the :file_system backend.\n    :storage          # Specifies the storage system to use..\n                      # Defaults to :db_file.  Options are :file_system, :db_file, :s3, and :cloud_files.\n    :cloudfront       # If using S3 for storage, this option allows for serving the files via Amazon CloudFront.\n                      # Defaults to false.\n    :processor        # Sets the image processor to use for resizing of the attached image.\n                      # Options include ImageScience, Rmagick, and MiniMagick.  Default is whatever is installed.\n    :uuid_primary_key # If your model's primary key is a 128-bit UUID in hexadecimal format, then set this to true.\n    :association_options  # attachment_fu automatically defines associations with thumbnails with has_many and belongs_to. If there are any additional options that you want to pass to these methods, then specify them here.\n    \n\n  Examples:\n    has_attachment :max_size => 1.kilobyte\n    has_attachment :size => 1.megabyte..2.megabytes\n    has_attachment :content_type => 'application/pdf'\n    has_attachment :content_type => ['application/pdf', 'application/msword', 'text/plain']\n    has_attachment :content_type => :image, :resize_to => [50,50]\n    has_attachment :content_type => ['application/pdf', :image], :resize_to => 'x50'\n    has_attachment :thumbnails => { :thumb => [50, 50], :geometry => 'x50' }\n    has_attachment :storage => :file_system, :path_prefix => 'public/files'\n    has_attachment :storage => :file_system, :path_prefix => 'public/files', \n                   :content_type => :image, :resize_to => [50,50], :partition => false\n    has_attachment :storage => :file_system, :path_prefix => 'public/files',\n                   :thumbnails => { :thumb => [50, 50], :geometry => 'x50' }\n    has_attachment :storage => :s3\n    has_attachment :store => :s3, :cloudfront => true\n    has_attachment :storage => :cloud_files\n\nvalidates_as_attachment\n  This method prevents files outside of the valid range (:min_size to :max_size, or the :size range) from being saved.  It does not however, halt the upload of such files.  They will be uploaded into memory regardless of size before validation.\n  \n  Example:\n    validates_as_attachment\n\n\nattachment_fu migrations\n========================\n\nFields for attachment_fu metadata tables...\n  in general:\n    size,         :integer  # file size in bytes\n    content_type, :string   # mime type, ex: application/mp3\n    filename,     :string   # sanitized filename\n  that reference images:\n    height,       :integer  # in pixels\n    width,        :integer  # in pixels\n  that reference images that will be thumbnailed:\n    parent_id,    :integer  # id of parent image (on the same table, a self-referencing foreign-key).\n                            # Only populated if the current object is a thumbnail.\n    thumbnail,    :string   # the 'type' of thumbnail this attachment record describes.  \n                            # Only populated if the current object is a thumbnail.\n                            # Usage:\n                            # [ In Model 'Avatar' ]\n                            #   has_attachment :content_type => :image, \n                            #                  :storage => :file_system, \n                            #                  :max_size => 500.kilobytes,\n                            #                  :resize_to => '320x200>',\n                            #                  :thumbnails => { :small => '10x10>',\n                            #                                   :thumb => '100x100>' }\n                            # [ Elsewhere ]\n                            # @user.avatar.thumbnails.first.thumbnail #=> 'small'\n  that reference files stored in the database (:db_file):\n    db_file_id,   :integer  # id of the file in the database (foreign key)\n    \nField for attachment_fu db_files table:\n  data, :binary # binary file data, for use in database file storage\n\n\nattachment_fu views\n===================\n\nThere are two main views tasks that will be directly affected by attachment_fu: upload forms and displaying uploaded images.\n\nThere are two parts of the upload form that differ from typical usage.\n  1. Include ':multipart => true' in the html options of the form_for tag.\n    Example:\n      <% form_for(:attachment_metadata, :url => { :action => \""create\"" }, :html => { :multipart => true }) do |form| %>\n      \n  2. Use the file_field helper with :uploaded_data as the field name.\n    Example:\n      <%= form.file_field :uploaded_data %>\n\nDisplaying uploaded images is made easy by the public_filename method of the ActiveRecord attachment objects using file system, s3, and Cloud Files storage.\n\npublic_filename(thumbnail = nil)\n  Returns the public path to the file.  If a thumbnail prefix is specified it will return the public file path to the corresponding thumbnail.\n  Examples:\n    attachment_obj.public_filename          #=> /attachments/2/file.jpg\n    attachment_obj.public_filename(:thumb)  #=> /attachments/2/file_thumb.jpg\n    attachment_obj.public_filename(:small)  #=> /attachments/2/file_small.jpg\n\nWhen serving files from database storage, doing more than simply downloading the file is beyond the scope of this document.\n\n\nattachment_fu controllers\n=========================\n\nThere are two considerations to take into account when using attachment_fu in controllers.\n\nThe first is when the files have no publicly accessible path and need to be downloaded through an action.\n\nExample:\n  def readme\n    send_file '/path/to/readme.txt', :type => 'plain/text', :disposition => 'inline'\n  end\n  \nSee the possible values for send_file for reference.\n\n\nThe second is when saving the file when submitted from a form.\nExample in view:\n <%= form.file_field :attachable, :uploaded_data %>\n\nExample in controller:\n  def create\n    @attachable_file = AttachmentMetadataModel.new(params[:attachable])\n    if @attachable_file.save\n      flash[:notice] = 'Attachment was successfully created.'\n      redirect_to attachable_url(@attachable_file)     \n    else\n      render :action => :new\n    end\n  end\n\nattachement_fu scripting\n====================================\n\nYou may wish to import a large number of images or attachments. \nThe following example shows how to upload a file from a script. \n\n#!/usr/bin/env ./script/runner\n\n# required to use ActionController::TestUploadedFile \nrequire 'action_controller'\nrequire 'action_controller/test_process.rb'\n\npath = \""./public/images/x.jpg\""\n\n# mimetype is a string like \""image/jpeg\"". One way to get the mimetype for a given file on a UNIX system\n# mimetype = `file -ib #{path}`.gsub(/\\n/,\""\"")\n\nmimetype = \""image/jpeg\""\n\n# This will \""upload\"" the file at path and create the new model.\n@attachable = AttachmentMetadataModel.new(:uploaded_data => ActionController::TestUploadedFile.new(path, mimetype))\n@attachable.save\n"""
https://github.com/wycats/merb-more,"""merb-core and merb-more have been merged into http://github.com/wycats/merb"""
https://github.com/jnewland/lazy_record,"""LazyRecord\n==========\n\nProof of concept Lazy-Loading for ActiveRecord. Inspired by the 'kickers' of Ambition.\n  \n  >> b = Buzz.lazy_find(:first)\n  => #<ActiveRecord::Lazy::Promise computation=#<Proc:0x025d1e50@...>>\n  -------------No SQL query is run until a method is called on this 'Promise' \n  >> b.to_s\n  -------------Buzz Load (0.000578)   SELECT * FROM buzz LIMIT 1\n  => \""Inaugural Buzz\""\n  \nUse the +lazy_record+ class method to make this the default for a certain class:\n  \n  class Buzz << ActiveRecord::Base\n    lazy_record\n  end\n  \n  >> b = Buzz.find(:first)\n  => #<ActiveRecord::Lazy::Promise computation=#<Proc:0x025d1e50@...>>\n  -------------No SQL query is run until a method is called on this 'Promise' \n  >> b.to_s\n  -------------Buzz Load (0.000578)   SELECT * FROM buzz LIMIT 1\n  => \""Inaugural Buzz\""\n\n\nWhy you might want to use this\n===========\n\nSay you've got some kick-ass cache_fu going on in your views - huge blocks of HTML being cached with a TTL of 30 mins or so.\nBut, each hit on your controller still fires off the 'spensive DB queries to fetch your tag cloud. With lazy loading, these\nqueries aren't run until absolutely necessary - giving your DB a rest til your cache expires, and boosting your reqs/sec.\n\n\nWhy you might not want to use this\n===========\n\n  >> b = Buzz.lazy_find(123023424)\n  => #<ActiveRecord::Lazy::Promise computation=#<Proc:0x025d1e50@...>>\n  >> puts \""booleans are screwed\"" if b\n  booleans are screwed\n\n\nPromise code from here: http://moonbase.rydia.net/software/lazy.rb/\n\nContact\n=======\nJesse Newland\njnewland@gmail.com"""
https://github.com/rubinius/rubinius,"""1. The Rubinius Language Platform\n\nRubinius is a modern language platform that supports a number of programming\nlanguages.\n\nRubinius includes a bytecode virtual machine, generational garbage collector,\nand just-in-time (JIT) native machine code compiler. Rubinius provides\nconcurrency support via native OS threads with no global interpreter lock.\n\nRubinius runs on Mac OS X and many Unix/Linux operating systems. Microsoft\nWindows is not yet supported.\n\n\n2. Code of Conduct\n\nParticipation in the Rubinius project is governed by the Rubinius Code of\nConduct. See https://rubinius.com/code-of-conduct/\n\n3. The Ruby Programming Language\n\nMany popular Ruby applications, like Rails, run on Rubinius, which aims to be\ncompatible with Ruby version 2.3.1.\n\nRubinius includes a Ruby parser, Ruby bytecode compiler, Ruby core library,\nand C-API compatibility for native C extensions. The Ruby core library is\nwritten almost entirely in Ruby. The Ruby bytecode compiler and other tools,\nsuch as the debugger, are also written in Ruby.  Rubinius provides the\nstandard Ruby libraries, with the following exceptions:\n\n* Continuation\n* Ripper\n* TracePoint\n* Tracer\n\nThe following Ruby features are not supported on Rubinius:\n\n* Refinements\n* $SAFE levels\n\n\n4. License\n\nAll source code in this repository is subject to the terms of the Mozilla Public\nLicense, version 2.0 unless stated otherwise. A copy of this license can be\nfound the file \""LICENSE\"" or at https://www.mozilla.org/MPL/2.0/.\n\nContributions made prior to January 3rd, 2016 are licensed under the old BSD\n3-clause license. A copy of this license can be found in the file \""BSD_LICENSE\"".\n\nIn the event a directory contains a \""LICENSE\"", \""LICENSE.txt\"" or \""COPYING\"" file\nthe license specified in said file applies to the contents of said directory and\nall sub directories, overwriting the licenses specified above.\n\n5. Installing Rubinius from Source\n\nPlease see https://book.rubinius.com/manuscript/getting_rubinius.html\nfor a more complete guide to installing Rubinius from source.\n\nTo install Rubinius, use the following steps:\n\n  1. Ensure that MRI 2.0+, rubygems, rake, git and LLVM are installed\n  2. git clone git://github.com/rubinius/rubinius.git\n  3. cd rubinius\n  4. ./build.sh --prefix=/path/to/install/dir\n\nWhen the install process finishes, follow the directions printed to the\nterminal to add the Rubinius executable (bin) directory to your PATH.\n\n\n6. Using RubyGems\n\nRubinius comes with RubyGems built-in. To install a gem, run the following:\n\n  $ rbx -S gem install <gem_name>\n\n\n7. Documentation\n\nThe Rubinius documentation is the Rubinius book:\n\n  https://rubinius.com/book/\n\n\n8. Issues & Support\n\nPlease file tickets for bugs or problems. The issue tracker is:\n\n  https://github.com/rubinius/rubinius/issues\n\nFor additional help, visit the Rubinius Gitter chat room:\n\n  https://gitter.im/rubinius/rubinius\n\n\n9. Contributing\n\nThe Rubinius team welcomes contributions. For more information, read the\n.github/contributing.md file.\n"""
https://github.com/jnewland/gsa-feeds,"""GSA Feeds\n=========\n\nA Ruby wrapper for the Google Search Appliance Feeds Protocol. This protocol exists to push content and metadata to the search appliance for processing, indexing, and serving as search results. Feeds are available in GSA software versions 4.2 and later."""
https://github.com/macournoyer/thin,"""# Thin\n\nA small and fast Ruby web server\n\n## Installation\n\n```\ngem install thin\n```\n\nOr add `thin` to your `Gemfile`:\n\n```ruby\ngem 'thin'\n```\n\n## Usage\n\nA +thin+ script offers an easy way to start your Rack application:\n\n```\nthin start\n```\n\nBrowse the `example` directory for sample applications.\n\n## Usage with Rails Action Cable\n\nTo use Thin with Action Cable, add the following to your `Gemfile`:\n\n```ruby\ngem 'faye-websocket'\ngem 'thin' # If not already done\n```\n\nCreate a `config/initializers/thin_action_cable.rb`:\n\n```ruby\nRails.application.config.action_cable.use_faye = true\nFaye::WebSocket.load_adapter 'thin'\n```\n\n### CLI\n\nUse a rackup (config.ru) file and bind to localhost port 8080:\n\n```\nthin -R config.ru -a 127.0.0.1 -p 8080 start\n```\n\nStore the server process ID, log to a file and daemonize:\n\n```\nthin -p 9292 -P tmp/pids/thin.pid -l logs/thin.log -d start\n```\n\nThin is quite flexible in that many options can be specified at the command line (see `thin -h` for more).\n\n### Configuration files\n\nYou can create a configuration file using `thin config -C config/thin.yml`.\n\nYou can then use it with all commands, such as: `thin start -C config/thin.yml`.\n\nHere is an example config file:\n\n```yaml\n--- \nuser: www-data\ngroup: www-data\npid: tmp/pids/thin.pid\ntimeout: 30\nwait: 30\nlog: log/thin.log\nmax_conns: 1024\nrequire: []\nenvironment: production\nmax_persistent_conns: 512\nservers: 1\nthreaded: true\nno-epoll: true\ndaemonize: true\nsocket: tmp/sockets/thin.sock\nchdir: /path/to/your/apps/root\ntag: a-name-to-show-up-in-ps aux\n```\n\n## License\n\nRuby License, http://www.ruby-lang.org/en/LICENSE.txt.\n\n## Credits\n\nThe parser was originally from Mongrel http://mongrel.rubyforge.org by Zed Shaw.\nMongrel is copyright 2007 Zed A. Shaw and contributors. It is licensed under\nthe Ruby license and the GPL2.\n\nThin is copyright Marc-Andre Cournoyer <macournoyer@gmail.com>\n\nGet help at http://groups.google.com/group/thin-ruby/\nReport bugs at https://github.com/macournoyer/thin/issues\nand major security issues directly to me at macournoyer@gmail.com.\n"""
https://github.com/jnewland/votigoto,"""README for votigoto\n===================\n\n>> require 'votigoto'\n=> true\n>> tivo = Votigoto::Base.new(\""10.0.0.148\"",\""SEKRET_MEDIA_ACCESS_KEY\"")\n=> #<Votigoto::Base:0x14095d8 @mak=\""SEKRET_MEDIA_ACCESS_KEY\"", @ip=\""10.0.0.148\"">\n>> tivo.shows.first.to_s\n=> \""The Daily Show With Jon Stewart - Senator Joe Biden (D-Del.).\"""""
https://github.com/defunkt/mofo,"""  mofo.          \n- a ruby microformat parser -\n                     engine\n                     dsl\n                     helper\n                     toy\n\n= First, a word\n\nHpricot, while still great, seems destined for deprecation.\n\nIf you're into Nokogiri try Prism for your Microformatic needs:\n\nhttp://github.com/mwunsch/prism\n\n= Get Started Immediately\n\n  $ irb -rubygems \n  >> require 'mofo'\n  => true\n\n  >> fireball = HCard.find 'http://flickr.com/people/gruber/'\n  => #<HCard:0x6db898 ... >\n\n  >> fireball.nickname\n  => \""gruber\""\n\n  >> fireball.url\n  => \""http://daringfireball.net/\""\n\n  >> fireball.n.family_name\n  => \""Gruber\""\n\n  >> fireball.title\n  => \""Raconteur\""\n\n  >> fireball.adr.locality\n  => \""Philadelphia\""\n\n  >> fireball.logo\n  => \""http://static.flickr.com/9/buddyicons/44621776@N00.jpg?1117572751\""\n\n= Grab It\n\n  $ git clone git://github.com/defunkt/mofo.git\n  $ open http://github.com/defunkt/mofo\n\n= Microwhozit?\n\n  Microformats are tiny little markup definitions built on top of, usually, \n  HTML or XHTML.  \n\n  You have a blog.  You have recent posts on your blog's index page.  You have\n  an Atom feed.  You have recent posts on your blog's Atom feed.  See where I'm\n  going with this?\n\n  The hAtom microformat (or uformat) can be embedded in your existing HTML by\n  setting CSS classes with semantic meaning inside of your posts.  A class to signify\n  a post is contained within this div, a class to signify the contents of this\n  h3 are the post's title, a class to signify the contents of this span is the\n  blog post's author, etc.\n\n  You can then use a microformat parser (like, say, mofo) to extract this information\n  as you would from an Atom feed.  Hell, you can even convert hAtom to Atom.  It's an\n  insta-feed!  No extra code required!\n\n  You're already doing the work, you see.  Microformats are everywhere.  We just need\n  to set them free.\n\n  Check it:\n\n    <div class=\""post\"">\n      <h3>Megadeth Show Last Night</h3>\n      <span class=\""subtitle\"">Posted by Chris on June 4th</span>\n      <div class=\""content\"">Went to a show last night.  Megadeth.  It was alright.</div>\n    </div>\n\n  Right?  Normal.  Here's the same post marked up with hAtom:\n\n    <div class=\""post hentry\"">\n      <h3 class=\""entry-title\"">Megadeth Show Last Night</h3>\n      <span class=\""subtitle\"">Posted by <span class=\""author vcard fn\"">Chris</span> on \n      <abbr class=\""updated\"" title=\""2006-06-04T10:32:10Z\"">June 4th</abbr></span>\n      <div class=\""content entry-content\"">Went to a show last night.  Megadeth.  It was alright.</div>\n    </div>\n\n  All I did was add the hentry, entry-title, and entry-content classes to existing containers.  Then I\n  went ahead and wrapped the date in an <abbr> tag giving it a title in the microformat-standard way.  Finally\n  I put a div around Chris signifying it as the author field of the hEntry and making it a valid hCard by\n  including the vcard and fn classes.  It's really not all that hard.  Did I mess it up?  Maybe, but I'm sure I got\n  close.  And I didn't even use a reference.  Practice.\n\n  How'd we parse this, tho?\n\n    $ irb -rubygems\n    >> require 'mofo'\n    => true\n\n    >> post = HEntry.find 'http://milesofstyle.org/posts/351-megadeth-show-last-night.html'\n    => #<HEntry:0x6db898 ... > \n\n    >> post.entry_title\n    => \""Megadeth Show Last Night\""\n\n    >> post.properties\n    => [\""entry_content\"", \""updated\"", \""author\"", \""entry_title\""]\n\n    >> post.updated\n    => Sun Jun 04 10:32:10 UTC 2006\n\n    >> post.updated.class\n    => Time\n\n    >> post.author\n    => #<HCard:0x6e7b98 @properties=[\""fn\""], @fn=\""Chris\"">\n\n    >> post.author.fn\n    => \""Chris\""\n\n    >> post.entry_content\n    => \""Went to a show last night.  Megadeth.  It was alright.\""\n\n  That's, like, stupid easy.  If HEntry.find gets back more than one hEntry, you'll get an array.\n\n= Mofo#find\n\n  Everything revolves around the #find method.  Sound familiar?  Yeah.\n\n    >> Microformat.find \""http://valid-url.com\""\n    >> Microformat.find \""/path/to/existing/file\""\n    >> Microformat.find :text => \""microformat text\""\n   \n  Also, #find can be told explicitly to find all (returning an array on failure) or only find\n  the first (returning nil on failure).\n\n    >> Microformat.find :all => \""/existing/file\""\n    => [ array of microformat objects ] \n\n    >> Microformat.find :first => \""/existing/file\""\n    => microformat object\n\n    >> Microformat.find \""/existing/file\""\n    => either an array of objects or just one object\n\n  :all and :first go outside of :text.\n\n    >> Microformat.find :all => { :text => 'mfin text' } \n\n  That's it.  Some microformats take specific options.\n\n= Microformats\n\n  Here are the currently implemented microformats, along with a site you\n  can use them on today.  We want more, better, faster, stat.\n\n  formats:\n  - hCard     [ flickr profiles    ]\n  - hCalendar [ upcoming.org       ]\n  - hReview   [ cork'd reviews     ] \n  - hEntry    [ err the blog posts ]\n  - hResume   [ linkedin.com       ]\n  - xoxo      [ chowhound.com      ]\n  - geo       [ upcoming.org       ]\n  - adr       [ upcoming.org       ]\n  - xfn       [ linkedin.com       ]\n\n  patterns:\n  - rel-tag \n  - rel-bookmark\n  - include-pattern\n\n= Ruby on Rails\n\nmofo doubles as a Rails plugin.  Just drop it into vendor/plugins and you are good to go, with all the \navailable microformat parsers loaded into your application.\n\nmofo classes are YAML and Marshal approved.  This means you can cache them with DRb or memcached, or store\nthem in a session.\n\n= More Info\n\n  >> http://microformats.org/ \n  => \""The homepage, check\""\n  >> http://microformats.org/wiki/\n  => \""The wiki, check\""\n  >> http://blog.labnotes.org/category/microformats/\n  => \""Assaf Arkin knows his MFin' stuff\""\n  >> http://allinthehead.com/\n  => \""Drew McClellan, Microformat wizard\""\n  >> http://mofo.rubyforge.org/\n  => \""mofo HQ\""\n\n= Other Parsers\n\n  >> Scrapi\n  => http://rubyforge.org/projects/scrapi/\n  >> uformats\n  => http://rubyforge.org/projects/uformats\n\n= Contributors\n\n  >> Steve Ivy\n  >> Olle Jonsson\n  >> Christian Carter\n  >> Grant Rodgers\n  >> Denis Defreyne\n  >> Andrew Turner\n  >> Mark Murphy\n\n= Author\n\n  >> Chris Wanstrath\n  => chris[at]ozmm[dot]org\n"""
https://github.com/mojombo/god,"""God: The Ruby Framework for Process Management\n==============================================\n\n* Authors: Tom Preston-Werner, Kevin Clark, Eric Lindvall\n* Website: http://godrb.com\n\nDescription\n-----------\n\nGod is an easy to configure, easy to extend monitoring framework written in\nRuby.\n\nKeeping your server processes and tasks running should be a simple part of\nyour deployment process. God aims to be the simplest, most powerful monitoring\napplication available.\n\nDocumentation\n-------------\n\nSee in-repo documentation at `REPO_ROOT/doc`.\nSee online documentation at http://godrb.com.\n\nCommunity\n---------\n\nSign up for the god mailing list at http://groups.google.com/group/god-rb\n\nLicense\n-------\n\nSee LICENSE file.\n"""
https://github.com/jnewland/xhtmlize,"""xhtmlize\n==========\n\nRails helper to XHTML-ize chunks of user submitted HTML. For the standardista in all of us.\n\n>> html = \""<div><p>foo</p><a href='http://foo.com'>foo\""\n=> \""<div><p>foo</p><a href='http://foo.com'>foo\""\n>> xhtmlize(html)\n=> \""<div><p>foo</p><a href=\\\""http://foo.com\\\"">foo</a></div>\""\n\nAlso comes with an ActiveRecord class method to automatically xhtmlize attributes in an after_save callback.\n\nclass Comment < ActiveRecord::Base\n  xhtmlize :title, :content\nend"""
https://github.com/anotherjesse/foxtracs,null
https://github.com/wycats/jspec,null
https://github.com/jamesgolick/enum_field,null
https://github.com/vanpelt/jsawesome,"""Jsawesome\n\nDescription:\n    JSAwesome provides a powerful JSON based DSL for creating interactive forms.\n\nExample:\n    new JSAwesome('rad', [['cool','neat'], ['^neat',true]], {'cool':{label:'Cool man', validation:'cool'}).to_html()\n    =>\n      <label for=\""rad_cool\"">Cool man</label>\n      <input type=\""text\"" name=\""rad_cool\"" value=\""neat\""/>\n      <label for=\""rad_neat\""><input type=\""checkbox\"" name=\""rad_neat\"" checked=\""checked\""/> Neat</label>\n    \n    A detailed overview of the library is now available at\n      http://vandev.com/2008/4/22/jsawesome\n      \n    Also see the functional tests for more examples of what is possible\n\nMore information:\n    http://github.com/vanpelt/jsawesome/tree/master\n    \nAuthor:\n    Chris Van Pelt, vanpelt@doloreslabs.com"""
https://github.com/defunkt/exception_logger,"""ExceptionLogger\n===============\n\nThe Exception Logger (forgive the horrible name) logs your Rails exceptions in the database and provides a funky web interface to manage them.\n\nFirst you need to generate the migration:\n\n  ./script/generate exception_migration\n\nNext, you'll need to include the ExceptionLoggable module into ApplicationController.  Once that's done you might want to modify key methods to customize the logging:\n\n  render_404(exception) - Shows the 404 template.\n  \n  render_500(exception) - Shows the 500 template.\n  \n  log_exception(exception) - Logs the actual exception in the database.\n  \n  rescue_action_in_public(exception) - Does not log these exceptions: ActiveRecord::RecordNotFound, ActionController::UnknownController, ActionController::UnknownAction\n\nNow add a new route to your routes.rb:\n\n  map.connect \""logged_exceptions/:action/:id\"", :controller => \""logged_exceptions\""\n\nAfter that, visit /logged_exceptions in your application to manage the exceptions.\n\nOnce you have done that, open up the vendor/plugins/init.rb file and choose your pagination,\nsupported options are will_paginate, paginating_find, and simple mysql based pagination (Uses LIMIT)\nThe current default is none. To use the other options you need to uncomment the $PAGINATION_TYPE line\nand the require for that pagination, you should comment out what you won't use etc...\n\nIt's understandable that you may want to require authentication.  Add this to your config/environments/production.rb:\n\n  # config/environments/production.rb\n  config.after_initialize do\n    require 'application' unless Object.const_defined?(:ApplicationController)\n    LoggedExceptionsController.class_eval do\n      # set the same session key as the app\n      session :session_key => '_beast_session_id'\n      \n      # include any custom auth modules you need\n      include AuthenticationSystem\n      \n      before_filter :login_required\n      \n      # optional, sets the application name for the rss feeds\n      self.application_name = \""Beast\""\n      \n      protected\n        # only allow admins\n        # this obviously depends on how your auth system works\n        def authorized?\n          current_user.is_a?(Admin)\n        end\n        \n        # assume app's login required doesn't use http basic\n        def login_required_with_basic\n          respond_to do |accepts|\n            # alias_method_chain will alias the app's login_required to login_required_without_basic\n            accepts.html { login_required_without_basic }\n            \n            # access_denied_with_basic_auth is defined in LoggedExceptionsController\n            # get_auth_data returns back the user/password pair\n            accepts.rss do\n              access_denied_with_basic_auth unless self.current_user = User.authenticate(*get_auth_data)\n            end\n          end\n        end\n        \n        alias_method_chain :login_required, :basic\n    end\n  end\n\nThe exact code of course depends on the specific needs of your application.\n\nCREDITS\n\nJamis Buck  - original exception_notification plugin\nRick Olson  - model/controller code\nJosh Goebel - design\nJason Knight - Pagination support, built on/inspired by Ryanb's willpaginate support.\n"""
https://github.com/bmizerany/sinatra,null
https://github.com/Caged/microsis,null
https://github.com/defunkt/ambition,"""= Ambition\n\n\n== Get it\n\n\n\n$ git clone git://github.com/defunkt/ambition.git\n\n== Resources\n\n * http://ambition.rubyforge.org/\n * http://groups.google.com/group/ambition-rb/\n * http://errtheblog.com/posts/63-full-of-ambition\n * http://errtheblog.com/posts/82-adapting-ambitiously\n * http://errtheblog.com/posts/86-sugary-adapters\n * http://errtheblog.com/posts/64-even-more-ambitious\n\n\n\n== Author\n\nChris Wanstrath\nchris@ozmm.org\n"""
https://github.com/mmower/simply_versioned,"""SimplyVersioned\n===============\n\nRelease:\t1.0.0\nDate:\t\t\t28-01-2008\nAuthor:\t\tMatt Mower <self@mattmower.com>\n\nSimplyVersioned is a simple, non-invasive, approach to versioning ActiveRecord models.\n\nSimplyVersioned does not require any structural change to the models to be versioned and requires only one versions table to be created (a migration generator is supplied with the plugin) for the application, regardless of the number of models being versioned.\n\nThe plugin introduces a 'Version' ActiveRecord model (that reflects changes to model attributes) to which versioned models are polymorphically associated. Version records store the model information as a YAML hash.\n\t\nSimplyVersioned meets a simple need for model versioning. If your needs are more complex maybe try Rick Olsen's acts_as_versioned (http://svn.techno-weenie.net/projects/plugins/acts_as_versioned/).\n\t\nSimplyVersioned is (so far) actively tested with Rails 2.0.2 and Ruby 1.8.6\n\t\nUsage\n=====\n\n1. Install the plugin\n\n  ./script/plugin install http://rubymatt.rubyforge.org/svn/simply_versioned\n\n2. Generate the migration\n\n  ./script/generate simply_versioned_migration\n\n\tNote that the migration defaults to storing the version info in a TEXT field. On MySQL this will default to a\n\tlimit of 64K. If you are versioning particularly large models you will want to modify the migration to include\n\ta :limit => n condition to promote the yaml column to a MEDIUMTEXT or (god forbid) a LONGTEXT.\n\n3. Create the versions table\n\n  rake db:migrate\n\n4. Annotate the models you want to version specifying how many versions to keep\n\n\tclass Thing < ActiveRecord::Base\n\t  simply_versioned :keep => 10\n\tend\n\t\n\tIf you do not specify a limit then old versions are never automatically deleted. You can\n\tmanually delete them like this:\n\t\n\tthing.versions.purge( 10 )\n\t\n\twhich would delete all the but the last ten versions.\n\t\n\tIf you want fine-grained control over when versions are created you can use:\n\t\n\tclass Thing < ActiveRecord::Base\n\t\tsimply_versioned :automatic => false\n\tend\n\t\n\tand new versions will no longer be created by default. You will then need to use\n\tthe with_versioning method to create a version.\n\t\n\tLastly you can control which columns will be versioned by specifying an exclude parameter.\n\t\n\tclass Thing < ActiveRecord::Base\n\t\tsimply_versioned :exclude => :awkward_column\n\tend\n\t\t\n\tor\t\n\t\n\tclass Thing < ActiveRecord::Base\n\t\tsimply_versioned :exclude => [:first_awkward_column,:second_awkward_column,...]\n\tend\n\t\n\tThis may be helpful if you run into conflicts with other plugins which try to manage columns.\n\n5. Create versions\n\n\tthing = Thing.create!( :foo => bar ) # creates v1\n\tthing.foo = baz\n\tthing.save! # creates v2\n\t\n\tIf you need to control whether a version is created or not, use #with_versioning. For example:\n\t\n\tthing.with_versioning( false ) do |t|\n\t\tt.save!\n\tend\n\t\n\tor, using the \""magic pen\"" (http://dablog.rubypal.com/2007/2/18/the-magic-pens-of-ruby thanks hmj):\n\t\n\tthing.with_versioning( false, &:save! )\n\n6. Find versions\n\n\tthing.versions.each do |version| ... end\n\trender :partial => 'thing_version', :collection => thing.versions\n\tthing.versions.current\n\tthing.versions.first\n\tthing.versions.get( 3 )\n\t\n\tTo find a version number:\n\t\n\tthing.version_number\n\n7. Revert to a previous version\n\n\tthing.revert_to_version( 5 )\n\t\n\tIf a specific reversion needs to avoid overwriting some column values pass\n\tan :except option, e.g.\n\t\n\tthing.revert_to_version( 1, :except => [:name,:age] )\n\t\n\tThe revert_to_version method also takes an existing Version instance, e.g.\n\t\n\tversion = thing.versions.find( ... )\n\tthing.revert_to_version( version )\n\n8. Traverse versions\n\n\tthing.versions.current.previous\n\tthing.versions.first.next\n\n9. Obtain a copy of a previous versioned model\n\n\tthing.versions.first.model # => Instantiated Thing with versioned values\n\t\nThanks to:\n\n\tChris Wanstrath (http://ozmm.org/) for useful feedback and GitHub\n\tJosh Susser (http://blog.hasmanythrough.com/) for useful suggestions and feedback\n\tRick Olson (http://techno-weenie.net/) for all the many plugins whose code i've read\n\t\nCopyright (c) 2007 Matt Mower <self@mattmower.com> and released under the MIT license\n"""
https://github.com/jnewland/gsa-prototype,"""gsa-prototype\n=============\n\nPrototype/Javascript wrapper for the Google Search Appliance Search Protocol. Fancy cross-domain JSON support included.\n\nInstall\n=======\n\ngsa-prototype requires a custom XSL be installed on your Google Search Appliance\n\n* Login to the GSA Admin Console\n* Click 'Serving' on the sidebar\n* Create a new frontend named 'json'\n* Click 'Edit' beside the newly created frontend\n* Click 'Edit underlying XSLT code'\n* Select 'Import Stylesheet'\n* Import the template at xsl/json.xsl\n* Done!\n\nUsage\n=====\n\n>>> var gsa = new Gsa('foo.com')\n>>> gsa.search('jesse newland')\ntrue\n>>> gsa.results.first().get('title')\n\""LexBlog IT Director talks about today&#39;s platform upgrade : Real <b>...</b>\""\n>>> gsa.results.first().get('url')\n\""http://kevin.lexblog.com/2007/07/articles/cool-stuff/lexblog-it-director-talks-about-todays-platform-upgrade/\""\n\nSee inline documentation in gsa.js for more details."""
https://github.com/anotherjesse/s3,"""S3:// is a \""psuedo protocol\"" for Amazon's S3 service.\n\nInteract with S3 in the same way you do with HTTP, through your URL bar.\n\n* TODO:\n\n** 0.1 release [1/4]\n  - [ ] fix copyright/contributors info\n  - [ ] s3 logo\n  - [ ] help/about section\n  - [X] allow mixed case bucket names s3://\n\n* BUGS/IDEAS:\n\n** s3://twitter_production/profile_background_images/1001042/ -- cannot click the contained thing\n** s3://twitter_production/profile_background_images/ -- css breaks (the background stops) about 2/3 down\n** s3://what/ -- acts weird\n** setup credentials only works once due to blockUI\n\nFUTURE/IDEAS:\n\n** right click -> \""Save As\"" is broken\n** exception/feedback tool\n** setting ACL for a bucket\n** recursive deletion of a folder\n** setting ACL on a key\n** have a progress meter for uploads\n** Tools -> Page Info should have accurate information (s3 specific?)\n** cache the key listing info at the channel layer\n** support logging\n** right click handler for copy url/torrent\n** create time limited url for key\n** support renaming/copying keys\n** deal with undetected mime-types (ask user?)\n** linkify key directories/paths (ala initial designs for awesome bar)\n** a good date format on key list\n** support adding people to buckets via email addresses\n** specify if bucket should be created in US or Europe\n** transfer over SSL?\n** Handle uploading of folders via DND\n** emulate \""create folder\"" system that others use?\n"""
https://github.com/technoweenie/duplikate,"""duplikate\n=========\n\n# process the differences between the two directories:\n\ndupe = Duplikate.process 'my-git-repo', 'my-svn-repo'\ndupe.added_files         #=> [..., ...]\ndupe.added_directories   #=> [..., ...]\ndupe.deleted_files       #=> [..., ...]\ndupe.deleted_directories #=> [..., ...]\ndupe.existing_files      #=> [..., ...]\n\ndupe.report\n\n# Or actually make the changes and commit in svn:\n\nDuplikate.execute 'my-git-repo', 'my-svn-repo'\n\nTODO: Actual real-world usage!\n"""
https://github.com/ruby-git/ruby-git,"""# Git Library for Ruby\n\nLibrary for using Git in Ruby.\n\n## Homepage\n\nGit public hosting of the project source code is at:\n\nhttp://github.com/ruby-git/ruby-git\n\n## Install\n\nYou can install Ruby/Git like this:\n\n    $ sudo gem install git\n\n## Code Status\n\n* [![Build Status](https://travis-ci.org/ruby-git/ruby-git.svg?branch=master)](https://travis-ci.org/ruby-git/ruby-git)\n* [![Code Climate](https://codeclimate.com/github/ruby-git/ruby-git.png)](https://codeclimate.com/github/ruby-git/ruby-git)\n* [![Gem Version](https://badge.fury.io/rb/git.png)](http://badge.fury.io/rb/git)\n\n## Major Objects\n\n**Git::Base** - The object returned from a `Git.open` or `Git.clone`. Most major actions are called from this object.\n\n**Git::Object** - The base object for your tree, blob and commit objects, returned from `@git.gtree` or `@git.object` calls.  the `Git::AbstractObject` will have most of the calls in common for all those objects.\n\n**Git::Diff** - returns from a `@git.diff` command.  It is an Enumerable that returns `Git::Diff:DiffFile` objects from which you can get per file patches and insertion/deletion statistics.  You can also get total statistics from the Git::Diff object directly.\n\n**Git::Status** - returns from a `@git.status` command.  It is an Enumerable that returns\n`Git:Status::StatusFile` objects for each object in git, which includes files in the working\ndirectory, in the index and in the repository.  Similar to running 'git status' on the command line to determine untracked and changed files.\n\n**Git::Branches** - Enumerable object that holds `Git::Branch objects`.  You can call .local or .remote on it to filter to just your local or remote branches.\n\n**Git::Remote**- A reference to a remote repository that is tracked by this repository.\n\n**Git::Log** - An Enumerable object that references all the `Git::Object::Commit` objects that encompass your log query, which can be constructed through methods on the `Git::Log object`,\nlike:\n\n `@git.log(20).object(\""some_file\"").since(\""2 weeks ago\"").between('v2.6', 'v2.7').each { |commit| [block] }`\n\n## Examples\n\nHere are a bunch of examples of how to use the Ruby/Git package.\n\nRuby < 1.9 will require rubygems to be loaded.\n\n```ruby\n    require 'rubygems'\n```\n\nRequire the 'git' gem.\n```ruby\n    require 'git'\n```\n\nGit env config\n\n```ruby\n  Git.configure do |config|\n    # If you want to use a custom git binary\n    config.binary_path = '/git/bin/path'\n\n    # If you need to use a custom SSH script\n    config.git_ssh = '/path/to/ssh/script'\n  end\n\n```\n\n\nHere are the operations that need read permission only.\n\n```ruby\n    g = Git.open(working_dir, :log => Logger.new(STDOUT))\n\n    g.index\n    g.index.readable?\n    g.index.writable?\n    g.repo\n    g.dir\n\n    g.log   # returns array of Git::Commit objects\n    g.log.since('2 weeks ago')\n    g.log.between('v2.5', 'v2.6')\n    g.log.each {|l| puts l.sha }\n    g.gblob('v2.5:Makefile').log.since('2 weeks ago')\n\n    g.object('HEAD^').to_s  # git show / git rev-parse\n    g.object('HEAD^').contents\n    g.object('v2.5:Makefile').size\n    g.object('v2.5:Makefile').sha\n\n    g.gtree(treeish)\n    g.gblob(treeish)\n    g.gcommit(treeish)\n\n\n    commit = g.gcommit('1cc8667014381')\n\n    commit.gtree\n    commit.parent.sha\n    commit.parents.size\n    commit.author.name\n    commit.author.email\n    commit.author.date.strftime(\""%m-%d-%y\"")\n    commit.committer.name\n    commit.date.strftime(\""%m-%d-%y\"")\n    commit.message\n\n    tree = g.gtree(\""HEAD^{tree}\"")\n\n    tree.blobs\n    tree.subtrees\n    tree.children # blobs and subtrees\n\n    g.revparse('v2.5:Makefile')\n\n    g.branches # returns Git::Branch objects\n    g.branches.local\n    g.branches.remote\n    g.branches[:master].gcommit\n    g.branches['origin/master'].gcommit\n\n    g.grep('hello')  # implies HEAD\n    g.blob('v2.5:Makefile').grep('hello')\n    g.tag('v2.5').grep('hello', 'docs/')\n    g.describe()\n    g.describe('0djf2aa')\n    g.describe('HEAD', {:all => true, :tags => true})\n\n    g.diff(commit1, commit2).size\n    g.diff(commit1, commit2).stats\n    g.diff(commit1, commit2).name_status\n    g.gtree('v2.5').diff('v2.6').insertions\n    g.diff('gitsearch1', 'v2.5').path('lib/')\n    g.diff('gitsearch1', @git.gtree('v2.5'))\n    g.diff('gitsearch1', 'v2.5').path('docs/').patch\n    g.gtree('v2.5').diff('v2.6').patch\n\n    g.gtree('v2.5').diff('v2.6').each do |file_diff|\n       puts file_diff.path\n       puts file_diff.patch\n       puts file_diff.blob(:src).contents\n    end\n\n    g.config('user.name')  # returns 'Scott Chacon'\n    g.config # returns whole config hash\n\n    g.tags # returns array of Git::Tag objects\n\n    g.show()\n    g.show('HEAD')\n    g.show('v2.8', 'README.md')\n\n    Git.ls_remote('https://github.com/ruby-git/ruby-git.git') # returns a hash containing the available references of the repo.\n    Git.ls_remote('/path/to/local/repo')\n    Git.ls_remote() # same as Git.ls_remote('.')\n\n```\n\nAnd here are the operations that will need to write to your git repository.\n\n```ruby\n      g = Git.init\n       Git.init('project')\n       Git.init('/home/schacon/proj',\n        { :repository => '/opt/git/proj.git',\n           :index => '/tmp/index'} )\n\n     g = Git.clone(URI, NAME, :path => '/tmp/checkout')\n     g.config('user.name', 'Scott Chacon')\n     g.config('user.email', 'email@email.com')\n\n     g.add                                   # git add -- \"".\""\n     g.add(:all=>true)                       # git add --all -- \"".\""\n     g.add('file_path')                      # git add -- \""file_path\""\n     g.add(['file_path_1', 'file_path_2'])   # git add -- \""file_path_1\"" \""file_path_2\""\n\n     g.remove()\t\t\t\t\t\t\t\t\t# git rm -f -- \"".\""\n     g.remove('file.txt')\t\t\t\t\t\t# git rm -f -- \""file.txt\""\n     g.remove(['file.txt', 'file2.txt'])\t\t# git rm -f -- \""file.txt\"" \""file2.txt\""\n     g.remove('file.txt', :recursive => true) \t# git rm -f -r -- \""file.txt\""\n     g.remove('file.txt', :cached => true)\t\t# git rm -f --cached -- \""file.txt\""\n\n     g.commit('message')\n     g.commit_all('message')\n\n     g = Git.clone(repo, 'myrepo')\n     g.chdir do\n      new_file('test-file', 'blahblahblah')\n      g.status.changed.each do |file|\n       puts file.blob(:index).contents\n      end\n     end\n\n     g.reset # defaults to HEAD\n     g.reset_hard(Git::Commit)\n\n     g.branch('new_branch') # creates new or fetches existing\n     g.branch('new_branch').checkout\n     g.branch('new_branch').delete\n     g.branch('existing_branch').checkout\n     g.branch('master').contains?('existing_branch')\n\n     g.checkout('new_branch')\n     g.checkout(g.branch('new_branch'))\n\n     g.branch(name).merge(branch2)\n     g.branch(branch2).merge  # merges HEAD with branch2\n\n     g.branch(name).in_branch(message) { # add files }  # auto-commits\n     g.merge('new_branch')\n     g.merge('origin/remote_branch')\n     g.merge(g.branch('master'))\n     g.merge([branch1, branch2])\n\n     r = g.add_remote(name, uri)  # Git::Remote\n     r = g.add_remote(name, Git::Base)  # Git::Remote\n\n     g.remotes  # array of Git::Remotes\n     g.remote(name).fetch\n     g.remote(name).remove\n     g.remote(name).merge\n     g.remote(name).merge(branch)\n\n     g.fetch\n     g.fetch(g.remotes.first)\n     g.fetch('origin', {:ref => 'some/ref/head'} )\n\n     g.pull\n     g.pull(Git::Repo, Git::Branch) # fetch and a merge\n\n     g.add_tag('tag_name') # returns Git::Tag\n     g.add_tag('tag_name', 'object_reference')\n     g.add_tag('tag_name', 'object_reference', {:options => 'here'})\n     g.add_tag('tag_name', {:options => 'here'})\n\n     Options:\n       :a | :annotate\n       :d\n       :f\n       :m | :message\n       :s\n\n     g.delete_tag('tag_name')\n\n     g.repack\n\n     g.push\n     g.push(g.remote('name'))\n```\n\nSome examples of more low-level index and tree operations\n\n```ruby\n     g.with_temp_index do\n\n       g.read_tree(tree3) # calls self.index.read_tree\n       g.read_tree(tree1, :prefix => 'hi/')\n\n       c = g.commit_tree('message')\n       # or #\n       t = g.write_tree\n       c = g.commit_tree(t, :message => 'message', :parents => [sha1, sha2])\n\n       g.branch('branch_name').update_ref(c)\n       g.update_ref(branch, c)\n\n       g.with_temp_working do # new blank working directory\n         g.checkout\n         g.checkout(another_index)\n         g.commit # commits to temp_index\n       end\n     end\n\n     g.set_index('/path/to/index')\n\n\n     g.with_index(path) do\n       # calls set_index, then switches back after\n     end\n\n     g.with_working(dir) do\n     # calls set_working, then switches back after\n     end\n\n     g.with_temp_working(dir) do\n       g.checkout_index(:prefix => dir, :path_limiter => path)\n       # do file work\n       g.commit # commits to index\n     end\n```\n\n## License\n\nlicensed under MIT License Copyright (c) 2008  Scott Chacon. See LICENSE for further details.\n"""
https://github.com/anotherjesse/taboo,"""* Before release 0.20 [0/8]\n  - [ ] null titles break taboo\n  - [ ] make sure re-clicking the taboo button doesn't overwrite data?\n  - [ ] inplace editor doesn't handle escape key correctly:\n    click to edit, save changes, then click escape again to change\n  - [ ] inplace editor breaks if you change textarea while it is in edit mode\n  - [ ] deleting from grid mode doesn't show the undelete box\n  - [ ] undelete / delete all isn't show correctly on trash.js\n  - [ ] use humanized messages on deletion/undelete?\n  - [ ] use favicons on dropdown menu?\n  - [ ] tooltips on grid.js?\n  - [ ] tooltips on calendar.js\n"""
https://github.com/ezmobius/bmhsearch,"""bmhsearch\n    by Zed Shaw\n\n== DESCRIPTION:\n  \nBMHSearch is a fast mime carver.\n\n== FEATURES/PROBLEMS:\n  \n* FIX (list of features or problems)\n\n== SYNOPSYS:\n\n  FIX (code sample of usage)\n\n== REQUIREMENTS:\n\n* FIX (list of requirements)\n\u00df\n== INSTALL:\n\n* FIX (sudo gem install, anything else)\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) 2007 FIX\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"""
https://github.com/abhay/gchart,"""= GChart\n\n== DESCRIPTION\n  \nGChart exposes the Google Chart API (http://code.google.com/apis/chart) via\na friendly Ruby interface. It can generate the URL for a given chart\n(for webpage use), or download the generated PNG (for offline use).\n\n== PROBLEMS/TODO\n\n* Add support fills (area or background), grid lines, shape markers, range markers \n* Support shorthand colors and color names\n* Make venn data specification friendlier\n\nThere are lots of missing features. Until they're implemented, you can directly specify\nquery parameters using the :extras key, e.g.,\n\n  # provides a legend for each data set\n  g = GChart.line(:data => [[1, 2], [3, 4]], :extras => { \""chdl\"" => \""First|Second\""})\n\n== SYNOPSIS\n\n  # line chart\n  g = GChart.line(:data => [0, 10, 100])\n  \n  # bar chart\n  g = GChart.bar(:data => [100, 1000, 10000])\n  \n  # pie chart (pie3d for a fancier look)\n  g = GChart.pie(:data => [33, 33, 34])\n  \n  # venn diagram (asize, bsize, csize, ab%, bc%, ca%, abc%)\n  g = GChart.venn(:data => [100, 80, 60, 30, 30, 30, 10])\n  \n  # scatter plot (x coords, y coords [, sizes])\n  g = GChart.scatter(:data => [[1, 2, 3, 4, 5], [5, 4, 3, 2, 1], [1, 2, 3, 4, 5]])\n\n  # map chart\n  g = GChart.map(:area => 'usa', :data => {'NY'=>1,'VA'=>3,'CA'=>2})\n  \n  # meter\n  g = GChart.meter(:data => 70, :label => \""70%\"")\n  \n  # chart title\n  g = GChart.line(:title => \""Awesomeness over Time\"", :data => [0, 10, 100])\n\n  # data set legend\n  g = GChart.line(:data => [[1, 2], [3, 4]], :legend => [\""Monkeys\"", \""Ferrets\""])\n\n  # data set colors\n  g = GChart.line(:data => [[0, 10, 100], [100, 10, 0]], :colors => [\""ff0000\"", \""0000ff\""])\n  \n  g.to_url            # generate the chart's URL, or\n  g.fetch             # get the bytes, or\n  g.write(\""foo.png\"")  # write to a file (defaults to \""chart.png\"")\n  g.write(stream)     # write to anything that quacks like IO\n\n== LICENSE\n\n(The MIT License)\n\nCopyright 2007-2008 John Barnette (jbarnette@rubyforge.org)\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"""
https://github.com/danwrong/low-pro-for-jquery,"""Low Pro JQ\n----------\n\nAuthor: Dan Webb (dan@danwebb.net)\nGIT: github.com:danwrong/low-pro-for-jquery.git\nDownload: http://github.com/danwrong/low-pro-for-jquery/tree/master/src/lowpro.jquery.js?raw=true\n\nA jQuery port of the Low Pro behavior framework that was originally written for Prototype.\n\n\n\nIn brief\n--------\n\nCreate a behavior as a class:\n\nTesty = $.klass({\n initialize: function(arg) {\n   alert('ive just been attached with the arg ' + arg);\n },\n onclick: function() {\n   alert('ive been clicked');\n }\n});\n\nBtw, $.klass is a full port of Prototype's Class.create so youget that as a bonus and \ncan use all the inheritance stuff in the same way.\n\nNext, attach the behavior on DOM ready in the jQuery way:\n\njQuery(function($) {\n $('p').attach(Testy, 'My arg');\n});\n\nAlternatively, if you just need to attach behaviors and get references to the behavior instances\ncreated then you can use:\n\n$('a').attachAndReturn(Clicky, 45) //=> Array of behavior instances\n\nAside from this everything works the same as Low Pro for Prototype.\nSee http://www.danwebb.net/lowpro for details.\n\n\n\nLivequery support\n-----------------\n\nIf the livequery plugin is found then Low Pro will use it to automatically bind behaviors to\nnewly created content so if, taking the above example, you did something like:\n\n$(document.body).append('<p>A new para</p>')\n\nThen it too would get a behavior binded to it.\n\n\n\nAcknowledgements\n----------------\n\nThe $.klass code is a direct port of the Class.create code from Prototype (http://prototypejs.org)."""
https://github.com/uggedal/mofo,"""  mofo.          \n- a ruby microformat parser -\n                     engine\n                     dsl\n                     helper\n                     toy\n\n= Get Started Immediately\n\n  $ irb -rubygems \n  >> require 'mofo'\n  => true\n\n  >> fireball = HCard.find 'http://flickr.com/people/gruber/'\n  => #<HCard:0x6db898 ... >\n\n  >> fireball.nickname\n  => \""gruber\""\n\n  >> fireball.url\n  => \""http://daringfireball.net/\""\n\n  >> fireball.n.family_name\n  => \""Gruber\""\n\n  >> fireball.title\n  => \""Raconteur\""\n\n  >> fireball.adr.locality\n  => \""Philadelphia\""\n\n  >> fireball.logo\n  => \""http://static.flickr.com/9/buddyicons/44621776@N00.jpg?1117572751\""\n\n= Grab It\n\n  $ git clone git://github.com/defunkt/mofo.git\n  $ open http://github.com/defunkt/mofo\n\n= Microwhozit?\n\n  Microformats are tiny little markup definitions built on top of, usually, \n  HTML or XHTML.  \n\n  You have a blog.  You have recent posts on your blog's index page.  You have\n  an Atom feed.  You have recent posts on your blog's Atom feed.  See where I'm\n  going with this?\n\n  The hAtom microformat (or uformat) can be embedded in your existing HTML by\n  setting CSS classes with semantic meaning inside of your posts.  A class to signify\n  a post is contained within this div, a class to signify the contents of this\n  h3 are the post's title, a class to signify the contents of this span is the\n  blog post's author, etc.\n\n  You can then use a microformat parser (like, say, mofo) to extract this information\n  as you would from an Atom feed.  Hell, you can even convert hAtom to Atom.  It's an\n  insta-feed!  No extra code required!\n\n  You're already doing the work, you see.  Microformats are everywhere.  We just need\n  to set them free.\n\n  Check it:\n\n    <div class=\""post\"">\n      <h3>Megadeth Show Last Night</h3>\n      <span class=\""subtitle\"">Posted by Chris on June 4th</span>\n      <div class=\""content\"">Went to a show last night.  Megadeth.  It was alright.</div>\n    </div>\n\n  Right?  Normal.  Here's the same post marked up with hAtom:\n\n    <div class=\""post hentry\"">\n      <h3 class=\""entry-title\"">Megadeth Show Last Night</h3>\n      <span class=\""subtitle\"">Posted by <span class=\""author vcard fn\"">Chris</span> on \n      <abbr class=\""updated\"" title=\""2006-06-04T10:32:10Z\"">June 4th</abbr></span>\n      <div class=\""content entry-content\"">Went to a show last night.  Megadeth.  It was alright.</div>\n    </div>\n\n  All I did was add the hentry, entry-title, and entry-content classes to existing containers.  Then I\n  went ahead and wrapped the date in an <abbr> tag giving it a title in the microformat-standard way.  Finally\n  I put a div around Chris signifying it as the author field of the hEntry and making it a valid hCard by\n  including the vcard and fn classes.  It's really not all that hard.  Did I mess it up?  Maybe, but I'm sure I got\n  close.  And I didn't even use a reference.  Practice.\n\n  How'd we parse this, tho?\n\n    $ irb -rubygems\n    >> require 'mofo'\n    => true\n\n    >> post = HEntry.find 'http://milesofstyle.org/posts/351-megadeth-show-last-night.html'\n    => #<HEntry:0x6db898 ... > \n\n    >> post.entry_title\n    => \""Megadeth Show Last Night\""\n\n    >> post.properties\n    => [\""entry_content\"", \""updated\"", \""author\"", \""entry_title\""]\n\n    >> post.updated\n    => Sun Jun 04 10:32:10 UTC 2006\n\n    >> post.updated.class\n    => Time\n\n    >> post.author\n    => #<HCard:0x6e7b98 @properties=[\""fn\""], @fn=\""Chris\"">\n\n    >> post.author.fn\n    => \""Chris\""\n\n    >> post.entry_content\n    => \""Went to a show last night.  Megadeth.  It was alright.\""\n\n  That's, like, stupid easy.  If HEntry.find gets back more than one hEntry, you'll get an array.\n\n= Mofo#find\n\n  Everything revolves around the #find method.  Sound familiar?  Yeah.\n\n    >> Microformat.find \""http://valid-url.com\""\n    >> Microformat.find \""/path/to/existing/file\""\n    >> Microformat.find :text => \""microformat text\""\n   \n  Also, #find can be told explicitly to find all (returning an array on failure) or only find\n  the first (returning nil on failure).\n\n    >> Microformat.find :all => \""/existing/file\""\n    => [ array of microformat objects ] \n\n    >> Microformat.find :first => \""/existing/file\""\n    => microformat object\n\n    >> Microformat.find \""/existing/file\""\n    => either an array of objects or just one object\n\n  :all and :first go outside of :text.\n\n    >> Microformat.find :all => { :text => 'mfin text' } \n\n  That's it.  Some microformats take specific options.\n\n= Microformats\n\n  Here are the currently implemented microformats, along with a site you\n  can use them on today.  We want more, better, faster, stat.\n\n  formats:\n  - hCard     [ flickr profiles    ]\n  - hCalendar [ upcoming.org       ]\n  - hReview   [ cork'd reviews     ] \n  - hEntry    [ err the blog posts ]\n  - hResume   [ linkedin.com       ]\n  - xoxo      [ chowhound.com      ]\n  - geo       [ upcoming.org       ]\n  - adr       [ upcoming.org       ]\n  - xfn       [ linkedin.com       ]\n\n  patterns:\n  - rel-tag \n  - rel-bookmark\n  - include-pattern\n\n= Ruby on Rails\n\nmofo doubles as a Rails plugin.  Just drop it into vendor/plugins and you are good to go, with all the \navailable microformat parsers loaded into your application.\n\nmofo classes are YAML and Marshal approved.  This means you can cache them with DRb or memcached, or store\nthem in a session.\n\n= More Info\n\n  >> http://microformats.org/ \n  => \""The homepage, check\""\n  >> http://microformats.org/wiki/\n  => \""The wiki, check\""\n  >> http://blog.labnotes.org/category/microformats/\n  => \""Assaf Arkin knows his MFin' stuff\""\n  >> http://allinthehead.com/\n  => \""Drew McClellan, Microformat wizard\""\n  >> http://mofo.rubyforge.org/\n  => \""mofo HQ\""\n\n= Other Parsers\n\n  >> Scrapi\n  => http://rubyforge.org/projects/scrapi/\n  >> uformats\n  => http://rubyforge.org/projects/uformats\n\n= Contributors\n\n  >> Steve Ivy\n  >> Olle Jonsson\n  >> Christian Carter\n  >> Grant Rodgers\n  >> Denis Defreyne\n  >> Andrew Turner\n  >> Mark Murphy\n\n= Author\n\n  >> Chris Wanstrath\n  => chris[at]ozmm[dot]org\n"""
https://github.com/benburkert/schemr,"""Github for the win!\n"""
https://github.com/wayneeseguin/merb-core,"""merb-core is a new branch of Merb (also referred to as merb-next or the 0.9 series) which aims to provide a stable, stripped down API for a future Merb 1.0 release.\n\nThis branch is based off the 0.5 release series but with significant rewrites.\n\nGoals of this release:\n\n  * Stabilize the @public interface methods to provide for a more consistent application development experience.\n  * Remove features until nothing except a central application API is left\n  * Improve comments on methods using a standard documentation methodology as described in DOCUMENTATION_STANDARDS\n  * Separate the tests into two sections... \""private\"" and \""public\""\n    * Public methods are methods tagged with @public that will be part of the standard, stable Merb API\n    * Private methods are implementation methods that might \n  * Implement a new render API\n  * Build more extensions to regain selected features when needed\n  \nTo familiarize yourself with how a merb-core application might look, reference the /sample directory\n"""
https://github.com/KirinDave/yaws,"""\nThis is yaws, a webserver for dynamic content written in Erlang.\n\n\nTo build and install\n\n\n1. Get and install an erlang system (http://www.erlang.org)\n\n2. ./configure --prefix=/usr/local\n   This will install everything under /usr/local including var files\n   in /usr/local/var/run/yaws and etc files in\n   /usr/local/etc/yaws.*\n\n  A plain ./configure will install executables under \n  /usr/local/bin and libs in /usr/local/lib/yaws etc and\n  var files will end up under /usr/local/etc and /usr/local/var\n\n\nNote: We can also change the target directory for etc and var \n      directories by using:\n\n  --localstatedir=DIR for files that should go in /var\n  --sysconfdir=DIR for files that should go in /etc\n  --disable-pam  If we for some reason do not want pam support\n  --with-extrainclude=DIR Will add DIR to the include path\n                      May be useful if e.g. pam is installed\n\t\t      somewhere where its usually not found\n  --with-defaultcharset=String  Will set the default charset used\n                        in generated page headers. Usually never needed.\n                        \nThis way you can precisely control where you install Yaws (This is\nusefull for computers where you do not have right access to the \nstandard systemdirs). \n\nFor example:\n./configure --prefix=/home/install/yaws --localstatedir=/home/install/yaws/var --sysconfdir=/home/install/etc\n\n\n2b. Note to packagers (rpm, deb ...) All install targets support the \n    DESTDIR variable.\n    Thus, if we do ./configure --prefix=/usr; make\n    we can subsequently do:\n    DESTDIR=/foo/bar make install\n    All yaws files will be installed under DESTDIR, but all \n    code will assume yaws should be installed under /usr\n\n\n3. make\n     This will build the system\n\n  make docs \n     (Optionnal) You can issue this command if you want to build Yaws\n     documentation.\n\n  make local_install\n     and perform something we call a\n     local install. It will create an executable script in the $HOMe/bin \n     directory and a config file in $HOME/yaws.conf. This is for developers\n     only\n\n4.   To test the build, Start as bin/yaws -i \n     This will start a webserver at http://0.0.0.0:8000\n     Terminate through ^C or > init:stop()\n\n5. as root make install\n\n6. as root Start as /usr/local/bin/yaws -i \n   (this starts an interactive system)\n\n7. This will create a webserver at http://${host} and one at https://${host}\n\n8. as root Edit /etc/yaws.conf \n\n9. Create content in /var/yaws\n\n10a. Start as /usr/local/bin/yaws --daemon --heart\n     This will start a daemon (--daemon) which will be autorestarted when/if\n     it crashes or hangs (--heart)\n\n10b. Or start interactive system as /usr/local/bin/yaws -i\n\n"""
https://github.com/jamesgolick/resource_controller,null
https://github.com/sr/dst,"""dst is a KISS GTD manager for the command line lovers.\n\n== Licence\n\ndst is copyright 2008 Simon Rozet. It is licensed under the MIT licence.\nSee the included LICENSE file for details.\n\n== Install\n\n  sudo gem install ape\n\n== Usage\n\n  % dst @mail john@doe.org about foo\n  1 - `@mail john@doe.org about foo' created.\n  % dst @code :myproj fix bug 123\n  2 - `@code :myproj fix bug 123' created.\n  % dst @code :myproj do foo and bar\n  3 - `@code :myproj do foo and bar' created.\n  % dst\n  1 - @mail john@doe.org about foo\n  2 - @code :myproj fix bug\n  3 - @code :myproj do foo and bar\n  % dst @mail\n  1 - @mail john@doe.org about foo\n  % dst :myproj\n  2 - @code :myproj fix bug\n  3 - @code :myproj do foo and bar\n  % dst ^2\n  Ok, `2 - @code :myproj fix bug' marked as `completed'.\n  % dst\n  1 - @mail john@doe.org about foo\n  3 - @code :myproj do foo and bar\n\n== Contact\n\nSimon Rozet, simon@rozet.name\n"""
https://github.com/mojombo/chronic,"""Chronic\n=======\n\nChronic is a natural language date/time parser written in pure Ruby. See below\nfor the wide variety of formats Chronic will parse.\n\n## Installation\n\n```\n$ gem install chronic\n```\n\n## Usage\n\n```ruby\nrequire 'chronic'\n\nTime.now   #=> Sun Aug 27 23:18:25 PDT 2006\n\nChronic.parse('tomorrow')\n  #=> Mon Aug 28 12:00:00 PDT 2006\n\nChronic.parse('monday', :context => :past)\n  #=> Mon Aug 21 12:00:00 PDT 2006\n\nChronic.parse('this tuesday 5:00')\n  #=> Tue Aug 29 17:00:00 PDT 2006\n\nChronic.parse('this tuesday 5:00', :ambiguous_time_range => :none)\n  #=> Tue Aug 29 05:00:00 PDT 2006\n\nChronic.parse('may 27th', :now => Time.local(2000, 1, 1))\n  #=> Sat May 27 12:00:00 PDT 2000\n\nChronic.parse('may 27th', :guess => false)\n  #=> Sun May 27 00:00:00 PDT 2007..Mon May 28 00:00:00 PDT 2007\n\nChronic.parse('6/4/2012', :endian_precedence => :little)\n  #=> Fri Apr 06 00:00:00 PDT 2012\n\nChronic.parse('INVALID DATE')\n  #=> nil\n```\n\nIf the parser can find a date or time, either a Time or Chronic::Span\nwill be returned (depending on the value of `:guess`). If no\ndate or time can be found, `nil` will be returned.\n\nSee `Chronic.parse` for detailed usage instructions.\n\n## Examples\n\nChronic can parse a huge variety of date and time formats. Following is a\nsmall sample of strings that will be properly parsed. Parsing is case\ninsensitive and will handle common abbreviations and misspellings.\n\n#### Simple\n\n* thursday\n* november\n* summer\n* friday 13:00\n* mon 2:35\n* 4pm\n* 10 to 8\n* 10 past 2\n* half past 2\n* 6 in the morning\n* friday 1pm\n* sat 7 in the evening\n* yesterday\n* today\n* tomorrow\n* last week\n* next week\n* this tuesday\n* next month\n* last winter\n* this morning\n* last night\n* this second\n* yesterday at 4:00\n* last friday at 20:00\n* last week tuesday\n* tomorrow at 6:45pm\n* afternoon yesterday\n* thursday last week\n\n#### Complex\n\n* 3 years ago\n* a year ago\n* 5 months before now\n* 7 hours ago\n* 7 days from now\n* 1 week hence\n* in 3 hours\n* 1 year ago tomorrow\n* 3 months ago saturday at 5:00 pm\n* 7 hours before tomorrow at noon\n* 3rd wednesday in november\n* 3rd month next year\n* 3rd thursday this september\n* 4th day last week\n* fourteenth of june 2010 at eleven o'clock in the evening\n* may seventh '97 at three in the morning\n\n#### Specific Dates\n\n* January 5\n* 22nd of june\n* 5th may 2017\n* February twenty first\n* dec 25\n* may 27th\n* October 2006\n* oct 06\n* jan 3 2010\n* february 14, 2004\n* february 14th, 2004\n* 3 jan 2000\n* 17 april 85\n* 5/27/1979\n* 27/5/1979\n* 05/06\n* 1979-05-27\n* Friday\n* 5\n* 4:00\n* 17:00\n* 0800\n\n#### Specific Times (many of the above with an added time)\n\n* January 5 at 7pm\n* 22nd of june at 8am\n* 1979-05-27 05:00:00\n* 03/01/2012 07:25:09.234567\n* 2013-08-01T19:30:00.345-07:00\n* 2013-08-01T19:30:00.34-07:00\n* etc\n\n\n## Time Zones\n\nChronic allows you to set which Time class to use when constructing times. By\ndefault, the built in Ruby time class creates times in your system's local\ntime zone. You can set this to something like ActiveSupport's\n[TimeZone](http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html)\nclass to get full time zone support.\n\n```\n>> Time.zone = \""UTC\""\n>> Chronic.time_class = Time.zone\n>> Chronic.parse(\""June 15 2006 at 5:45 AM\"")\n=> Thu, 15 Jun 2006 05:45:00 UTC +00:00\n```\n\n## Limitations\n\nChronic uses Ruby's built in Time class for all time storage and computation.\nBecause of this, only times that the Time class can handle will be properly\nparsed. Parsing for times outside of this range will simply return `nil`.\nSupport for a wider range of times is planned for a future release.\n\n\n## Contribute\n\nIf you'd like to hack on Chronic, start by forking the repo on GitHub:\n\nhttps://github.com/mojombo/chronic\n\nThe best way to get your changes merged back into core is as follows:\n\n1. Clone down your fork\n1. Create a thoughtfully named topic branch to contain your change\n1. Install the development dependencies by running `bundle install`\n1. Hack away\n1. Add tests and make sure everything still passes by running `bundle exec rake`\n1. Ensure your tests pass in multiple timezones. ie `TZ=utc bundle exec rake` `TZ=BST bundle exec rake`\n1. If you are adding new functionality, document it in the README\n1. Do not change the version number, we will do that on our end\n1. If necessary, rebase your commits into logical chunks, without errors\n1. Push the branch up to GitHub\n1. Send a pull request for your branch\n"""
https://github.com/jamesgolick/markaby,"""= Markaby (Markup as Ruby)\n\nMarkaby is a very short bit of code for writing HTML pages in pure Ruby.\nIt is an alternative to ERb which weaves the two languages together.\nAlso a replacement for templating languages which use primitive languages\nthat blend with HTML.\n\n== Using Markaby as a Rails plugin\n\nWrite Rails templates in pure Ruby.  Example layout:\n\n  html do\n    head do\n      title 'Products: ' + action_name\n      stylesheet_link_tag 'scaffold'\n    end\n  \n    body do\n      p flash[:notice], :style => \""color: green\""\n  \n      self << content_for_layout\n    end\n  end\n\n== Using Markaby as a Ruby class\n\nMarkaby is flaming easy to call from your Ruby classes.\n\n  require 'markaby'\n\n  mab = Markaby::Builder.new\n  mab.html do\n    head { title \""Boats.com\"" }\n    body do\n      h1 \""Boats.com has great deals\""\n      ul do\n        li \""$49 for a canoe\""\n        li \""$39 for a raft\""\n        li \""$29 for a huge boot that floats and can fit 5 people\""\n      end\n    end\n  end\n  puts mab.to_s\n\nMarkaby::Builder.new does take two arguments for passing in variables and\na helper object.  You can also affix the block right on to the class.\n\nSee Markaby::Builder for all of that.\n\n= A Note About <tt>instance_eval</tt>\n\nThe Markaby::Builder class is different from the normal Builder class,\nsince it uses <tt>instance_eval</tt> when running blocks.  This cleans\nup the appearance of the Markaby code you write.  If <tt>instance_eval</tt>\nwas not used, the code would look like this:\n\n  mab = Markaby::Builder.new\n  mab.html do\n    mab.head { mab.title \""Boats.com\"" }\n    mab.body do\n      mab.h1 \""Boats.com has great deals\""\n    end\n  end\n  puts mab.to_s\n\nSo, the advantage is the cleanliness of your code.  The disadvantage is that\nthe block will run inside the Markaby::Builder object's scope.  This means\nthat inside these blocks, <tt>self</tt> will be your Markaby::Builder object.\nWhen you use instance variables in these blocks, they will be instance variables\nof the Markaby::Builder object.\n\nThis doesn't affect Rails users, but when used in regular Ruby code, it can\nbe a bit disorienting.  You are recommended to put your Markaby code in a\nmodule where it won't mix with anything.\n\n= The Six Steps of Markaby\n\nIf you dive right into Markaby, it'll probably make good sense, but you're\nlikely to run into a few kinks.  Why not review these six steps and commit\nthem memory so you can really *know* what you're doing?\n\n== 1. Element Classes\n\nElement classes may be added by hooking methods onto container elements:\n\n  div.entry do\n    h2.entryTitle 'Son of WebPage'\n    div.entrySection %{by Anthony}\n    div.entryContent 'Okay, once again, the idea here is ...'\n  end\n\nWhich results in:\n\n  <div class=\""entry\"">\n    <h2 class=\""entryTitle\"">Son of WebPage</h2>\n    <div class=\""entrySection\"">by Anthony</div>\n    <div class=\""entryContent\"">Okay, once again, the idea here is ...</div>\n  </div>\n\n== 2. Element IDs\n\nIDs may be added by the use of bang methods:\n\n  div.page! {\n    div.content! {\n      h1 \""A Short Short Saintly Dog\""\n    }\n  }\n\nWhich results in:\n\n  <div id=\""page\"">\n    <div id=\""content\"">\n      <h1>A Short Short Saintly Dog</h1>\n    </div>\n  </div>\n\n== 3. Validate Your XHTML 1.0 Output \n\nIf you'd like Markaby to help you assemble valid XHTML documents,\nyou can use the <tt>xhtml_transitional</tt> or <tt>xhtml_strict</tt>\nmethods in place of the normal <tt>html</tt> tag.\n\n  xhtml_strict do\n    head { ... }\n    body { ... }\n  end\n\nThis will add the XML instruction and the doctype tag to your document.\nAlso, a character set meta tag will be placed inside your <tt>head</tt>\ntag.\n\nNow, since Markaby knows which doctype you're using, it checks a big\nlist of valid tags and attributes before printing anything.\n\n  >> div :styl => \""padding: 10px\"" do\n  >>   img :src => \""samorost.jpg\""\n  >> end\n  InvalidHtmlError: no such attribute `styl'\n\nMarkaby will also make sure you don't use the same element ID twice!\n\n== 4. Escape or No Escape?\n\nMarkaby uses a simple convention for escaping stuff: if a string\nis an argument, it gets escaped.  If the string is in a block, it\ndoesn't.\n\nThis is handy if you're using something like RedCloth or\nRDoc inside an element.  Pass the string back through the block\nand it'll skip out of escaping.\n\n  div.comment { RedCloth.new(str).to_html }\n\nBut, if we have some raw text that needs escaping, pass it in\nas an argument:\n\n  div.comment raw_str\n\nOne caveat: if you have other tags inside a block, the string\npassed back will be ignored.\n\n  div.comment {\n    div.author \""_why\""\n    div.says \""Torpedoooooes!\""\n    \""<div>Silence.</div>\""\n  }\n\nThe final div above won't appear in the output.  You can't mix\ntag modes like that, friend.\n\n== 5. Auto-stringification\n\nIf you end up using any of your Markaby \""tags\"" as a string, the\ntag won't be output.  It'll be up to you to add the new string\nback into the HTML output.\n\nThis means if you call <tt>to_s</tt>, you'll get a string back.\n\n  div.title { \""Rock Bottom\"" + span(\"" by Robert Wyatt\"").to_s }\n\nBut, when you're adding strings in Ruby, <tt>to_s</tt> happens automatically.\n\n  div.title { \""Rock Bottom\"" + span(\"" by Robert Wyatt\"") }\n\nInterpolation works fine.\n\n  div.title { \""Rock Bottom #{span(\"" by Robert Wyatt\"")}\"" }\n\nAnd any other operation you might perform on a string.\n\n  div.menu! \\\n    ['5.gets', 'bits', 'cult', 'inspect', '-h'].map do |category|\n      link_to category\n    end.\n    join( \"" | \"" )\n\n== 6. The <tt>tag!</tt> Method\n\nIf you need to force a tag at any time, call <tt>tag!</tt> with the\ntag name followed by the possible arguments and block.  The CssProxy\nwon't work with this technique.\n\n  tag! :select, :id => \""country_list\"" do\n    countries.each do |country|\n      tag! :option, country\n    end\n  end\n\n= A Note About Rails Helpers\n\nWhen used in Rails templates, the Rails helper object is passed into \nMarkaby::Builder.  When you call helper methods inside Markaby, the output\nfrom those methods will be output to the stream.  This is incredibly\nhandy, since most Rails helpers output HTML tags.\n\n  head do\n    javascript_include_tag 'prototype'\n    autodiscovery_link_tag\n  end\n\nHowever, some methods are designed to give back a String which you can use\nelsewhere.  That's okay!  Every method returns a Fragment object, which can\nbe used as a string.\n\n  p { \""Total is: #{number_to_human_size @file_bytes}\"" }\n\nAlso see the Quick Tour above, specifically the stuff about auto-stringification.\n\nIf for any reason you have trouble with fragments, you can just\ncall the <tt>@helpers</tt> object with the method and you'll get\nthe String back and nothing will be output.\n\n  p { \""Total is: #{@helpers.number_to_human_size @file_bytes}\"" }\n\nConversely, you may call instance variables from your controller by using\na method and its value will be returned, nothing will be output.\n\n  # Inside imaginary ProductController\n  def list\n    @products = Product.find :all\n  end\n\n  # Inside app/views/product/list.mab\n  products.each do |product|\n    p product.title\n  end\n\n= Credits\n\nMarkaby is a work of immense hope by Tim Fletcher and why the lucky stiff.\nThankyou for giving it a whirl.\n\nMarkaby is inspired by the HTML library within cgi.rb.  Hopefully it will\nturn around and take some cues.\n\n"""
https://github.com/mojombo/yaws,"""\nThis is yaws, a webserver for dynamic content written in Erlang.\n\n\nTo build and install\n\n\n1. Get and install an erlang system (http://www.erlang.org)\n\n2. ./configure --prefix=/usr/local\n   This will install everything under /usr/local including var files\n   in /usr/local/var/run/yaws and etc files in\n   /usr/local/etc/yaws.*\n\n  A plain ./configure will install executables under \n  /usr/local/bin and libs in /usr/local/lib/yaws etc and\n  var files will end up under /usr/local/etc and /usr/local/var\n\n\nNote: We can also change the target directory for etc and var \n      directories by using:\n\n  --localstatedir=DIR for files that should go in /var\n  --sysconfdir=DIR for files that should go in /etc\n  --disable-pam  If we for some reason do not want pam support\n  --with-extrainclude=DIR Will add DIR to the include path\n                      May be useful if e.g. pam is installed\n\t\t      somewhere where its usually not found\n  --with-defaultcharset=String  Will set the default charset used\n                        in generated page headers. Usually never needed.\n                        \nThis way you can precisely control where you install Yaws (This is\nusefull for computers where you do not have right access to the \nstandard systemdirs). \n\nFor example:\n./configure --prefix=/home/install/yaws --localstatedir=/home/install/yaws/var --sysconfdir=/home/install/etc\n\n\n2b. Note to packagers (rpm, deb ...) All install targets support the \n    DESTDIR variable.\n    Thus, if we do ./configure --prefix=/usr; make\n    we can subsequently do:\n    DESTDIR=/foo/bar make install\n    All yaws files will be installed under DESTDIR, but all \n    code will assume yaws should be installed under /usr\n\n\n3. make\n     This will build the system\n\n  make docs \n     (Optionnal) You can issue this command if you want to build Yaws\n     documentation.\n\n  make local_install\n     and perform something we call a\n     local install. It will create an executable script in the $HOMe/bin \n     directory and a config file in $HOME/yaws.conf. This is for developers\n     only\n\n4.   To test the build, Start as bin/yaws -i \n     This will start a webserver at http://0.0.0.0:8000\n     Terminate through ^C or > init:stop()\n\n5. as root make install\n\n6. as root Start as /usr/local/bin/yaws -i \n   (this starts an interactive system)\n\n7. This will create a webserver at http://${host} and one at https://${host}\n\n8. as root Edit /etc/yaws.conf \n\n9. Create content in /var/yaws\n\n10a. Start as /usr/local/bin/yaws --daemon --heart\n     This will start a daemon (--daemon) which will be autorestarted when/if\n     it crashes or hangs (--heart)\n\n10b. Or start interactive system as /usr/local/bin/yaws -i\n\n"""
https://github.com/defunkt/subtlety,null
https://github.com/anotherjesse/fotomatic,null
https://github.com/technoweenie/restful-authentication,null
https://github.com/defunkt/zippy,"""Zippy!\n------\n\nhttp://github.com/defunkt/zippy\n\nBy Chris \""Zippy\"" Wanstrath\n"""
https://github.com/mojombo/glowstick,"""glowstick\n    by FIX (your name)\n    FIX (url)\n\n== DESCRIPTION:\n  \nFIX (describe your package)\n\n== FEATURES/PROBLEMS:\n  \n* FIX (list of features or problems)\n\n== SYNOPSIS:\n\n  FIX (code sample of usage)\n\n== REQUIREMENTS:\n\n* FIX (list of requirements)\n\n== INSTALL:\n\n* FIX (sudo gem install, anything else)\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) 2008 FIX\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"""
https://github.com/defunkt/cache_fu,"""== cache_fu\n\nA rewrite of acts_as_cached.\n\n== Changes from acts_as_cached 1\n\n- You can no longer set a 'ttl' method on a class.  Instead,\n  pass :ttl to acts_as_cached:\n    >> acts_as_cached :ttl => 15.minutes\n\n- The is_cached? method is aliased as cached?\n\n- set_cache on an instance can take a ttl\n    >> @story.set_cache(15.days)\n\n\nChris Wanstrath [ chris[at]ozmm[dot]org ]\n"""
https://github.com/sr/tasks,null
https://github.com/abhay/calais,null
https://github.com/sr/git-wiki,null
https://github.com/jnicklas/rorem,"""Rorem\n=====\n\nRorem is a random data generator that automatically fill Ruby classes with Random data, here's how:\n\n\n  class Car\n  \n    include Rorem::Model\n  \n    attr_accessor :brand, :seats, :owner_name, :owner_age, :special_car\n    \n  end\n  \n  Car.factory do |car|\n  \n    # all brands are equality likely\n    car.brand = random(%w(BMW Mercedes Volvo Jaguar))\n    \n    # assign probabilities to each value\n    car.seats = random([2, 4], :distribution => [0.2, 0.8])\n    \n    # use a normal distribution to describe probabilities\n    car.owner_age = random(18..70, :distribution => normal(40, 15))\n    \n    # generate a name from rorem's database of names\n    car.owner_name = random(:name\n    \n    # a deterministic value can be set\n    car.special_car false\n  \n  end\n  \n  c = Car.new\n  \n  c.fill\n  \n  c.brand #=> 'BMW'\n  c.seats #=> 4\n  c.owner_age #=> 27\n  c.owner_name #=> 'Allan Hernandez'\n  c.special_car #=> false\n  \nanother (more complex) example\n\n  class Employee\n  \n    include Rorem::Model\n    \n    attr_accessor :first_name, :last_name, :email, :employee_nr, :empolyee_id, :address, :city, :country\n  \n  end\n  \n  Employee.factory do\n  \n    c.employee_nr = sequence(:employee_nr, :start => 1)\n  \n    person = random(:person, :unique => true)\n    location = random(:location)\n  \n    c.first_name = person.first_name\n    c.last_name = person.last_name\n    c.email = person.email\n    c.address = location.address\n    c.city = location.city\n    c.country = location.country\n    \n    c.employee_id = c.first_name[1..3] + c.last_name[1..4] + c.employee_nr.to_s\n    \n  \n  \n  end\n\n"""
https://github.com/queso/signal-wiki,"""=====  Signal Wiki\n\nSignal Wiki is an easy to use wiki that was built with standards in mind.  It uses some of the more common rails plugins and practises to make sure it is easy to integrate this wiki into your suite of site offerings.  We wanted something we could tie into a shared user table so multiple apps (beast was the app at the time) could have the same login, so we used restful auth.  We had several clients asking for this, so we decided it must be a big need.  With our clients agreement, we extracted the basic wiki parts and cleaned it up and the result is this code.  \n\nEnjoy :)\n\n=====  Installation instructions\n\n#FIXME: Detail these instructions more\n1. Download app\n2. Copy config/database.yml.example to config/database.yml\n3. Run \""rake db:migrate\"" from the root of the app\n4. Start your rails app (using mongrel or fcgi, or whatever crazy method you use)\n5. Input your wiki stuffs\n\n=====  Required Gems\n\n* json\n* ruby-openid\n* ruby-yadis\n* RedCloth\n\n\n"""
https://github.com/wayneeseguin/rnginx,null
https://github.com/wayneeseguin/merblogger,null
https://github.com/drnic/ruby-on-rails-tmbundle,"""# TextMate Bundle for Ruby on Rails Development\n\nTo install with Git:\n\n    mkdir -p ~/Library/Application\\ Support/TextMate/Bundles\n    cd ~/Library/Application\\ Support/TextMate/Bundles\n    git clone git://github.com/drnic/ruby-on-rails-tmbundle.git \""Ruby on Rails.tmbundle\""\n    osascript -e 'tell app \""TextMate\"" to reload bundles'\n\n\nTo install without Git:\n\n    mkdir -p ~/Library/Application\\ Support/TextMate/Bundles\n    cd ~/Library/Application\\ Support/TextMate/Bundles\n    wget http://github.com/drnic/ruby-on-rails-tmbundle/tarball/master\n    tar zxf drnic-ruby-on-rails-tmbundle*.tar.gz\n    rm drnic-ruby-on-rails-tmbundle*.tar.gz\n    mv drnic-ruby-on-rails-tmbundle* \""Ruby on Rails.tmbundle\""\n    osascript -e 'tell app \""TextMate\"" to reload bundles'\n\nRuby 1.8.7 or greater is required."""
https://github.com/cristibalan/braid,"""# Braid\n\n[![Build Status](https://secure.travis-ci.org/cristibalan/braid.png?branch=master)](http://travis-ci.org/cristibalan/braid)\n[![Gem](https://img.shields.io/gem/v/braid.svg?maxAge=2592000)](https://rubygems.org/gems/braid)\n\nBraid is a simple tool to help track vendor branches in a\n[Git](http://git-scm.com/) repository.\n\n## Motivation\n\nVendoring allows you take the source code of an external library and ensure it's\nversion controlled along with the main project. This is in contrast to including\na reference to a packaged version of an external library that is available in a\nbinary artifact repository such as Maven Central, RubyGems or NPM.\n\nVendoring is useful when you need to patch or customize the external libraries\nor the external library is expected to co-evolve with the main project. The\ndeveloper can make changes to the main project and patch the library in a single\ncommit.\n\nThe problem arises when the external library makes changes that you want to\nintegrate into your local vendored version or the developer makes changes to the\nlocal version that they want integrated into the external library.\n\nA typical \""implementation\"" of vendoring is to simply download or checkout the\nsource for the external library, remove the `.git` or `.svn` directories and\ncommit it to the main source tree. However this approach makes it very difficult\nto update the library. When you want to update the library do you re-apply your\nlocal changes onto a new copy of the vendored library or do you re-apply the\nchanges from the external library to local version? Both cases involve manual\ngeneration and application of patch files to source trees.\n\nThis is where Braid comes into play. Braid makes it easy to vendor in remote git\nrepositories and use an automated mechanism for updating the external library\nand generating patches to upgrade the external library.\n\nBraid creates a file `.braids.json` in the root of your repository that contains\nreferences to external libraries or mirrors. The configuration allows you to control\naspects of the mirroring process such as;\n\n* whether the mirror is locked to a particular version of the external library.\n* whether the mirror is tracking a tag or a branch.\n* whether the mirror includes the entire external library or just a subdirectory.\n\n## Installation\n\n    gem install braid\n\n## Quick usage - ruby project\n\nLet's assume we're writing the project `myproject` that needs grit in lib/grit. Initialize the repo (nothing braid related here):\n\n    git init myproject\n    cd myproject\n    touch README\n    git add README\n    git commit -m \""initial commit\""\n\nNow let's vendor grit:\n\n    braid add git://github.com/mojombo/grit.git lib/grit\n\nAnd you're done! Braid vendored grit into lib/grit. Feel free to inspect the changes with git log or git show.\n\nIf further down the line, you want to bring new changes from grit into your repository, just update the mirror:\n\n    braid update lib/grit\n\nIf you make changes to the grit library and want to generate a patch file so that you can submit the patch file\nto the grit project:\n\n    braid diff lib/grit > grit.patch\n\nAlternatively you can push changes back to the source directory directly using the following command. The command\nwill push the changes to the branch `myproject_customizations` that has been branched off the source branch (`master`\nin this example). Omit the `--branch` argument to push directly to the source branch.\n\n    braid push lib/grit --branch myproject_customizations\n\nOnce those changes have been applied to grit you probably want to update your local version of grit again.\n\n    braid update lib/grit\n\n## More usage\n\nUse the built in help system to find out about all commands and options:\n\n    braid help\n    braid help add # or braid add --help\n\n### Examples\n\n#### Adding a mirror\n\n    braid add git://github.com/rails/rails.git vendor/rails\n\n#### Adding a subdirectory from a mirror\n\nThis is useful if you want to add a subdirectory from a mirror into your own project.\n\n    braid add --path dist https://github.com/twbs/bootstrap.git vendor/assets/bootstrap\n\n#### Adding a mirror based on a branch\n\n    braid add --branch 5-0-stable https://github.com/rails/rails.git vendor/rails\n\n#### Adding a mirror based on a tag\n\n    braid add --tag v1.0 https://github.com/realityforge/backpack.git vendor/tools/backpack\n\n#### Adding mirror locked to a revision\n\n    braid add --revision bf1b1e0 git://github.com/rails/rails.git vendor/rails\n\n#### Updating mirrors\n\n    # Update a specific mirror\n    braid update vendor/plugins/cache_fu\n    # Update all mirrors\n    braid update\n\n#### Updating mirrors with conflicts\n\nIf a braid update creates a conflict, braid will stop execution and leave the partially committed\nfiles in your working copy, just like a normal git merge conflict would.\n\nYou will then have to resolve all conflicts and manually run `git commit`. The commit message is\nalready prepared.\n\nIf you want to cancel the braid update and the merge, you'll have to reset your working copy and\nindex with `git reset --hard`.\n\n#### Locking and unlocking mirrors\n\nLock to a particular version in the mirror.\n\n    braid update --revision 6c1c16b vendor/rails\n\nGo back to tracking a particular branch.\n\n    braid update --branch master vendor/rails\n\n#### Showing local changes made to mirrors\n\n    braid diff vendor/rails\n\n## Braid version compatibility\n\nSince Braid has been regularly changing the configuration format and adding new\nfeatures that some projects may choose to rely on, and somewhat less often\nmaking breaking changes in how the configuration is handled, problems can arise\nif different developers work on the same project using different versions of\nBraid.  Since version 1.1.0, Braid refuses to operate if it detects potentially\nproblematic version skew.  If this happens, Braid will tell you what you can do.\nIf you'd like an overview of what to expect, read on.\n\nRoughly speaking, the `.braids.json` configuration file contains a configuration\nversion number that corresponds to a range of compatible Braid minor versions\n(`x.y`). \""Patch\"" upgrades to Braid (i.e., `x.y.z` -> `x.y.(z+1)`) will never\n(intentionally!) have configuration compatibility implications and are always\nrecommended as they may fix critical bugs.\n\nIf you use a Braid version too old for your configuration file, Braid will\ndirect you to the [configuration version history page](config_versions.md) with\ninstructions to upgrade Braid.  If you use a Braid version too new, Braid will\ntell you how you can upgrade your configuration file or find a compatible older\nBraid version to use.  (As an exception, a newer version of Braid can run\nread-only commands on an older configuration file without upgrading it if there\nare no breaking changes.)  If you upgrade your configuration file, then other\ndevelopers on the project may need to upgrade Braid.  Braid does not support\ndowngrading a configuration file, though you can revert the commit that upgraded\nit if you haven't made any subsequent changes to the configuration.\n\nIf you work on multiple projects, you may need to install multiple versions of\nBraid and manually run the correct version for each project.  Fortunately, the\nRubyGems system makes this reasonably straightforward.\n\nAnother approach is to standardize the Braid version for a project by listing\nBraid in a `Gemfile` (either checking in `Gemfile.lock` or using a version\nconstraint in the `Gemfile`) and run the project's version of Braid via\n[Bundler](http://bundler.io/) with `bundle exec braid`.  Even non-Ruby projects\ncan do this if it's acceptable to have a `Gemfile` and `Gemfile.lock`.  Ruby\nprojects that don't want Braid to interact with their other gems can potentially\nput the `Gemfile` in a subdirectory and provide a wrapper script for `bundle`\nthat sets the `BUNDLE_GEMFILE` environment variable.  We do not yet have enough\nexperience with this approach to make a firm recommendation for or against it.\n\nThis is the best design we could find to prevent surprises and adequately\nsupport normal development processes while minimizing the additional maintenance\ncost of the version compatibility mechanism.  We want to have a scheme in place\nthat is robust enough to make it reasonable to encourage serious adoption of\nBraid, yet we don't want to spend extra work adding conveniences until there's\nevidence of sufficient demand for them.\n\n## Contributing\n\nWe appreciate any patches, error reports and usage ideas you may have. Please\nsubmit an issue or pull request on GitHub.\n\n### Subversion\n\nWhile preparing to release Braid v1.0 the support for subversion repositories was removed as\nthere was no active maintainers and inadequate test coverage. If there is anyone motivated to\nre-add and maintain the Subversion support, please contact the authors.\n\n# Authors\n\n* Cristi Balan\n* Norbert Crombach\n* Peter Donald\n\n## Contributors (alphabetically)\n\n* Alan Harper\n* Brad Durrow\n* Christoph Sturm\n* Dennis Muhlestein\n* Ferdinand Svehla\n* Matt McCutchen\n* Michael Klishin\n* Roman Heinrich\n* Travis Tilley\n* Tyler Rick\n"""
https://github.com/chneukirchen/rack-mirror,"""= Rack, a modular Ruby webserver interface\n\nRack provides a minimal, modular and adaptable interface for developing\nweb applications in Ruby.  By wrapping HTTP requests and responses in\nthe simplest way possible, it unifies and distills the API for web\nservers, web frameworks, and software in between (the so-called\nmiddleware) into a single method call.\n\nThe exact details of this are described in the Rack specification,\nwhich all Rack applications should conform to.\n\n== Supported web servers\n\nThe included *handlers* connect all kinds of web servers to Rack:\n* Mongrel\n* EventedMongrel\n* WEBrick\n* FCGI\n* CGI\n* SCGI\n* LiteSpeed\n\nThese web servers include Rack handlers in their distributions:\n* Ebb\n* Fuzed\n* Thin\n\nAny valid Rack app will run the same on all these handlers, without\nchanging anything.\n\n== Supported web frameworks\n\nThe included *adapters* connect Rack with existing Ruby web frameworks:\n* Camping\n\nThese frameworks include Rack adapters in their distributions:\n* Coset\n* Halcyon\n* Maveric\n* Merb\n* Racktools::SimpleApplication\n* Ramaze\n* Sinatra\n* Vintage\n\nRuby on Rails can be run with the adapter included with Thin, which\nwill be merged into a later Rack version.\n\nCurrent links to these projects can be found at\nhttp://ramaze.net/#other-frameworks\n\n== Available middleware\n\nBetween the server and the framework, Rack can be customized to your\napplications needs using middleware, for example:\n* Rack::URLMap, to route to multiple applications inside the same process.\n* Rack::CommonLogger, for creating Apache-style logfiles.\n* Rack::ShowException, for catching unhandled exceptions and\n  presenting them in a nice and helpful way with clickable backtrace.\n* Rack::File, for serving static files.\n* ...many others!\n\nAll these components use the same interface, which is described in\ndetail in the Rack specification.  You can choose to use them exactly\nin the way you want.\n\n== Convenience\n\nIf you want to develop outside of existing frameworks, implement your\nown ones, or develop middleware, Rack provides many helpers to create\nRack applications quickly and without doing the same web stuff all\nover:\n* Rack::Request, which also provides query string parsing and\n  multipart handling.\n* Rack::Response, for convenient generation of HTTP replies and\n  cookie handling.\n* Rack::MockRequest and Rack::MockResponse for efficient and quick\n  testing of Rack application without real HTTP round-trips.\n\n== rackup\n\nrackup is a useful tool for running Rack applications, which uses the\nRack::Builder DSL to configure middleware and build up applications\neasily.\n\nrackup automatically figures out the environment it is run in, and\nruns your application as FastCGI, CGI, or standalone with Mongrel or\nWEBrick---all from the same configuration.\n\n== Quick start\n\nTry the lobster!\n\nEither with the embedded WEBrick starter:\n\n    ruby -Ilib lib/rack/lobster.rb\n\nOr with rackup:\n\n    bin/rackup -Ilib example/lobster.ru \n\nBy default, the lobster is found at http://localhost:9292.\n\n== Installing with RubyGems\n\nA Gem of Rack is available.  You can install it with:\n\n    gem install rack\n\nI also provide a local mirror of the gems (and development snapshots)\nat my site:\n\n    gem install rack --source http://chneukirchen.org/releases/gems\n\n== Running the tests\n\nTesting Rack requires the test/spec testing framework:\n\n    gem install test-spec\n\nThe full set of tests also test FCGI access with lighttpd so you will\nneed lighttpd installed as well as the FCGI libraries and the fcgi gem\ninstalled:\n\nDownload and install lighttpd:\n\n    http://www.lighttpd.net/download\n\nInstalling the FCGI libraries:\n\n    curl -O http://www.fastcgi.com/dist/fcgi-2.4.0.tar.gz\n    tar xzvf fcgi-2.4.0.tar.gz\n    cd fcgi-2.4.0\n    ./configure --prefix=/usr/local\n    make\n    sudo make install\n    cd ..\n\nInstalling the Ruby fcgi gem:\n\n    gem install fcgi\n\nThere are two rake-based test tasks:\n\n    rake test       tests all the fast tests (no Handlers or Adapters)\n    rake fulltest   runs all the tests\n\n== History\n\n* March 3rd, 2007: First public release 0.1.\n\n* May 16th, 2007: Second public release 0.2.\n  * HTTP Basic authentication.\n  * Cookie Sessions.\n  * Static file handler.\n  * Improved Rack::Request.\n  * Improved Rack::Response.\n  * Added Rack::ShowStatus, for better default error messages.\n  * Bug fixes in the Camping adapter.\n  * Removed Rails adapter, was too alpha.\n\n* February 26th, 2008: Third public release 0.3.\n  * LiteSpeed handler, by Adrian Madrid.\n  * SCGI handler, by Jeremy Evans.\n  * Pool sessions, by blink.\n  * OpenID authentication, by blink.\n  * :Port and :File options for opening FastCGI sockets, by blink.\n  * Last-Modified HTTP header for Rack::File, by blink.\n  * Rack::Builder#use now accepts blocks, by Corey Jewett.\n    (See example/protectedlobster.ru)\n  * HTTP status 201 can contain a Content-Type and a body now.\n  * Many bugfixes, especially related to Cookie handling.\n\n* XXX, 2008: Fourth public release 0.4.\n  * New Memcache sessions, by blink.\n  * Rack::Reloader is not loaded in rackup development mode.\n  * Many bugfixes, especially for pool sessions and URLMap.\n\n== Contact\n\nPlease mail bugs, suggestions and patches to\n<mailto:chneukirchen@gmail.com>.\n\nDarcs repository (\""darcs send\"" is welcome for patches):\nhttp://chneukirchen.org/repos/rack\n\nYou are also welcome to join the #rack channel on irc.freenode.net.\n\n== Thanks to\n\n* blink for the Pool sessions, OpenID support, many tweaks, patches\n  and bugreports.\n* Michael Fellinger, for the helpful discussion, bugfixes and a better\n  Rack::Request interface.\n* Adrian Madrid, for the LiteSpeed handler.\n* Christoffer Sawicki, for the Rails adapter.\n* Tim Fletcher, for the HTTP authentication code.\n* Luc Heinrich for the Cookie sessions, the static file handler and bugfixes.\n* Armin Ronacher, for the logo and racktools.\n* Aredridel, for bug fixing.\n* Stephen Bannasch, for bug reports and documentation.\n* Gary Wright, for proposing a better Rack::Response interface.\n* Jonathan Buch, for improvements regarding Rack::Response.\n* Armin R\u00f6hrl, for tracking down bugs in the Cookie generator.\n* Alexander Kellett for testing the Gem and reviewing the announce.\n* Marcus R\u00fcckert, for help with configuring and debugging lighttpd.\n* The WSGI team for the well-done and documented work they've done and\n  Rack builds up on.\n\n== Copyright\n\nCopyright (C) 2007, 2008 Christian Neukirchen <http://purl.org/net/chneukirchen>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \""Software\""), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \""AS IS\"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\nTHE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER \nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n== Links\n\nRack:: <http://rack.rubyforge.org/>\nRack's Rubyforge project:: <http://rubyforge.org/projects/rack>\n\nCamping:: <http://camping.rubyforge.org/>\nRamaze:: <http://ramaze.rubyforge.org/>\nMaveric:: <http://maveric.rubyforge.org/>\nracktools:: <http://lucumr.pocoo.org/trac/repos/racktools/>\n\nChristian Neukirchen:: <http://chneukirchen.org/>\n\n"""
https://github.com/jnicklas/uploadcolumn,"""= UploadColumn\n\nUploadColumn is a plugin for the Ruby on Rails framework that enables easy uploading of files, especially images.\n\nSuppose you have a list of users, and you would like to associate a picture to each of them. You could upload the image to a database, or you could use upload_column for simple storage to the file system.\n\nAssuming you have a User model with a column called 'picture' that is of type String, you could simply add the upload_column instruction to your User model:\n\n    class User < ActiveRecord::Base\n      upload_column :picture\n    end\n\nThat's it! You can start uploading files. Of course, +upload_column+ has a lot of different options you can use to customize your uploads.\n\nUploading files is no fun without a user interface, so get going and make one:\n\nadd an upload_column_field to your form, maybe like this:\n\n    <p><label for=\""user_picture\"">Picture</label><br/>\n    <%= upload_column_field 'user', 'picture'  %></p>\n\nYou should use upload_column_field instead of Rails' file_field, since it will work even when the form is redisplayed, like when a validation fails. Unfortunately file_field doesn't work in that case.\n\nNow that's excellent, but most likely it will fail, because instead of sending the file, it just sends a string. No worries though, if we just set the form's encoding to multipart it will all work out, UploadColumn even comes with some nice helpers to avoid that nasty multipart syntax. This could look something like this:\n\n    <%= upload_form_tag( :action => 'create' ) %>\n\nAnd that's it! Your uploads are up and running (hopefully) and you should now be able to add pictures to your users. The madness doesn't stop there of course!\n\n== Storage Path\n\nYou won't always want to store the pictures in the directory that upload_column selects for you, but that's not a problem, because changing that directory is trivial. You can pass a <tt>:store_dir</tt> key to the upload_column declaration, this will override the default mechanism and always use that directory as the basis.\n\n    upload_column :picture, :store_dir => \""pictures\""\n    \nmight be sensible in our case. Note that this way, all files will be stored in the same directory.\n\nIf you need more refined control over the storage path (maybe you need to store it by the id of an association?) then you can use a proc instead. Our proc might look like this:\n\n    upload_column :picture, :store_dir => proc{|record, file| \""images/#{record.category.name}/#{record.id}/#{file.extension}\""}\n\nThe proc will be passed two parameters, the first is the current instance of your model class, the second is the name of the attribute that is being uploaded to (in our case +attr+ would be <tt>:picture</tt>).\n\nYou can change the <tt>:tmp_dir</tt> in the same way.\n\n== Filename\n\nBy default, UploadColumn will keep the name of the original file, however this might be inconvenient in some cases. You can pass a :filename directive to your upload_column declaration:\n\n    upload_column :picture, :filename => \""donkey.png\""\n    \nIn which case all files will be named +donkey.png+. This is not desirable if the file in question is a jpeg file of course. Usually it is more sensible to pass a Proc to :filename.\n\n    upload_column :picture, :filename => proc{|record, file| \""avatar#{record.id}.#{file.extension}\""}\n    \nThe Proc will be passed two parameters, the current instance, and the file itself.\n\n== Manipulators\n\nUploadColumn allows you to use manipulators on your file, that in some way transform your file, or perform any kind\nof operations on it. There are currently two manipulators bundled, the RMagick manipulator and the ImageScience\nmanipulator, but writing your own is very easy. There are further instructions on the website.\n\n== Manipulating Images with RMagick\n\nSay you would want (for whatever reason) to have a funky solarize effect on your users' images. Manipulating images with upload_column can be done either at runtime or after the image is saved, let's look at some possibilities:\n\n    class User < ActiveRecord::Base\n      upload_column :picture, :manipulator => UploadColumn::Manipulators::RMagick\n      \n      def picture_after_assign\n        \n        picture.process! do |img|\n          img.solarize\n        end\n        \n      end\n    end\n\nYou can also use the :process instruction, which will automatically apply the manipulation when a new image is uploaded. If you wanted to resize your image to a maximum of 800 by 600 pixels for example, you could do:\n\n    class User < ActiveRecord::Base\n      upload_column :picture, :process => '800x600', :manipulator => UploadColumn::Manipulators::RMagick\n    end\n    \nthe previous example with solarize could be written shorter as:\n\n    class User < ActiveRecord::Base\n      upload_column :picture, :process => proc{|img| img.solarize }, :manipulator => UploadColumn::Manipulators::RMagick\n    end\n\nOr maybe we want different versions of our image, then we could simply specify:\n \n    class User < ActiveRecord::Base\n      upload_column :picture, :versions => [ :solarized, :sepiatoned ], :manipulator => UploadColumn::Manipulators::RMagick\n      \n      def picture_after_assign\n        picture.solarized.process! do |img|\n          img.solarize\n        end\n        picture.sepiatoned.process! do |img|\n          img.sepiatone\n        end\n      end\n    end\n    \nyou can also use a Hash for versions and pass a dimension or a proc to it, so you can do:\n\n    class User < ActiveRecord::Base\n      upload_column :picture, :versions => { :thumb => \""c100x100\"", :large => \""200x300\"", :sepiatoned => proc{ |img| img.sepiatone } }, :manipulator => UploadColumn::Manipulators::RMagick\n    end\n    \nNote the 'c' in front of the dimensions for the thumb image, this will crop the image to the exact dimensions. All of this is a bit wordy though, and it also doesn't take check, that the files really are images. Sepiatoning the latest GreenDay song somehow doesn't sound too good. For that reason UploadColumn comes with the image_column function:\n\n    class User < ActiveRecord::Base\n      image_column :picture, :versions => { :thumb => \""c100x100\"", :large => \""200x300\"", :sepiatoned => proc{ |img| img.sepiatone } }\n    end\n\nThis also puts your images in public/images instead of public, which is neat!\n\n== Runtime rendering\n\nYou can manipulate images at runtime (it's a huge performance hit though!). In your controller add an action and use UploadColumnRenderHelper.render_image.\n\n    def sepiatone\n      @user = User.find(parms[:id])\n      render_image @user.picture do |img|\n        img.sepiatone\n      end\n    end\n    \nAnd that's it!\n\nIn your view, you can use UploadColumnHelper.image to easily create an image tag for your action:\n\n    <%= image :action => \""sepiatone\"", :id => 5 %>\n    \n== Views\n\nIf your uploaded file is an image you would most likely want to display it in your view, if it's another kind of file you'll want to link to it. Both of these are easy using UploadColumn::BaseUploadedFile.url.\n\n    <%= link_to \""Guitar Tablature\"", @song.tab.url %>\n    \n    <%= image_tag @user.picture.url %>\n\n== Magic Columns\n\nUploadColumn allows you to add 'magic' columns to your model, which will be automatically filled with the appropriate data. Just add the column, for example via migrations:\n\n    add_column :users, :picture_content_type\n\nAnd if our model looks like this:\n\n    class User < ActiveRecord::Base\n      upload_column :picture\n    end\n\nThe column <tt>picture_content_type</tt> will now automatically be filled with the file's content-type (or at least with UploadColumn's best guess ;).\n\nYou can use any method method on UploadColumn::UploadedFile that takes no argument, so you can use for example, size, url, store_dir and so on.\n\nYou can also do <tt>picture_exif_date_time</tt> or <tt>picture_exif_model</tt>, etc. This works only, of course, if the uploaded file is a JPEG image, since that is the only filetype that has exif data. This requires the EXIFR library, which you can get by installing the gem via <tt>gem install exifr</tt>.\n      \n== Validations\n\nUploadColumn comes with its own validation method, validates_integrity_of. This method will ensure that only files with an extension from a whitelist will be uploaded. This prevents a hacker from uploading executable files (such as .rb, .pl or .cgi for example) or it can be used to restrict what kind of file are allowed to be uploaded, for example only images. You can customize the whitelist with the :extensions parameter to upload column.\n\nIf you want to only allow the upload of XHTML and XML files, so you can manipulate them with XSLT you could do:\n\n    upload_column :xml, :extensions => %w(xml html htm), :manipulator => MyXSLTProcessor\n\n\tvalidate_integrity_of :xml\n\nYou can also use some of Rails' validations with UploadColumn.\n\nvalidates_presence_of and validates_size_of have been verified to work. \n\n    validates_size_of :image, :maximum => 200000, :message => \""is too big, must be smaller than 200kB!\""\n\nRemember to change the error message, the default one sounds a bit stupid with UploadColumn.\n\nvalidates_uniqueness_of does NOT work, this is because validates_uniqueness_of will send(:your_upload_column) instead of asking for the instance variable, thus it will get an UploadedFile object, which it can't really compare to other values in the database, this is rather difficult to work around without messing with Rails internals (if you manage, please let me know!). Meanwhile you could do\n\n    validates_each :your_upload_column do |record, attr, value|    \n      record.errors.add attr, 'already exists!' if YourModel.find( :first, :conditions => [\""#{attr.to_s} = ?\"", value ] )\n    end\n\nIt's not elegant I know, but it should work.\n"""
https://github.com/simonjefford/ruby-on-rails-tmbundle,"""TextMate bundle for Ruby on Rails development\n\nGET IT NOW: with Rails 2.0 support.\n\nRails 2.0 (copied from CHANGELOG)\n\n* Snippets/Commands for:\n  * Tests\n    * assert_select (ass)\n    * assert_difference/assert_no_difference (asd/asnd)\n    * GET+POST test method stubs (defg+defp)\n  * Controllers\n    * respond_to (rst)\n    * REMOVED: render_component snippets\n    * loggers - pass a block instead of raw string to save time if logging not used (e.g. production) [thx Stephen Touset]\n    * redirect_to for resource paths (rep, repp, renp, renpp)\n    * render :update (ru) [thx Simon Jefford]\n  * Views\n    * form_for (ff)\n    * link_to for resource paths (lip, lipp, linp, linpp)\n    * <% end -%> (end)\n  * Models\n    * has_many :though (hmt)\n    * association snippets give better defaults (e.g. bt + hm)\n    * validates_format_of (vf,vfif) [thx Dean Strelau]\n  * Migrations\n    * Sexy Migrations now available as \""t.\"" snippets [thx Lawrence Pit]\n    * Migration classes have own textmate scope\n    * Add/Remove Columns - the 'down' statements are in reverse order [thx Lawrence Pit, Daniel Kristensen]\n* Language/Syntax\n  * New keywords: rescue_from\n  * Added rb as a valid Rails file type [thx James Deville]\n* Commands\n  * html.erb is the default for new templates (backwards compatibility is being worked on too)\n* Plugins\n  * Footnote\n    * footnote-edge uses .erb for templates [thx Stephen Bannasch]\n\n"""
https://github.com/defunkt/starling,null
https://github.com/brosner/django-mptt,"""===========\nDjango MPTT\n===========\n\nUtilities for implementing Modified Preorder Tree Traversal with your\nDjango Models and working with trees of Model instances.\n\nFor installation instructions, see the file \""INSTALL\"" in this\ndirectory; for instructions on how to use this application, and on what\nit provides, see the file \""overview.txt\"" in the \""docs/\"" directory.\n"""
https://github.com/chneukirchen/gitsum,"""= gitsum.el --- basic darcsum feelalike for Git\n\nCopyright (C) 2008  Christian Neukirchen <purl.org/net/chneukirchen>\nLicensed under the same terms as Emacs.\n\nGitsum provides a mode to do interactive partial commits with Emacs.\nRun `M-x gitsum' inside a Git repository and kill everything you don't\nwant to commit with `k'.  You can navigate easily between hunks with\n`n' and `p' and between files with `N' and `P'.  A whole file can be\nkilled with `K'.  If you want to refine the patch, you can split it\nwith `C-c C-s'.  If you toggle read-only with `C-x C-q', you can edit\neverything freely (be careful!).\n\nIf you are ready, commit the patch with `C-c C-c' or just `c'.\nEnter the message and press `C-c C-c' again.\n\nN.B: If you want to add files in the commit, use `M-x git-status' from\ngit.el, add the files with `a', then switch to gitsum with `s'.  You\ncan only add files as a whole.  You need git.el from the git\nrepository then.\n\n\nRepository: http://github.com/chneukirchen/gitsum\n             git://github.com/chneukirchen/gitsum.git\nPatches to: chneukirchen@gmail.com\n"""
https://github.com/defunkt/ambitious_activeldap,null
https://github.com/wayneeseguin/sequel-model,"""== Sequel: Concise ORM for Ruby\n\nSequel is an ORM framework for Ruby. Sequel provides thread safety, connection pooling, and a concise DSL for constructing queries and table schemas.\n\nSequel makes it easy to deal with multiple records without having to break your teeth on SQL.\n\n== Resources\n\n* {Project page}[http://code.google.com/p/ruby-sequel/]\n* {Source code}[http://ruby-sequel.googlecode.com/svn/]\n* {Bug tracking}[http://code.google.com/p/ruby-sequel/issues/list]\n* {Google group}[http://groups.google.com/group/sequel-talk]\n* {RubyForge page}[http://rubyforge.org/projects/sequel/]\n\nTo check out the source code:\n  \n  svn co http://ruby-sequel.googlecode.com/svn/trunk\n  \n=== Contact\n\nIf you have any comments or suggestions please send an email to ciconia at gmail.com and I'll get back to you.\n\n== Installation\n\n  sudo gem install sequel\n  \n== Supported Databases\n\nSequel currently supports:\n\n* ADO (on Windows)\n* DBI\n* Informix\n* MySQL\n* ODBC\n* Oracle\n* PostgreSQL\n* SQLite 3\n\nThere are also experimental adapters for DB2, OpenBase and JDBC (on JRuby).\n\n== The Sequel Console\n\nSequel includes an IRB console for quick'n'dirty access to databases. You can use it like this:\n\n  sequel sqlite:///test.db\n\nYou get an IRB session with the database object stored in DB.\n\n== An Introduction\n\nSequel was designed to take the hassle away from connecting to databases and manipulating them. Sequel deals with all the boring stuff like maintaining connections, formatting SQL correctly and fetching records so you can concentrate on your application.\n\nSequel uses the concept of datasets to retrieve data. A Dataset object encapsulates an SQL query and supports chainability, letting you fetch data using a convenient Ruby DSL that is both concise and infinitely flexible.\n\nFor example, the following one-liner returns the average GDP for the five biggest countries in the middle east region:\n\n  DB[:countries].filter(:region => 'Middle East').reverse_order(:area).limit(5).avg(:GDP)\n  \nWhich is equivalent to:\n\n  SELECT avg(GDP) FROM countries WHERE region = 'Middle East' ORDER BY area DESC LIMIT 5\n\nSince datasets retrieve records only when needed, they can be stored and later reused. Records are fetched as hashes (they can also be fetched as custom model objects), and are accessed using an Enumerable interface:\n\n  middle_east = DB[:countries].filter(:region => 'Middle East')\n  middle_east.order(:name).each {|r| puts r[:name]}\n  \nSequel also offers convenience methods for extracting data from Datasets, such as an extended map method:\n\n  middle_east.map(:name) #=> ['Egypt', 'Greece', 'Israel', ...]\n  \nOr getting results as a transposed hash, with one column as key and another as value:\n\n  middle_east.to_hash(:name, :area) #=> {'Israel' => 20000, 'Greece' => 120000, ...}\n\nMuch of Sequel is still undocumented (especially the part relating to model classes). The following section provides examples of common usage. Feel free to explore...\n\n== Getting Started\n\n=== Connecting to a database\n\nTo connect to a database you simply provide Sequel with a URL:\n\n  require 'sequel'\n  DB = Sequel.open 'sqlite:///blog.db'\n  \nThe connection URL can also include such stuff as the user name and password:\n\n  DB = Sequel.open 'postgres://cico:12345@localhost:5432/mydb'\n\nYou can also specify optional parameters, such as the connection pool size, or a logger for logging SQL queries:\n\n  DB = Sequel.open(\""postgres://postgres:postgres@localhost/my_db\"",\n    :max_connections => 10, :logger => Logger.new('log/db.log'))\n\n=== Arbitrary SQL queries\n\n  DB.execute(\""create table t (a text, b text)\"")\n  DB.execute(\""insert into t values ('a', 'b')\"")\n\nOr more succinctly:\n\n  DB << \""create table t (a text, b text)\""\n  DB << \""insert into t values ('a', 'b')\""\n\n=== Getting Dataset Instances\n\nDataset is the primary means through which records are retrieved and manipulated. You can create an blank dataset by using the dataset method:\n\n  dataset = DB.dataset\n\nOr by using the from methods:\n\n  posts = DB.from(:posts)\n\nYou can also use the equivalent shorthand:\n\n  posts = DB[:posts]\n\nNote: the dataset will only fetch records when you explicitly ask for them, as will be shown below. Datasets can be manipulated to filter through records, change record order and even join tables, as will also be shown below.\n\n=== Retrieving Records\n\nYou can retrieve records by using the all method:\n\n  posts.all\n\nThe all method returns an array of hashes, where each hash corresponds to a record.\n\nYou can also iterate through records one at a time:\n\n  posts.each {|row| p row}\n\nOr perform more advanced stuff:\n\n  posts.map(:id)\n  posts.inject({}) {|h, r| h[r[:id]] = r[:name]}\n  \nYou can also retrieve the first record in a dataset:\n\n  posts.first\n  \nOr retrieve a single record with a specific value:\n\n  posts[:id => 1]\n  \nIf the dataset is ordered, you can also ask for the last record:\n\n  posts.order(:stamp).last\n  \n=== Filtering Records\n\nThe simplest way to filter records is to provide a hash of values to match:\n\n  my_posts = posts.filter(:category => 'ruby', :author => 'david')\n  \nYou can also specify ranges:\n\n  my_posts = posts.filter(:stamp => (2.weeks.ago)..(1.week.ago))\n  \nOr lists of values:\n\n  my_posts = posts.filter(:category => ['ruby', 'postgres', 'linux'])\n  \nSequel now also accepts expressions as closures, AKA block filters:\n\n  my_posts = posts.filter {:category == ['ruby', 'postgres', 'linux']}\n  \nWhich also lets you do stuff like:\n\n  my_posts = posts.filter {:stamp > 1.month.ago}\n  \nSome adapters (like postgresql) will also let you specify Regexps:\n\n  my_posts = posts.filter(:category => /ruby/i)\n  \nYou can also use an inverse filter:\n\n  my_posts = posts.exclude(:category => /ruby/i)\n\nYou can then retrieve the records by using any of the retrieval methods:\n\n  my_posts.each {|row| p row}\n  \nYou can also specify a custom WHERE clause:\n\n  posts.filter('(stamp < ?) AND (author <> ?)', 3.days.ago, author_name)\n\nDatasets can also be used as subqueries:\n\n  DB[:items].filter('price > ?', DB[:items].select('AVG(price) + 100'))\n\n=== Summarizing Records\n\nCounting records is easy:\n  posts.filter(:category => /ruby/i).count\n\nAnd you can also query maximum/minimum values:\n  max_value = DB[:history].max(:value)\n  \nOr calculate a sum:\n  total = DB[:items].sum(:price)\n  \n=== Ordering Records\n\n  posts.order(:stamp)\n  \nYou can also specify descending order\n\n  posts.order(:stamp.DESC)\n\n=== Deleting Records\n\n  posts.filter('stamp < ?', 3.days.ago).delete\n  \n=== Inserting Records\n\n  posts.insert(:category => 'ruby', :author => 'david')\n  \nOr alternatively:\n\n  posts << {:category => 'ruby', :author => 'david'}\n  \n=== Updating Records\n\n  posts.filter('stamp < ?', 3.days.ago).update(:state => 'archived')\n\n=== Joining Tables\n\nJoining is very useful in a variety of scenarios, for example many-to-many relationships. With Sequel it's really easy:\n\n  order_items = DB[:items].join(:order_items, :item_id => :id).\n    filter(:order_items__order_id => 1234)\n  \nThis is equivalent to the SQL:\n\n  SELECT * FROM items LEFT OUTER JOIN order_items\n  ON order_items.item_id = items.id \n  WHERE order_items.order_id = 1234\n\nYou can then do anything you like with the dataset:\n\n  order_total = order_items.sum(:price)\n  \nWhich is equivalent to the SQL:\n\n  SELECT sum(price) FROM items LEFT OUTER JOIN order_items\n  ON order_items.item_id = items.id\n  WHERE order_items.order_id = 1234\n  \n"""
https://github.com/mattetti/ruby-on-rails-tmbundle,null
https://github.com/technomancy/bus-scheme,"""= Bus Scheme\n    by Phil Hagelberg (c) 2007 - 2008\n    http://bus-scheme.rubyforge.org\n\n== Description\n\nBus Scheme is a Scheme written in Ruby, but implemented on the bus!\nEvery programmer must implement Scheme as a rite of passage; this is\nmine. Note that at least half of the implementation of Bus Scheme must\nbe written while on a bus. Documentation, tests, and administrivia may\nbe accomplished elsewhere, but the majority of actual implementation\ncode is strictly bus-driven. Bus Scheme is primarily a toy; using it\nfor anything serious is (right now) ill-advised.\n\nBus Scheme aims for general Scheme usefulness optimized for learning\nand fun. It's loosely targeting R5RS, but varies in huge ways. (For\nthe purposes of this project we pretend that R6RS never happened.) See\nthe file R5RS.diff for ways in which Bus Scheme differs from the\nstandard, both things that are yet unimplemented and things that are\nintentionally different.\n\n== Usage\n\n$ bus # drop into the REPL\n\n$ bus -e \""(do some stuff)\""\n\n$ bus foo.scm # load a file\n\n== Tutorial\n\nSee http://technomancy.us/104 for a \""Getting Started\"" tutorial.\n\n== Contributing\n\nIf you're looking for stuff to do, try \""rake todo\""\n\nPatches are welcome especially if they were written while riding a\nbus. If your daily commute does not involve a bus but you want to\nsubmit a patch, we may be able to work something out regarding code\nwritten on trains, ferries, or perhaps even carpool lanes.\n\nJoin the mailing list to ask questions and discuss:\nhttp://rubyforge.org/mail/?group_id=5094\n\n== What makes Bus Scheme different?\n\nWell, for starters it's implemented on the bus. No other Scheme\nimplementation can claim this. Here are a few other things that set\nBus Scheme apart:\n\n=== Flexible calling syntax\n\nTaking a hint from Arc, Bus Scheme allows you to use the notation\n(mylist n) to access the nth place of the mylist list instead of (nth\nmylist n) or the (myhash key) notation to access the slot in myhash\ncorresponding to the value of key instead of (gethash myhash key). \nTODO: This notation is flexible, and other data types may have\ntheir own \""call behaviour\"" specified.\n\n=== Web functionality\n\nPlanned: Web and RESTful application development are part of the\npackage. Bus Scheme uses the Rack library to allow scheme programs to\nserve web applications. Representations of data can be easily\ntranslated between s-expressions, HTML, and JSON.\n\n=== Written in a high-level language\n\nBus Scheme is written in Ruby, which means anyone with experience in\nhigh-level dynamic languages (like, oh, I don't know... Scheme?)\nshould be right at home poking around at the implementation. Using\nRuby allows the implementation code to remain compact and concise. Bus\nScheme should run on Ruby 1.8, Ruby 1.9, Rubinius, and JRuby at\nleast. Bus Scheme also allows you to drop into Ruby when that's\nconvenient. TODO: allow real inline Ruby blocks instead of access via\na function call.\n\n=== Test-Driven\n\nBus Scheme is written in an entirely test-driven manner. As much as\npossible, it tries to keep its tests written in Scheme itself, so it\nincludes a fairly comprehensive testing suite and encourages programs\nto be written test-first.\n\n== Install\n\n* sudo gem install bus-scheme\n\nFor the source:\n\n* git clone git://github.com/technomancy/bus-scheme.git\n\n== Todo\n\nBus Scheme is currently missing pieces of functionality:\n\n=== Parser\n* multiline strings\n* regular expressions\n\n=== General\n* filter stacktrace\n* continuations\n* macros\n\nFailing tests for some of these are already included (commented out,\nmostly) in the relevant test files.\n\n=== Long Term (post 1.0)\n* web functions (defresource and friends)\n* (lambda (arg1 arg2 . args) body) for rest args\n* string interpolation\n* escape sequences in strings\n* Ruby blocks inline?\n* XML literals?\n* optimize tail call recursion\n* compile to Rubinius bytecode\n* custom call behaviour\n* parse non-decimal base numbers\n* parse rationals, scientific, complex, and polar complex numbers\n\n== Requirements\n\nBus Scheme should run on (at least) Ruby 1.8, Ruby 1.9, Rubinius,\nJRuby. Any support for Windows is entirely accidental.\n\n== Bonus Fact\n\nI haven't actually used a real Scheme yet. Everything I know about it\nI've gathered from reading The Little Schemer, watching the Structure\nand Interpretation of Computer Programs videos, and reading lots about\nCommon Lisp and Emacs Lisp. If there are huge gaping flaws in the\nimplementation, this is likely to be why.\n"""
https://github.com/kevinclark/god,"""god\n    by Tom Preston-Werner\n       Kevin Clark (kqueue/netlink support)\n       \n    http://god.rubyforge.org\n\n== DESCRIPTION:\n  \nGod is an easy to configure, easy to extend monitoring framework written \nin Ruby.\n\nKeeping your server processes and tasks running should be a simple part of \nyour deployment process. God aims to be the simplest, most powerful \nmonitoring application available.\n\n== DOCUMENTATION:\n\nSee online documentation at http://god.rubyforge.org\n\n== COMMUNITY:\n\nSign up for the god mailing list at http://groups.google.com/group/god-rb\n\n== INSTALL:\n\n  $ sudo gem install god\n  \n== CONTRIBUTE:\n\nLatest code is available at http://github.com/mojombo/god\n\nThe 'master' branch can be cloned with:\n\n  $ git clone git://github.com/mojombo/god.git\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) 2007 Tom Preston-Werner\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"""
https://github.com/hornbeck/blerb-core,"""= Welcome to Blerb!\n\n== Installation\n  * from your working directory, say ~/code/, clone the blerb repository:\n  * git clone git://github.com/hornbeck/blerb-core.git - anon checkout\n  * git clone git@github.com:hornbeck/blerb-core.git   - commit access\n  * cd blerb-core\n  * use script/install to update or install merb-* in the parent directory (e.g. ~/code/merb-core/):\n  * script/install_merb\n  * cp config/database.sample.yml config/database.yml\n  * fill in the correct database credentials\n  * cp config/settings.sample.yml config/settings.yml\n  * fill in the correct blog settings\n  * rake dm:auto_migrate\n  * to start a webserver, run the merb command:\n  * merb\n\nBlerb should now be running on port 4000, so open up your browser and visit localhost:4000!\n\n== Dependencies (versions tested)\n\n\nmerb-core         (0.9)\nmerb-more         (0.9.0)\nmerb-action-args  (0.9.0)\nmerb-assets       (0.9.0)\nmerb-mailer       (0.9.1)\nmerb-test         (0.9.0)\nmerb_datamapper   (0.9.0)\nmerb_helpers      (0.9.0)\nmerb_rspec        (0.9.0)\ndatamapper        (0.3.0)\nrspec             (1.1.3)\ndo_yourdbhere     (varies)\n\n"""
https://github.com/wayneeseguin/merbtastic,null
https://github.com/wayneeseguin/alogr,"""= About\n\n  AlogR enables a Ruby project to log to the filesystem using non-blocking asynchronous IO with no external dependencies.\n\n= Author\n\n  Wayne E. Seguin (wayneeseguin at gmail dot com)\n\n= How it works\n\n  A global logging buffer gets added to the running application.\n  There is a global buffer which is an array of fifo queues.\n  Worker threads are to pop the first element (which is a string) off of a fifo queue and \""process\"" it. \n  Processing involves writing the string to disk using non-blocking asynchronous IO\n  Threads will be event based where the event is something being placed in the queue, or the queue non-empty.\n  \n= Config\n  \n  You can choose the log that the application uses:\n\n  AlogR.new( \""log/app_log.log\"" )\n  \n  :log specifies the default log\n  \n  AlogR.new( :log => \""log/app_log.log\"" )\n\n  You may also specify any combination of logs corresponding to the log levels in addition to the default log:\n\n  AlogR.new( :log => \""log/app_log.log\"", :error => \""log/error.log\"", :debug => \""log/debug.log\"")\n\n  where log levels are one of: [ emergency, alert, critical, error, warning, notice, info, debug ] \n\n= Application Usage\n\n  First be sure to setup the logger:\n\n  $alogger = AlogR.new(:log)\n\n  To log a string to either the error log or the default log (depending on your configuration):\n\n  \""Jonnie! You borked it!\"".log(:error)\n\nFeature Requests:\n# Be able to specify conditional filters\n\n= Examples\n\n* Example 1\nrequire \""alogr\""\n$logger = AlogR::Logger.new(:log => \""/Users/wayne/projects/ruby/alogr/trunk/log/default.log\"")\n\""a test, should go to the logs 10 times\\n\"".log.log.log.log.log.log.log.log.log.log\n\n* Example 2\nrequire \""alogr\""\n$logger = AlogR.new(\n:log => \""/Users/wayne/projects/ruby/alogr/trunk/log/production.log\"", \n:error => \""/Users/wayne/projects/ruby/alogr/trunk/log/error.log\""\n)\n\n\""(1)this should go to the production log\\n\"".log\n\n\""(2)this should go to error log\\n\"".log(:error)\n\n\""(3)error\\n\"".log :error\n\n\""(4)production\\n\"".log :info\n\n\""(5)error\"".log :error\n\n\n* Example 3\nrequire \""lib/alogr\""\n$logger = AlogR.new(\n:log => \""/Users/wayne/projects/ruby/alogr/trunk/log/production.log\"", \n:error => \""/Users/wayne/projects/ruby/alogr/trunk/log/error.log\"",\n:info => \""/Users/wayne/projects/ruby/alogr/trunk/log/info.log\"",\n:warning => \""/Users/wayne/projects/ruby/alogr/trunk/log/warning.log\""\n)\n\n\""this should go to info log\"".log\n\n\""this should go to error log\"".log(:error)\n\n\""this should go to production log\"".log(:warning)\n\n\""error\"".log :error\n\n\""warning\"".log :warning\n\n\""info\"".log :info\n\n\""yetanother error\"".log :error\n\n* Example 4\nrequire \""lib/alogr\""\n$logger = AlogR.new(\n:log => \""/Users/wayne/projects/ruby/alogr/trunk/log/production.log\"", \n:error => \""/Users/wayne/projects/ruby/alogr/trunk/log/error.log\"",\n:info => \""/Users/wayne/projects/ruby/alogr/trunk/log/info.log\"",\n/paypal => \""/Users/wayne/projects/ruby/alogr/trunk/log/paypal.log\""\n)\n\""this should go to info log\"".log\n\""this should go to error log\"".log(:error)\n\""this should go to production log\"".log(:warning)\n\n* Example 4:\nIf line matches a regexp then sent log/paypal.log as well as production.log\nAlogR.new(:log => \""log/production.log\"", /paypal/ => \""log/paypal.log\"")\n\nGets logged to both\n{ :something => \""value\"", :something_else => \""value\"" }.log\n\n"""
https://github.com/wayneeseguin/autozest,"""= About\n\nAutoZest is an autotest extension\n\n= Author\n\n  Wayne E. Seguin (wayneeseguin at gmail dot com)\n\n= Features\n\n* automated growl installation\n  $ autozest install growl\n\n* generation of .autotest with growl & autozest config\n  $ autozest setup autotest\n\n* generation of .autozest.yml config file\n  $ autozest setup\n\n* autozest.sqlite3 database file for pulling random messages based on severity, update via:\n  $ autozest update\n\nNotes:\n\n* config file can specify extra image fetching options\n* dependency: ZenTest\n\n"""
https://github.com/chneukirchen/coset-mirror,null
https://github.com/wayneeseguin/sequel,null
https://github.com/cdcarter/backpacking,"""# Backpacking: Io-powered web framework #\n\nInspired by the simplicity of other web frameworks, and the awesome\nmetaprogramming power of Io, Chris Carter set out to recreate nails,\nhammer and toolbox.\n\nHere it is: the wheel, recreated in Io. \n\n* both DBRMS- and ORM-agnostic \n* simple template system\n* MIT-licensed, yours to fiddle with\n\n## Run it ##\n\n  $ io\n\nWill start a server on port 8000 per default.\n\n## Get the source code ##\n\ngit clone git://github.com/cdcarter/backpacking.git\n\n## Co-creators ##\n\nChris Carter\nIan Ownbey (the View system, among other things)\nOlle Jonsson (this Readme)\n\n## Read more ##\n\nhttp://iolanguage.com/"""
https://github.com/bmizerany/simply_versioned,"""SimplyVersioned\n===============\n\nRelease:\t1.0.0\nDate:\t\t\t28-01-2008\nAuthor:\t\tMatt Mower <self@mattmower.com>\n\nSimplyVersioned is a simple, non-invasive, approach to versioning ActiveRecord models.\n\nSimplyVersioned does not require any structural change to the models to be versioned and requires only one versions table to be created (a migration generator is supplied with the plugin) for the application, regardless of the number of models being versioned.\n\nThe plugin introduces a 'Version' ActiveRecord model (that reflects changes to model attributes) to which versioned models are polymorphically associated. Version records store the model information as a YAML hash.\n\t\nSimplyVersioned meets a simple need for model versioning. If your needs are more complex maybe try Rick Olsen's acts_as_versioned (http://svn.techno-weenie.net/projects/plugins/acts_as_versioned/).\n\t\nSimplyVersioned is (so far) actively tested with Rails 2.0.2 and Ruby 1.8.6\n\t\nUsage\n=====\n\n1. Install the plugin\n\n  ./script/plugin install http://rubymatt.rubyforge.org/svn/simply_versioned\n\n2. Generate the migration\n\n  ./script/generate simply_versioned_migration\n\n\tNote that the migration defaults to storing the version info in a TEXT field. On MySQL this will default to a\n\tlimit of 64K. If you are versioning particularly large models you will want to modify the migration to include\n\ta :limit => n condition to promote the yaml column to a MEDIUMTEXT or (god forbid) a LONGTEXT.\n\n3. Create the versions table\n\n  rake db:migrate\n\n4. Annotate the models you want to version specifying how many versions to keep\n\n\tclass Thing < ActiveRecord::Base\n\t  simply_versioned :keep => 10\n\tend\n\t\n\tIf you do not specify a limit then old versions are never automatically deleted. You can\n\tmanually delete them like this:\n\t\n\tthing.versions.purge( 10 )\n\t\n\twhich would delete all the but the last ten versions.\n\t\n\tIf you want fine-grained control over when versions are created you can use:\n\t\n\tclass Thing < ActiveRecord::Base\n\t\tsimply_versioned :automatic => false\n\tend\n\t\n\tand new versions will no longer be created by default. You will then need to use\n\tthe with_versioning method to create a version.\n\t\n\tLastly you can control which columns will be versioned by specifying an exclude parameter.\n\t\n\tclass Thing < ActiveRecord::Base\n\t\tsimply_versioned :exclude => :awkward_column\n\tend\n\t\t\n\tor\t\n\t\n\tclass Thing < ActiveRecord::Base\n\t\tsimply_versioned :exclude => [:first_awkward_column,:second_awkward_column,...]\n\tend\n\t\n\tThis may be helpful if you run into conflicts with other plugins which try to manage columns.\n\n5. Create versions\n\n\tthing = Thing.create!( :foo => bar ) # creates v1\n\tthing.foo = baz\n\tthing.save! # creates v2\n\t\n\tIf you need to control whether a version is created or not, use #with_versioning. For example:\n\t\n\tthing.with_versioning( false ) do |t|\n\t\tt.save!\n\tend\n\t\n\tor, using the \""magic pen\"" (http://dablog.rubypal.com/2007/2/18/the-magic-pens-of-ruby thanks hmj):\n\t\n\tthing.with_versioning( false, &:save! )\n\n6. Find versions\n\n\tthing.versions.each do |version| ... end\n\trender :partial => 'thing_version', :collection => thing.versions\n\tthing.versions.current\n\tthing.versions.first\n\tthing.versions.get( 3 )\n\t\n\tTo find a version number:\n\t\n\tthing.version_number\n\n7. Revert to a previous version\n\n\tthing.revert_to_version( 5 )\n\t\n\tIf a specific reversion needs to avoid overwriting some column values pass\n\tan :except option, e.g.\n\t\n\tthing.revert_to_version( 1, :except => [:name,:age] )\n\t\n\tThe revert_to_version method also takes an existing Version instance, e.g.\n\t\n\tversion = thing.versions.find( ... )\n\tthing.revert_to_version( version )\n\n8. Traverse versions\n\n\tthing.versions.current.previous\n\tthing.versions.first.next\n\n9. Obtain a copy of a previous versioned model\n\n\tthing.versions.first.model # => Instantiated Thing with versioned values\n\t\nThanks to:\n\n\tChris Wanstrath (http://ozmm.org/) for useful feedback and GitHub\n\tJosh Susser (http://blog.hasmanythrough.com/) for useful suggestions and feedback\n\tRick Olson (http://techno-weenie.net/) for all the many plugins whose code i've read\n\t\nCopyright (c) 2007 Matt Mower <self@mattmower.com> and released under the MIT license\n"""
https://github.com/hornbeck/arc,null
https://github.com/drnic/javascript-unittest-tmbundle,"""JavaScript Unit Testing TextMate bundle\n\nA set of snippets for using prototypejs' unittest.js test suite."""
https://github.com/peterc/switchpipe,"""SwitchPipe 1.05\nBy Peter Cooper\n~~~~ February 10, 2008 (development began January 11, 2008)\nswitchpipe@peterc.org\n\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\n\nTHE LATEST, CANONICAL DOCUMENTATION FOR SWITCHPIPE IS LOCATED AT:\nhttp://groups.google.com/group/switchpipe/web\n\nTHE DOCUMENTATION BELOW IS INCLUDED MERELY TO HELP IF YOU'RE IN A RUSH OR UNABLE \nTO VISIT THE ONLINE VERSION. IT IS INCOMPLETE, SECTIONS MAY BE INACCURATE, AND \nTHE ONLINE DOCUMENTATION EXPLAINS A LOT MORE AND IS MORE UP TO DATE.\n\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\n\n\nWHAT IS SWITCHPIPE?\n-------------------\nOnline @ http://groups.google.com/group/switchpipe/web/introduction-overview\n\nSwitchPipe is a proof of concept \""Web application server.\"" More accurately,\nit's a Web application process manager and request dispatcher / proxy. Backend \nHTTP-speaking applications (Web applications) do not run directly within\nSwitchPipe, but are loaded into their own processes making SwitchPipe language\nand framework agnostic.\n\nSwitchPipe takes control of, and manages, the backend application processes, \nincluding loading and proxying to multiple instances of each application in a\nround-robin style configuration. As an administrator, you can define the maximum\nnumber of backend processes to run for each app, along with other settings so \nthat you do not exceeded preferred resource limits. SwitchPipe quickly removes\nprocesses that \""break\"" or otherwise outlive their welcome. For example, you can\nlet SwitchPipe kill any backend processes that have not been accessed for, say,\n20 seconds. This makes hosting many multiple Rails applications, for example, a\nquick and non-memory demanding process, ideal for shared hosting environments.\n\nSwitchPipe proxies incoming HTTP requests at the TCP level, using information \nextracted from the HTTP request and headers to work out which backend application\nis required to handle the request.\n\nSwitchPipe's goal is to be:\n\n  * super easy to configure\n  * the easiest way to deploy multiple HTTP-talking backend applications\n  * painless in terms of management; no hand-holding of different applications is needed\n  * a permanent daemon that can handle configuration changes in backend apps \""on the fly\""\n  * a reliable solution on Linux and OS/X (and anything POSIX compatible, ideally)\n\n\nQUICK INSTALL / STEPS TO SEEING A QUICK DEMO OF SWITCHPIPE\n----------------------------------------------------------\nOnline @ http://groups.google.com/group/switchpipe/web/installation-instructions\n\nRun the \""demo\"" script from SwitchPipe's base directory:\n  # ./script/demo\n\nThe \""demo\"" script does everything that the manual process below does, except it runs\nSwitchPipe as a daemon temporarily, does one test request, then closes down and\ncleans up.\n\nOR DO IT \""THE MANUAL WAY\"" (preferred by all true hackers)...\n\nInstall dependencies:\n  # sudo gem install daemons eventmachine open4\n\nInstate configuration file:\n  # cp config.yml.example config.yml\n\nMove application configurations for the demo apps into the \""apps\"" directory:\n  # mv demo_apps/*.yml apps/\n\nRun SwitchPipe as an interactive process:\n  # ./script/switchpipe run\n\nVisit these URLs in a browser:\n  http://127.0.0.1:10000/webrick_thing/\n  http://127.0.0.1:10000/python_http_server/ (won't run unless Python is installed)\n  http://127.0.0.1:10000/camping_demo_app/ (won't run unless Camping is installed)\n\nYou should notice SwitchPipe start and manage the relevant processes, killing them\nwhenever the timeouts kick in. Use CTRL+C to break out of SwitchPipe's non-daemonized\nmode. In future use ./script/switchpipe start and ./script/switchpipe stop to start\nand stop SwitchPipe as a daemonized process.\n\nInformation about setting up SwitchPipe as a system service in /etc/init.d, etc, is\navailable within SwitchPipe's online documentation.\n\n\nTHE KEY STEPS TO GETTING STARTED FOR YOUR OWN APPS\n--------------------------------------------------\nOnline @ http://groups.google.com/group/switchpipe/web/setting-up-your-own-webapps-with-switchpipe\n(significantly more up to date than this)\n\n1) Put YAML files into /apps\n\tExample for Rails:\n\t\tpath: /Users/peter/dev/rails/app1\n\t\ttype: mongrel_rails\n\t\tmax_instances: 6\n\t\ttimeout: 60\n\n\tExample for WEBrick / regular app:\n\t\tpath: demo_apps\n\t\tcmd: ruby webrick_thing [[PORT]]\n\t\tsingle_threaded: false\n\n\tExample for Camping:\n\t\tpath: demo_apps\n\t\tcmd: camping -p [[PORT]] camping_demo.rb\n\t\tmax_instances: 1\n\t\ttimeout: 15\n\n2) Make sure config.yml exists, by copying config.yml.example to config.yml and tweaking.\n\n3) Run ./script/switchpipe run  \n   Note: This runs it as a regular process, not daemonized.\n         To daemonize use ./script/switchpipe start and ./script/switchpipe stop\n\n4) Make your main HTTP server (Apache / Nginx / whatever) proxy requests to SwitchPipe at directories with the same name as the YAML files you made.\n\tExample: If your YAML file is some_rails_app.yml, then proxy to http://switchpipe-host.example.com/some_rails_app/\n\t\t\t If your YAML file is acampingapp.yml, then proxy to http://switchpipe-host.example.com/acampingapp/\n\t\t\t\n\tmod_proxy / <VirtualHost> example:\n\t         ProxyPass / http://127.0.0.1:10000/rails_app_name/\n             ProxyPassReverse / http://127.0.0.1:10000/rails_app_name/\n\n    .htaccess example (useful so that Apache can serve static files!):\n             RewriteEngine On\n             RewriteCond %{REQUEST_FILENAME} !-f\n             RewriteRule ^(.*)$ http://127.0.0.1:10000/rails_app_name/$1 [P]\n\n5) Enjoy watching the output of SwitchPipe as it starts and stops backend processes as you access the different apps.\n\n\nEXAMPLE OF ADDING AN APPLICATION\n--------------------------------\nOnline @ http://groups.google.com/group/switchpipe/web/setting-up-your-own-webapps-with-switchpipe\n\nLet's say you've developed a Rails application and you want SwitchPipe to manage it. Just \ncreate a new YAML file in /apps called rails_app_name.yml (or anything, but the base name\nof the file name is used as the app's identifier), and drop in a few lines like so:\n\npath: /path/to/the/rails/app\ntype: mongrel_rails\nmax_instances: 6\ntimeout: 8\n\nRestart SwitchPipe, or merely wait a few seconds until it picks up the new file itself, and\nthe application is made available, with up to six backend processes, in seconds at\na directory just off of SwitchPipe's main URL. For example: http://switchpipe/rails_app_name\n\nYou can deploy Camping, Merb, or even plain old WEBrick apps in the same way. As long\nas it can be run at a prompt, given a specific port to run on, and talk HTTP, SwitchPipe will\ndeploy it. That goes for Ruby and non-Ruby apps.\n\nTo complete the setup, you would then configure your normal Apache, nginx, or other\nmain HTTP daemon to forward requests to a particular domain / virtual host / directory\nthrough to SwitchPipe at the relevant folder. For example, from Apache <Virtualhost>\ndirectives:\n\n  ProxyPass / http://127.0.0.1:10000/rails_app_name/\n  ProxyPassReverse / http://127.0.0.1:10000/rails_app_name/\n\nAn even better way to do it, if possible, is from a .htaccess file. Example:\n\n  RewriteEngine On\n  RewriteCond %{REQUEST_FILENAME} !-f\n  RewriteRule ^(.*)$ http://127.0.0.1:10000/rails_app_name/$1 [P]\n\nThe benefit of this technique is that static files can be served up by Apache at usual\nbreakneck speed!\n\nNo more port numbers. No more setting up individual clusters for different apps. No\nmore worrying about how different frameworks handle clustering. Hurrah!\n\nNote that a \""hostname\"" config variable can also be used on applications to serve up the\napplication through SwitchPipe DIRECTLY. This means you can serve up apps WITHOUT Apache\nor Nginx in front of SwitchPipe!\n\n\nTO DOS\n------\nOnline @ http://groups.google.com/group/switchpipe/web/todos-limitations\n\n * Improve error handling\n * Web-accessible status / information URL\n * Caching (potentially)\n * Test suite\n * Test SwitchPipe on more platforms and architectures (OS X and Linux on i386/686 tested so far)\n * Improve documentation and Web site\n * Stream HTTP message bodies over a certain size to backend apps rather than buffer the whole lot in SwitchPipe\n   (this becomes a necessity when dealing with huge HTTP uploads, say)\n\nCONTRIBUTORS\n------------\n\n - Peter Cooper is / was the primary developer of SwitchPipe (so far).\n - Jason Stirk provided a key patch in April 2008 that resolved hanging issues.\n - Mike Auclair provided a fix so that trailing slashes are not necessary on app names\n\n\""LICENSE\""\n---------\nOnline @ http://groups.google.com/group/switchpipe/web/licensing-information\n\nThis work is hereby released into the Public Domain. To view a copy of the public \ndomain dedication, visit http://creativecommons.org/licenses/publicdomain/ or send\na letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, \nCalifornia, 94105, USA.\n\nSwitchPipe is distributed and made available with the freedoms of the\npublic domain, but with a stern reminder to be ethical.\n\nThis software / content / other work is released into the public \ndomain. Do what you want with it, but may your conscience and \nmoral compass encourage you to be a good guy (or gal). Being good means:\n\n * Not using the same, identical name or title for any substantially\n   different or derived works in such a way that confusion could be\n   caused amongst other users.\n\n * Providing the original author(s) with feedback, notices, patches\n   or credit relating to further extended usage of the work. It's\n   only the decent thing to do.\n\nTHE WORK IS PROVIDED \""AS IS\"", WITHOUT WARRANTY OF ANY KIND, \nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES\nOR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR \nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\nOR THE USE OR OTHER DEALINGS IN THIS WORK.\n\nNote: If you or your company REQUIRES a license for SwitchPipe (e.g.\ncompany policy), Peter Cooper can prove you with one for a fee. Contact\ndetails can be found at http://www.petercooper.co.uk/. The same applies\nto anyone who wishes to support Peter Cooper in his work on SwitchPipe.\nThank you.\n"""
https://github.com/up_the_irons/ebay4r,"""=================\nWelcome to eBay4R\n=================\n\n:Author: Garry Dolley\n:Date: 03-28-2008\n:Version: v1.1\n:eBay API: 583\n\neBay4R is a Ruby wrapper for eBay's Web Services SOAP API (v583). Emphasis is\non ease of use and small footprint.\n\nPlease report bugs and other problems, see \""Author\"" section at the bottom.\n\nCurrent release can be downloaded from:\n\nhttp://rubyforge.org/projects/ebay4r\n\nThe latest code is available at both RubyForge and GitHub:\n\n  * git://rubyforge.org/ebay4r.git\n  * git://github.com/up_the_irons/ebay4r.git\n\n\nRequirements\n------------\n\n* SOAP4R library v1.5.7 or newer.  The specific version I'm using for testing\n  is soap4r-1.5.7.90.20070921.\n\n\nOptionals\n---------\n\n* RubyGems\n\n\nInstallation\n------------\n\ntar/gzip\n~~~~~~~~\n\nJust unzip the archive anywhere you like, and see \""Getting Started\"" below \n(you will need to add the ebay4r/lib path to your $RUBYLIB environment\nvariable)\n\nRubyGems\n~~~~~~~~\n\n* To install a gem you already downloaded::\n  \n    gem install ebay-<version>.gem\n\n* For the latest release with no fuss (previous download not required)::\n  \n    gem install -r ebay\n\nGit\n~~~\n\nYou can download the latest and greatest code using Git, just type::\n\n  git clone git://github.com/up_the_irons/ebay4r.git\n\n\nImportant Note about Using eBay4R and Ruby on Rails\n---------------------------------------------------\n\nIf you installed SOAP4R as a gem you must put the following two lines at the\nvery top of your config/environment.rb::\n\n  require 'rubygems'\n  gem 'soap4r'\n\nThis must be done before Rails starts auto-loading things.\n\nAdditionally, you have to put those two lines in *every* Rails app you have\non your machine, even if it doesn't use SOAP4R!  This is, allegedly, because\nActiveSupport (in dependency.rb) wrongly loads the SOAP4R included with Ruby\ninstead of your Gem.  More details can be found here:\n\n  http://dev.ctor.org/soap4r/ticket/433\n\nIf you get this error, or similar, in every Rails app::\n\n  [...]/activesupport-1.4.2/lib/active_support/dependencies.rb:477:in `const_missing': uninitialized constant XSD::NS::KNOWN_TAG (NameError?)\n\nyou've hit this problem.\n\n\nGetting Started\n---------------\n\nIf you installed eBay4R from a tarball or git repo, you will want to add the\nebay4r/lib directory to your Ruby include path ($RUBYLIB).  Then put\n\n::\n\n  require 'eBayAPI'\n \nat the top of your programs.\n\nIf you installed eBay4R with RubyGems, you don't have to add anything to\nRuby's include path, just put\n\n::\n\n  require 'rubygems'\n  gem 'ebay'\n\nat the top of your programs.\n\nExamples\n--------\n\nLook at the examples/ directory.  Edit the file myCredentials.rb and insert\nthe appropriate values.  Then you can run any of the example programs.\n\nHello, World!\n~~~~~~~~~~~~~\n\nThe simplest eBay API call is \""GeteBayOfficialTime\"".  Here's how to call it\nwith eBay4R::\n\n  require 'rubygems'\n  gem 'ebay'\n\n  # Put your credentials in this file\n  load('myCredentials.rb')\n\n  # Create new eBay caller object.  Omit last argument to use live platform.\n  eBay = EBay::API.new($authToken, $devId, $appId, $certId, :sandbox => true)\n\n  resp = eBay.GeteBayOfficialTime\n\n  puts \""Hello, World!\""\n  puts \""The eBay time is now: #{resp.timestamp}\""\n\n  # Wasn't that easy?!\n\nAdding an Item\n~~~~~~~~~~~~~~\n\nThis is a more complex example that performs a real (useful) function::\n\n  require 'rubygems'\n  gem 'ebay'\n\n  load('myCredentials.rb')\n\n  eBay = EBay::API.new($authToken, $devId, $appId, $certId, :sandbox => true)\n\n  # Notice how we nest hashes to mimic the XML structure of an AddItem request\n  resp = eBay.AddItem(:Item => EBay.Item(:PrimaryCategory => EBay.Category(:CategoryID => 57882),\n                                         :Title => 'Mouse Pad',\n                                         :Description => 'A really cool mouse pad, you know you want it...',\n                                         :Location => 'On Earth',\n                                         :StartPrice => '12.0',\n                                         :Quantity => 1,\n                                         :ListingDuration => \""Days_7\"",\n                                         :Country => \""US\"",\n                                         :Currency => \""USD\"",\n                                         :PaymentMethods => [\""VisaMC\"", \""PersonalCheck\""]))\n\n  puts \""New Item #\"" + resp.itemID + \"" added.\""\n\n\nDon't worry too much about EBay.Item and EBay.Category calls for now, they are\nexplained in the \""Creating Complex Data Types\"" section below.\n\n\nFormat of Requests\n~~~~~~~~~~~~~~~~~~\n\nIf ``eBay`` is your caller object, then you can issue any eBay API call\nby doing::\n\n  eBay.<call_name>( ... hash of named-arguments ... )\n\nFor example, to issue the GetItem call for Item #4503432058 and return all\ninformation, you do::\n\n  eBay.GetItem(:DetailLevel => 'ReturnAll', :ItemID => '4503432058')\n\nor to see your last invoice using the GetAccount call, you do::\n\n  eBay.GetAccount(:AccountHistorySelection => 'LastInvoice')\n\nSee the \""eBay Web Services SOAP API Guide\"" for acceptable parameters and values\nfor each API call.  This guide can be downloaded at eBay's \n`SOAP Development Center <http://developer.ebay.com/soap/>`_.\n\nCreating Complex Data Types\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA number of elements in eBay's schema are XML Schema simple types.  For\nexample, CategoryID, Title, and Description are all strings.  But many \nelements, like Item and Seller, are of types \""ItemType\"" and \""SellerType\"", \nrespectively.  These are complex data types, meaning they are structures\ncomposed of collections of simple types.\n\n\""How do I make a complex type object?\"", you ask.  Simple::\n\n  EBay.<element_name>( ... hash of named-arguments ... )\n\ncreates a new `<element_name>` element of type ``<element_name>Type``.  For\nexample,\n\n::\n\n  EBay.Item(:Title => 'Mouse Pad', :Description => '...')\n\ncreates a new ``ItemType`` object.  Please note, these factory methods are class\nmethods of module EBay, so the upper-case \""E\"" in \""EBay\"" is not a typo.  A\nmore common way to see this is::\n\n  EBay::Item( ... )\n\nThe only difference is if you do not pass any arguments to the factory method\nand do not explicitly put empty parentheses (), Ruby will assume it is a \nconstant, not a method.\n\nSetting XML Attributes\n~~~~~~~~~~~~~~~~~~~~~~\n\nThe symbol you use to set an XML attribute on an element is::\n\n  :xmlattr_<attribute_name>\n\nFor example, to create a <Label> element (corresponding to eBay's LabelType)\nwith an attribute of \""visible\"" equal to \""true\"", you would do::\n\n  EBay.Label(:Name => \""some string\"", :xmlattr_visible => true)\n\n\nFormat of Responses\n~~~~~~~~~~~~~~~~~~~\n\nThere is a one-to-one correspondence between the XML returned by eBay and the\nway you access the values contained therein using the response object returned\nby the call.  For example, let's say you issued a \""GetItem\"" call::\n  \n  resp = eBay.GetItem(:DetailLevel => 'ReturnAll', :ItemID => '4503432058')\n\nand eBay returned the following XML (abbreviated where appropriate)::\n\n  <?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n  <soapenv:Envelope xmlns:soapenv=\""http://schemas.xmlsoap.org/soap/envelope/\"" \n                    xmlns:xsd=\""http://www.w3.org/2001/XMLSchema\"" \n                    xmlns:xsi=\""http://www.w3.org/2001/XMLSchema-instance\"">\n   <soapenv:Body>\n    <GetItemResponse xmlns=\""urn:ebay:apis:eBLBaseComponents\"">\n     <Timestamp>2005-12-09T09:40:41.602Z</Timestamp>\n     <Ack>Success</Ack>\n     <Version>437</Version>\n     <Build>e437_core_Bundled_2119808_R1</Build>\n     <Item>\n      ...\n\n      <AutoPay>false</AutoPay>\n      <BuyerProtection>ItemIneligible</BuyerProtection>\n      <BuyItNowPrice currencyID=\""USD\"">0.0</BuyItNowPrice>\n      <Country>US</Country>\n      <Currency>USD</Currency>\n      <Description>Fund. of Physics, 5th, by Halliday, Resnick, Walker</Description>\n      <Escrow>None</Escrow>\n      <GiftIcon>0</GiftIcon>\n      ...\n\n      <ShipToLocations>US</ShipToLocations>\n      <ShipToLocations>CA</ShipToLocations>\n     </Item>\n    </GetItemResponse>\n   </soapenv:Body>\n  </soapenv:Envelope>\n\n\nThe \""resp\"" object is of type\n  \n  SOAP::Mapping::Object\n\nand contains all the XML elements between ``<GetItemResponse> ... </GetItemResponse>``.\n\nSo, if you want to print the item description, just do::\n\n  puts resp.item.description\n\nand you will see::\n  \n  \""Fund. of Physics, 5th, by Halliday, Resnick, Walker\""\n\nRepeated XML elements automatically become arrays of the same name, so to see\nall the locations this item can ship to, just do::\n\n  resp.item.shipToLocations.each { |loc| puts loc }\n\nand you will see::\n\n  US\n  CA\n\nIt's that easy! (Are any Java or C# developers reading this?  Don't be\njealous... ;)\n\nA Note about Case\n~~~~~~~~~~~~~~~~~\n\nAstute readers (all of you, right?) will notice that the first letter of every\nelement contained within the response object is lower-case, even though in the\nXML it is upper-case.  This is currently the way things are and you will have\nto remember to lower the first character in your code.  \n\nRuby's convention is that only classes, modules, and constants begin with \nupper-case letters.  The author of the SOAP4R library (which contains \nwsdl2ruby.rb) respected this convention, and as a result, the eBay.rb \nfile I use (generated from eBay's WSDL) has this mapping.\n\nI haven't come up with any Ruby magic to dynamically allow upper-case first\ncharacters to work also, so if you happen to want to take a crack at it and\nget it working, please send me your patches (see \""Author\"" section at the \nbottom).\n\nPlease note, the opposite does _not_ apply.  That is, you can *submit* a call\nusing either case of the first character, and your arguments can also have\neither case letter first.  For example, this::\n\n  resp = eBay.GetItem(:DetailLevel => 'ReturnAll', :ItemID => '4503432058')\n\nis the same as::\n\n  resp = eBay.getItem(:detailLevel => 'ReturnAll', :itemID => '4503432058')\n\n\nDebugging\n---------\n\nIf \""eBay\"" is your eBay caller object, as in::\n\n  eBay = EBay::API.new( ... )\n\nYou can see XML wiredumps by doing::\n\n  eBay.debug = true\n\nbefore you issue any eBay API calls.  This is useful to see the raw XML of\nwhat eBay is sending back to you.\n\n\nFiles\n-----\n\ncontrib/\n  Extras contributed by the community (myself included)\n\nexamples/\n  Examples of eBay API calls using this library. You will want to check out\n  these examples before making your own calls.\n\nlib/eBayAPI.rb\n  The heart of this library\n\nlib/eBayDriver.rb\n  Autogenerated by wsdl2ruby.rb\n\nlib/eBay.rb\n  Autogenerated by wsdl2ruby.rb\n\nlib/RequesterCredentialsHandler.rb\n  Helper for generating the eBay Authentication header for each call\n\ntest/\n  Unit and functional tests\n\n\nTo Do\n-----\n\n* Add many more examples\n* Add more unit and functional tests\n\n\nAuthor\n------\n\nGarry C. Dolley\n\ngdolley [at] NOSPAM- ucla.edu\n\nAIM: garry97531\n\nIRC: up_the_irons in #ram, #git, #caboose on Freenode (and usually many other\nchannels)\n\n\nFormatting\n----------\n\nI've dropped RDoc formatting for this README.  Headings never looked like\nheadings to me, which was annoying.\n\nThis README is formatted in reStructredText [RST]_.  It has the best\ncorrelation between what a document looks like as plain text vs. its\nformatted output (HTML, LaTeX, etc...).  What I like best is, markup doesn't\nlook like markup, even though it is.\n\n.. [RST] http://docutils.sourceforge.net/rst.html\n\nCopyright\n---------\n\nCopyright (c) 2005,2006,2007,2008 Garry C. Dolley\n\neBay4R is free software; you can redistribute it and/or modify it under the\nterms of the GNU General Public License as published by the Free Software\nFoundation; either version 2 of the License, or (at your option) any later \nversion.\n\neBay4R is distributed in the hope that it will be useful, but WITHOUT ANY\nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\nFOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\ndetails.\n\nYou should have received a copy of the GNU General Public License along with\neBay4R; if not, write to the Free Software Foundation, Inc., 51 Franklin\nStreet, Fifth Floor, Boston, MA  02110-1301, USA\n\n"""
https://github.com/collectiveidea/awesomeness,"""Collective Idea's Awesomeness\n=============================\n\nA collection of stuff that we use often, but not generic enough to go in another plugin.\n\nIf you've stumbled across this and love/hate it, let us know!\n\n== Compatability\n\nThis plugin is compatible with edge-rails that is slated to be Rails 2.2.  For a version compatible with 2.1, check out the \""rails-2.1\"" tag from git.\n\n== Core Extensions\n\n* Object#tap (http://moonbase.rydia.net/mental/blog/programming/eavesdropping-on-expressions)\n\n* String#widont to make typography nicer (http://shauninman.com/archive/2006/08/22/widont_wordpress_plugin)\n\n* Array#uniq with a block\n\n  >> %w(the cow jumped over the moon).uniq {|s| s.length }\n  => [\""the\"", \""jumped\"", \""over\""]\n\n* Round floats to the nearest x\n\n  >> 5.38475.round(0.5)\n  => 5.5\n\n* Hash goodies\n\n  >> {:a => [1,3,4], :b => [2,5]}.without(:a => 1)\n  => {:a => [3,4], :b => [2,5]}\n\n  >> {:a => \""\"", :b => nil, :c => 1}.compact\n  => {:c => 1}\n\n* And more\u2026\n\n== Rails Helpers\n\n* Unicode TextHelper additions that change the default truncate & excerpt string to an elipsis (\u2026)\u00a0instead of just three periods (...)\n\n* Add widont to textilize methods\n\n* Transparent removal of trailing slashes in URLs\n\n== Rake Tasks\n\n== Capistrano Recipes\n\n* Use :remote_cache by default\n\n* Disable and enable web during restarts\n\n* Run deploy:cleanup after deploys\n\n* Backups"""
https://github.com/atmos/fitter_happier,null
https://github.com/wycats/merb-plugins,""""""
https://github.com/up_the_irons/ram,"""= Welcome to RAM: Ruby Asset Manager\n\nRAM is the premiere open-source, role-based, access-controlled digital asset\nmanager for Ruby on Rails. It was built from the ground up to be a fast, secure\nand efficient platform for the distribution, aggregation and tracking of online\ndigital assets.\n\n\n= Installation\n\nFrom the root directory of this application type:\n\n  rake install\n  \nThis will launch the install wizard, which will take you step by step in setting up RAM.\n\nIf you have problems installing RAM, consult the support section of our \nwebsite, which can be found here: http://www.locusfoc.us/ram/pages/docs.\n\nAdditionally, you can come by our IRC channel at:\n\n  Server  : irc.freenode.net\n  Channel : #ram\n\nWe hope you enjoy RAM!\n\n\n= License\n\nRAM is distributed under the same license as Ruby on Rails. See\nhttp://www.opensource.org/licenses/mit-license.php\n"""
https://github.com/grempe/amazon-ec2,null
https://github.com/collectiveidea/audited,"""Audited [![Build Status](https://secure.travis-ci.org/collectiveidea/audited.svg)](http://travis-ci.org/collectiveidea/audited) [![Code Climate](https://codeclimate.com/github/collectiveidea/audited.svg)](https://codeclimate.com/github/collectiveidea/audited) [![Security](https://hakiri.io/github/collectiveidea/audited/master.svg)](https://hakiri.io/github/collectiveidea/audited/master)\n=======\n\n**Audited** (previously acts_as_audited) is an ORM extension that logs all changes to your models. Audited can also record who made those changes, save comments and associate models related to the changes.\n\nAudited currently (4.x) works with Rails 5.2, 5.1, 5.0 and 4.2.\n\nFor Rails 3, use gem version 3.0 or see the [3.0-stable branch](https://github.com/collectiveidea/audited/tree/3.0-stable).\n\n## Supported Rubies\n\nAudited supports and is [tested against](http://travis-ci.org/collectiveidea/audited) the following Ruby versions:\n\n* 2.3.7\n* 2.4.4\n* 2.5.1\n\nAudited may work just fine with a Ruby version not listed above, but we can't guarantee that it will. If you'd like to maintain a Ruby that isn't listed, please let us know with a [pull request](https://github.com/collectiveidea/audited/pulls).\n\n## Supported ORMs\n\nAudited is currently ActiveRecord-only. In a previous life, Audited worked with MongoMapper. Use the [4.2-stable branch](https://github.com/collectiveidea/audited/tree/4.2-stable) if you need MongoMapper.\n\n## Installation\n\nAdd the gem to your Gemfile:\n\n```ruby\ngem \""audited\"", \""~> 4.7\""\n```\n\nThen, from your Rails app directory, create the `audits` table:\n\n```bash\n$ rails generate audited:install\n$ rake db:migrate\n```\n\nIf you're using PostgreSQL, then you can use `rails generate audited:install --audited-changes-column-type jsonb` (or `json`) to store audit changes natively with its JSON column types. If you're using something other than integer primary keys (e.g. UUID) for your User model, then you can use `rails generate audited:install --audited-user-id-column-type uuid` to customize the `audits` table `user_id` column type.\n\n#### Upgrading\n\nIf you're already using Audited (or acts_as_audited), your `audits` table may require additional columns. After every upgrade, please run:\n\n```bash\n$ rails generate audited:upgrade\n$ rake db:migrate\n```\n\nUpgrading will only make changes if changes are needed.\n\n\n## Usage\n\nSimply call `audited` on your models:\n\n```ruby\nclass User < ActiveRecord::Base\n  audited\nend\n```\n\nBy default, whenever a user is created, updated or destroyed, a new audit is created.\n\n```ruby\nuser = User.create!(name: \""Steve\"")\nuser.audits.count # => 1\nuser.update_attributes!(name: \""Ryan\"")\nuser.audits.count # => 2\nuser.destroy\nuser.audits.count # => 3\n```\n\nAudits contain information regarding what action was taken on the model and what changes were made.\n\n```ruby\nuser.update_attributes!(name: \""Ryan\"")\naudit = user.audits.last\naudit.action # => \""update\""\naudit.audited_changes # => {\""name\""=>[\""Steve\"", \""Ryan\""]}\n```\n\nYou can get previous versions of a record by index or date, or list all\nrevisions.\n\n```ruby\nuser.revisions\nuser.revision(1)\nuser.revision_at(Date.parse(\""2016-01-01\""))\n```\n\n### Specifying columns\n\nBy default, a new audit is created for any attribute changes. You can, however, limit the columns to be considered.\n\n```ruby\nclass User < ActiveRecord::Base\n  # All fields\n  # audited\n\n  # Single field\n  # audited only: :name\n\n  # Multiple fields\n  # audited only: [:name, :address]\n\n  # All except certain fields\n  # audited except: :password\nend\n```\n\n### Specifying callbacks\n\nBy default, a new audit is created for any Create, Update or Destroy action. You can, however, limit the actions audited.\n\n```ruby\nclass User < ActiveRecord::Base\n  # All fields and actions\n  # audited\n\n  # Single field, only audit Update and Destroy (not Create)\n  # audited only: :name, on: [:update, :destroy]\nend\n```\n\n### Comments\n\nYou can attach comments to each audit using an `audit_comment` attribute on your model.\n\n```ruby\nuser.update_attributes!(name: \""Ryan\"", audit_comment: \""Changing name, just because\"")\nuser.audits.last.comment # => \""Changing name, just because\""\n```\n\nYou can optionally add the `:comment_required` option to your `audited` call to require comments for all audits.\n\n```ruby\nclass User < ActiveRecord::Base\n  audited :comment_required => true\nend\n```\n\n### Limiting stored audits\n\nYou can limit the number of audits stored for your model. To configure limiting for all audited models, put the following in an initializer:\n\n```ruby\nAudited.max_audits = 10 # keep only 10 latest audits\n```\n\nor customize per model:\n\n```ruby\nclass User < ActiveRecord::Base\n  audited max_audits: 2\nend\n```\n\nWhenever an object is updated or destroyed, extra audits are combined with newer ones and the old ones are destroyed.\n\n```ruby\nuser = User.create!(name: \""Steve\"")\nuser.audits.count # => 1\nuser.update_attributes!(name: \""Ryan\"")\nuser.audits.count # => 2\nuser.destroy\nuser.audits.count # => 2\n```\n\n### Current User Tracking\n\nIf you're using Audited in a Rails application, all audited changes made within a request will automatically be attributed to the current user. By default, Audited uses the `current_user` method in your controller.\n\n```ruby\nclass PostsController < ApplicationController\n  def create\n    current_user # => #<User name: \""Steve\"">\n    @post = Post.create(params[:post])\n    @post.audits.last.user # => #<User name: \""Steve\"">\n  end\nend\n```\n\nTo use a method other than `current_user`, put the following in an initializer:\n\n```ruby\nAudited.current_user_method = :authenticated_user\n```\n\nOutside of a request, Audited can still record the user with the `as_user` method:\n\n```ruby\nAudited.audit_class.as_user(User.find(1)) do\n  post.update_attributes!(title: \""Hello, world!\"")\nend\npost.audits.last.user # => #<User id: 1>\n```\n\nThe standard Audited install assumes your User model has an integer primary key type. If this isn't true (e.g. you're using UUID primary keys), you'll need to create a migration to update the `audits` table `user_id` column type. (See Installation above for generator flags if you'd like to regenerate the install migration.)\n\n#### Custom Auditor\n\nYou might need to use a custom auditor from time to time. It can be done by simply passing in a string:\n\n```ruby\nclass ApplicationController < ActionController::Base\n  def authenticated_user\n    if current_user\n      current_user\n    else\n      'Elon Musk'\n    end\n  end\nend\n```\n\n### Associated Audits\n\nSometimes it's useful to associate an audit with a model other than the one being changed. For instance, given the following models:\n\n```ruby\nclass User < ActiveRecord::Base\n  belongs_to :company\n  audited\nend\n\nclass Company < ActiveRecord::Base\n  has_many :users\nend\n```\n\nEvery change to a user is audited, but what if you want to grab all of the audits of users belonging to a particular company? You can add the `:associated_with` option to your `audited` call:\n\n```ruby\nclass User < ActiveRecord::Base\n  belongs_to :company\n  audited associated_with: :company\nend\n\nclass Company < ActiveRecord::Base\n  has_many :users\n  has_associated_audits\nend\n```\n\nNow, when an audit is created for a user, that user's company is also saved alongside the audit. This makes it much easier (and faster) to access audits indirectly related to a company.\n\n```ruby\ncompany = Company.create!(name: \""Collective Idea\"")\nuser = company.users.create!(name: \""Steve\"")\nuser.update_attribute!(name: \""Steve Richert\"")\nuser.audits.last.associated # => #<Company name: \""Collective Idea\"">\ncompany.associated_audits.last.auditable # => #<User name: \""Steve Richert\"">\n```\n\nYou can access records' own audits and associated audits in one go:\n```ruby\ncompany.own_and_associated_audits\n```\n\n### Conditional auditing\n\nIf you want to audit only under specific conditions, you can provide conditional options (similar to ActiveModel callbacks) that will ensure your model is only audited for these conditions.\n\n```ruby\nclass User < ActiveRecord::Base\n  audited if: :active?\n\n  private\n\n  def active?\n    last_login > 6.months.ago\n  end\nend\n```\n\nJust like in ActiveModel, you can use an inline Proc in your conditions:\n\n```ruby\nclass User < ActiveRecord::Base\n  audited unless: Proc.new { |u| u.ninja? }\nend\n```\n\nIn the above case, the user will only be audited when `User#ninja` is `false`.\n\n### Disabling auditing\n\nIf you want to disable auditing temporarily doing certain tasks, there are a few\nmethods available.\n\nTo disable auditing on a save:\n\n```ruby\n@user.save_without_auditing\n```\n\nor:\n\n```ruby\n@user.without_auditing do\n  @user.save\nend\n```\n\nTo disable auditing on a column:\n\n```ruby\nUser.non_audited_columns = [:first_name, :last_name]\n```\n\nTo disable auditing on an entire model:\n\n```ruby\nUser.auditing_enabled = false\n```\n\nTo disable auditing on all models:\n\n```ruby\nAudited.auditing_enabled = false\n```\n\n### Custom `Audit` model\n\nIf you want to extend or modify the audit model, create a new class that\ninherits from `Audited::Audit`:\n```ruby\nclass CustomAudit < Audited::Audit\n  def some_custom_behavior\n    \""Hiya!\""\n  end\nend\n```\nThen set it in an initializer:\n```ruby\n# config/initializers/audited.rb\n\nAudited.config do |config|\n  config.audit_class = CustomAudit\nend\n```\n\n## Support\n\nYou can find documentation at: http://rdoc.info/github/collectiveidea/audited\n\nOr join the [mailing list](http://groups.google.com/group/audited) to get help or offer suggestions.\n\n## Contributing\n\nIn the spirit of [free software](http://www.fsf.org/licensing/essays/free-sw.html), **everyone** is encouraged to help improve this project. Here are a few ways _you_ can pitch in:\n\n* Use prerelease versions of Audited.\n* [Report bugs](https://github.com/collectiveidea/audited/issues).\n* Fix bugs and submit [pull requests](http://github.com/collectiveidea/audited/pulls).\n* Write, clarify or fix documentation.\n* Refactor code.\n"""
https://github.com/Caged/javascript-bits,null
https://github.com/sevenwire/forgery,null
https://github.com/Caged/groomlake,"""This code is OLD and may not work AT ALL anymore.  It was a crazy idea I had way back when.  \nAt one point in time it used to workto some extent.  It parses Photoshop Brush (ABR) files and \ngenerates PNG images.  It could also extract color information from color palette files.\n\nJust figured I'd Open Source it since I'm no longer doing anything with it and someone, somewhere \nmight find it useful.\n\nUse it under an MIT LICENSE"""
https://github.com/technicalpickles/ambitious-sphinx,"""= An Ambitious Sphinx Adapter\n\nI don't know about you, but I like me some sexy full-text searching.\n\n== The basics\n\nWant to find all meals that mention bacon?\n\n  Meal.select {'bacon'}\n\nWhat about bacon bits and sour cream?\n\n  Meal.select {'bacon bits' && 'sour cream'}\n\nMaybe with bacon in the name, or cheese in the recipe?\n\n  Meal.select {|m| m.name =~ 'bacon' || m.recipe =~ 'cheese'}\n\nCheese in the name, but not grilled?\n\n  Meal.select {|m| m.name =~ 'bacon' && m.name !~ 'grilled'}\n\n== Pagination\n\nYou're going to want to use pagination. Ultrasphinx, the underlying library, only supports it, as in, you can't just get all the objects matching your query. You _have_ to use paging.\n\nIt's pretty simple:\n\n  Meal.select {'bacon'}.page(2)\n  Meal.select {'bacon'}.page(3)\n\n== Big honking disclaimer\n\nWe're still learning a lot about how sphinx and ambition work, so things are likely to change a lot, and features are likely to be missing.\n\n== Getting Started\n\n\n=== Installing\n\n  sudo gem install ambitious-sphinx\n  \n=== Add it to your app\n    \nRequire our files somewhere, like at the end of config/environment.rb, maybe create config/initializers/sphinx.rb\n\n  require 'ultrasphinx'\n  require 'ambition/adapters/ambitious_sphinx'\n  \n=== Sphinx and Ultrasphinx\n    \nYou will also need to go through the motions of setting up ultrasphinx.\n\nThis includes:\n\n * Configuring/installing sphinx\n * Modifying your model to indicate what's to be indexed\n * Bootstrapping ultrasphinx\n \nAll this is discussed in detail in ultrasphinx's README\n\n== Playing with the code base\n\nIn addition to the other dependencies, you'll need to:\n\n  gem install echoe redgreen mocha test-spec\n  \nRun the tests with:\n  \n  rake test\n  \n\n== More information on Sphinx:\n\n -> http://www.sphinxsearch.com/\n -> http://blog.evanweaver.com/articles/2007/07/09/ultrasphinx-searching-the-world-in-231-seconds/\n -> http://blog.evanweaver.com/files/doc/fauna/ultrasphinx/files/README.html\n\n== More information on Ambition:\n\n-> http://ambition.rubyforge.org\n-> http://groups.google.com/group/ambition-rb/\n"""
https://github.com/lazyatom/soup,"""Soup is a bit of everything, summoned from nothing. Soup is like an imaginary friend - comforting, \nand will often talk to you, but when you look closely, they don't exist.\n\nTerrifying. And so:\n\n  require 'soup'\n  soup = Soup.new(File.join(\""soup\"", __FILE__))\n\n  soup << { \n    :name => \""James\"",\n    :skills => \""Bowstaff, nunchuck\"" \n  }\n\n  # ...much later...\n\n  s = soup['james']\n  s.skills # => \""Bowstaff, nunchuck\""\n\n  soup << {\n    :mane => \""Lush and thick\""\n    :teeth => \""Sharp and ready\""\n    :position => \""Above my bed!!!\"" \n  }\n\n\nThe point is that you can set any attribute on a Soup data, and it will be persisted without \ncare. With reckless abandon, really.\n\nThe data can be stored using anything - Soup doesn't really care much about the underlying \npersistence layer. I've written implementations using DataMapper, ActiveRecord and Sequel... \nthere are other implementations of course. Unknowable implementations. \nTerrifying implementations. You Fool! Warren is Dead!\n\n\n\n(c) 2008 James Adam, MIT LICENSE. Yeah.\n\n  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXP\n  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXY?\""\""\""  .\n  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXY?\""\""   ,;ciCCC\n  \""?YXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXYYY??\""\""   .,;iCCCCCCCCCC\n  .,.  `\""\""\""\""\""\""???YYYYYYYYYYXXXXXXXYYYYY???\""\""\""\""\""\""\""   ..,;ciiCCCCCCCCCCC''`\n  ```'`CCiiicccccccccc;;,,.    .,..,..,;cccciiiCCCCCCC????>''`````   .;ciCCC\n  Cic;,.   `''<<????CCCCCCCCCCCC?????''''''''`````'   ..,;;;ccciiiCCCCCCCCCC\n  CCCCCCCCCCCCcc;;;,,.       .,..,..,..,;;cciiiiCCCCCCCCCCCCCCCCCCCCC??>'`\n  ``''?CCCCCCCCCC\""'```''CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC??\""\""''``   _.,;cciCC\n  ic;;,. ````'<?Ciiccc;,,.  ````'''`CCCCCC''''''''`' .,;cciiiCCCCCCCCCC?\""'`\n  CCCCCCCCCiic;._  ```''\""<?CCC;;;,,,.,..,...,;;;;;;C777???CC'''''``'  _,xiXX\n  .  ```'''`CCCCCCCiicc;,,,,,..        ```````'            .,,,xiiXXXXXXXXXX\n  XXXXXxXx,,,.   ```````````````````   .,..,..,.xiXiiXiiXXXXXXXXXXXXXXXXXXXX\n  XXXXXXXXXXXXXXXXXXxXxxXxXXXXXxxXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXY??\""\""\""\n  \""\""\""?YXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXYY???\""\""\""\n  =          \""\""\""\""\""???YYXXXXXXXXXXXXXXXXXXXXXXXXXXYYY???\""\""                 ,;\n   -;ccccc;;,.,..            \""\""\""\""\""\""\""\""\""\""                          ,;ciCC'``'\n  ;;, ```'???CCCCC  `''--;CCicc;;,      .,;;,,,.   ..      .,;ciCCCCCCCicc;-\n  C'```CCiiiiiCCCCtCiicc;,.  ```' . .,;;iCCCCC'' .,;;cccc-''`CCCCCCCCCCCCC;;\n  CCCCc;,,.,;CCCcc,,,,..'' .;CC'`'CCCCCCCCCC'' ``' .,;;;cc===`CC''````````'\n  .,...```' .C.,.`\""\""\""\""?CCCCC'`CCC''''``'  .,.,;ciCCCCCC..,;cciiCtttCCCCCCCtt\n   ```'     `'`CCCCCCCCCCC' . `'       ```' .,. ```CCC''''`CCCCCCCCCCCCC?\""''\n  ..                           ``'                            ```'\n  $$$$$$$$$$$$ccc$$$$$$$$\""?hccc=Jcc$$hccccccc$$$$$$$$$$$$$cccccc,,,,,ccc,,..\n  $$$??hcccci???CCCCCC$$L ,$$$$c $$hcccccJ???LcccccccccJCCC???????CCCC??????\n  $$F `?$$$$$$$$$$$$$$$$. ,$$\""$$.?$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n  $$,. ,$$$$$$$$$$$$$$$$. ,$$ $$h $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$??????????$$\n  $$$h $$$$$$$$$$$$$$$$$$ $$$ ?$h ?$$$$$$$$$$$$$$$$$$$$$$$???izc?????????i??\n  ???\"" ?????$$$$$$$\""\""\""\""\""\""  \""\"" ?\""\"" `\""?\""\""\""$$$$$$$$??<Lr??cr?=\""\""    .  .      .\n  ,,,,,,,,,J$$$$$$$$,.,,,,,,,,..       ,$$$$$$P>JP\""       .,;;,.!!;,.!!!!!!!\n  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$C3$$  -'  --''`!!!!'`'   ..  `!\n  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$Ci??c,,,.,..,.            `````\n  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$JJCCCC????????$$????rrrcccc,\n  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$C<<$$$$$PF<$$$$\n  $$$$$cizccCCCCCCCCCcccc$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$?????)>>J$CLccc$??\""\""\n  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$????ii?iiJJJ$$??\""\""\""\n  $$$$$$$$$$$$$??$$$$????P$$$???iiiiicccccc<<????)Cicc$P\""\""      ..   .,;;!!!\n  $$$$$CCCCCCC>>J>>>>cccccc>>>??C????CC>cccJ$??\""\""\""\""\""         -``!!;!'  .!!!'\n  $$$$$??CCCCCCCCCCCff>>>>>J$$$P\""\""\""\""\""\""\""\""            ..,;;;;;;;!'`.,;;!'''\n  ??????????????\""\""\""\""\""'' `'              .,..,;;;;!!!'```..```' .,.,;;;- `,;'\n                      .,.    ,;;----'''''''```````'  `''`,;;!!'''`..,;;'' ,;\n  ---;;;;;;;-----'''''''''``'  --- `'  .,,ccc$$hcccccc,.  `' ,;;!!!'``,;;!!'\n  ;;;;,,.,;-------''''''' ,;;!!-    .zJ$$$$$$$$$$$$$$$$$$$c,. `' ,;;!!!!' ,;\n    ```'    -;;;!'''''-  `.,..   .zJ$$$$$$$$$$$$$$$$$$$$$$$$$$c, `!!'' ,;!!'\n  !!-  ' `,;;;;;;;;;;'''''```' ,c$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$c,  ;!!'' ,;\n  ,;;;!!!!!!!!''``.,;;;;!'`'  z$$$$$$$$???\""\""\""\""\""'.,,.`\""?$$$$$$$$$$$  ``,;;!!!\n  ;;..       --''```_..,;;!  J$$$$$$??,zcd$$$$$$$$$$$$$$$$$$$$$$$$h  ``'``'\n  ```'''   ,;;''``.,.,;;,  ,$$$$$$F,z$$$$$$$$$$$$$$$$$$$c,`\""\""?$$$$$h\n  !!!!;;;;,   --`!'''''''  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$h.`\""$$$$h .\n  `'''``.,;;;!;;;--;;   zF,$$$$$$$$$$?????$$$$$$$$$$$$$?????$$r ;?$$$ $.\n  !;.,..,.````.,;;;;  ,$P'J\""$$$$$$P\"" .,c,,.J$$$$$$$$$\""',cc,_`?h.`$$$$ $L\n  '``````'    .,..  ,$$\"". $ $$$$P\"",c$$$$$$$$$$$$$$$$',$$$$$$$$$$ $$$$ $$c,\n  !!!!!!!!!!!!!'''  J$',$ $.`$$P c$$$$$$$$$$$$$$$$$$,$$$$$$$$$$$ $$$$ $$$$C\n     ``            J$ ,$P $$ ?$',$$$$???$$$$$$$$$$$$$$$??\""\""\""?$$$ <$$$ $$$$$\n  c           ;,  z$F,$$  `$$ $ ?$\""      \""$$$.?$$$ $$$P c??c, ?$.<$$',$$$$$F\n  $$h.  -!>   ('  $\"" $F ,F ?$ $ F ,=\""?$$c,`$$F $$\""z$$',$' ,$$P $h.`$ ?$$$$$r\n  $$$$$hc,. ``'  J$ $P J$ . $$F L \"",,J$$$F <$hc$$ \""$L,`??????,J$$$.` z$$$$$\n  $$$$$$$$$$c,'' ?F,$',$F.: $$ c$c,,,,,c,,J$$$$$$$ ?$$$c,,,c$$$$$$F. $$$$$$\n  `\""$$$$$$$$$$$c, $$',$$ :: $$$$$$$$F\""',$$$$$$$$$$h ?$$$L;;$$$??$$$$ $$$$$$\n     \""?$$$$$$$$$$ $$$$$$ : .`F\""$$$$$$$$$$$$\""\""\""\""?\""\""\""h $$$$$$$\""$,J$$$$ $$$$$'\n        \""?$$$$$$$ $$$$$$.`.` h `$$$$$$$$$$$cccc$$c,zJ$$$$$P' $$$$$P',$$$$P\n  $.       `\""\""?$$ $$$$$$$  ` \""$c \""?$$$$$$$$$$$$??$$$$$$$$\"" ,J$$$P\"",J$$$$P\n  ..           `\"" ?$$$$$$h    ?$$c.`?$$$$$$$$$' . <$$$$$' ,$$$\""  ,$$$$$\""\n  !!>. .          `$$$$$$$h  . \""$$$c,\""$$$$$$$' `' `$$$P  ,$$$' ,c$$$$$'   ;!\n  ```<!!!>         `$$$$$$$c     \""$$$c`?$$$$$  : : $$$  ,$$P' z$$$$$$'   ;!!\n  $hc ```'  ;       `$$$$$$$.      ?$$c ?$$$$ .: : $$$  $$F ,J$$$$$$'   ;!!\n  .,..      '        `$$$$$$$       \""$$h`$$$$ .' ' $$$ ,$$ ,J$$$$$$'    !!!\n  ????P               `$$$$$$L       $$$ $$$F :.: J$$P J$F J$$$$$P     ;!!\n  -=<                  ?$$.\""$$       `$$ ?$$' `' z$$$F $P  $$$$$$'     !!'\n  cc                   `$$$c`?        ?$.`$$hc, cd$$F ,$'  $$$$$$     ;!!\n                        $$$$c         `$$c$$$$$$$$$\"",c$'   $$$$$$     `!!\n                        $$$$$          `?$$$$$$$$$$$$P'    $$$$$$> ..\n                        $$$$$            `\""?$$$$$$$P\""      $$$$$$L $$c,\n            !!         <$$$$$            zc,`\""\""\""',         <$$$$$$.`$$$$cc,\n            !!         J$$$$P            `$$$$$$$' !'       $$$$$$L `$$$$$$h\n           ;,          $$$$$L          `! J$$$$$',!!        $$$$$$$  `$$$$$$\n            '         <$$$$$.           ! $$$$$$ !!         ?$$$$$$   `$$$$$\n                     ,$$$$$$$c          `,`???? ;'         c,?$$$$'    `?$$$\n                     $$$$$$$??           `!;;;;!     .     `h.\""?$P      `$$$\n                    ,$$$$$$$h.            `'''      `'      `$$$P        `?$\n                     $$$$$$$$h                      `!'      `\""'           `\n                    `$$$$$$$$F          !;     !    ;,\n                     `$$$$$$$'         `!!>         `!\n  c,        ;,        `?$$$$P           !!>             .\n  $F        !!>         `\""\""'            `!!            ;!>    <-\n  $F       `!!'                      ;!; '   `!        <!>    ;\n  $F        `'      <!               !!!               !!>    !!\n  ?'       `'      !!!               !!!               !!>    !!\n           !!'    <!!               ;!!!               `'     ;\n          ;!!     !!                !!!!                      !'\n          !!!     `'                !!!                       '            ;\n          !!                       ;!!'                                    !\n                                   !!!                      ;!             !\n                                  <!!!                      )'            `!\n            ,;;>                 ;!!!                                     `!\n            `''                 ;!!!                     !                `!\n                ;!             ;!!!                                  ,$$c, `\n              !''             ;!!!           '                    ,c$$$$$$c.\n  >                       ;   !!!                                 ?$$$$$$$$$\n  !!>                   ;!! .!!!     .!>                           \""?$$$$$$$\n  <! `!         ,;     ;!!  !!!!     !!                              `\""?$$$$\n   . '          '    ;!!! .!!!!     !!   .                              `\""?$\n   `'               <!!' .!!!!!!   !!!'  !                     >           `\n                  .!!!  <!!'`!!! .!!!!;                   !!>\n                  !!!  <!!'  !! ;!!!!!!                   (' ;,\n                 <!!  !!!'  !!! !!!'!!!                   !> `!\n                 !!' !!!'  `!!';!>  !!                 <! `' `!  !>.\n                 ' ;<!!'  .!!! !!' <!'       ;        `!! ;  `!  !!!>\n              .<!>;!!!'   !!! `!! <!!                .. ' '      !!!' ;,\n             <!!! <!! ;   !!! !!>;!!''!             J$$c         `!!; !!>\n            ;!!! ;!! <!   !!> !! `!! !'            J$$$$hr        `'' !!!,;;\n            ;!!! !! <!!  <!!  !' ;!! '            <$$$$$$$.           <!!!'!\n            !!!  !;<!!'  !!! ;!  !!>              $$$$$$$$$$.          `'  !\n           `!!! !!!!!'   !!! !! `!!!              ?$$$$$$$??$c        !!>;\n           ;!! ;!!!!!   ;!!> !! <!!>               ?$$$$$$c,`$$.      `!!!\n           !!! !!! !'   `!!> !! !!!                 \""?$$$$$$ \""?$c      `<!\n          ;!!  !! ;!    !!!> ! ;!!!,                  \""$$$$$$c,\""?$c,\n          ;!!  !! ;!    !!!! ! `!!!!                    \""$$$$$$c ?$$h.\n          !!!> !! !!    !!!!    !!!                       \""?$$$$c \""$$$c,\n          !!!' '  !!    `!!!    `!                          \""$$$$h.`?$$$c,\n         <!!!>   <!!    `!!!     !>                          ?$$$$$c ?$$$$h.\n         `!!!    `!!     !!!     `'                           \""?$$$$h.`?$$$$\n          `!!>    !!     `!!                                    `?$$$$$$$$$$\n           `!'    !!      `'                                      \""$$$$$$$$$\n                  `!>                                               ?$$$$$$$\n                   `!                                                `\""?$$$$\n                    `-                ;!                                `\""$$\n                                                                          `?\n(http://www.edvard-munch.com/Paintings/other_artists/scream_ascii_3.htm)"""
https://github.com/collectiveidea/acts_as_geocodable,"""# acts_as_geocodable\n\n[![Gem Version](https://img.shields.io/gem/v/acts_as_geocodable.svg?style=flat)](http://rubygems.org/gems/acts_as_geocodable)\n[![Build Status](https://img.shields.io/travis/collectiveidea/acts_as_geocodable/master.svg?style=flat)](https://travis-ci.org/collectiveidea/acts_as_geocodable)\n[![Code Climate](https://img.shields.io/codeclimate/github/collectiveidea/acts_as_geocodable.svg?style=flat)](https://codeclimate.com/github/collectiveidea/acts_as_geocodable)\n[![Code Coverage](http://img.shields.io/codeclimate/coverage/github/collectiveidea/acts_as_geocodable.svg?style=flat)](https://codeclimate.com/github/collectiveidea/acts_as_geocodable)\n[![Dependency Status](https://img.shields.io/gemnasium/collectiveidea/acts_as_geocodable.svg?style=flat)](https://gemnasium.com/collectiveidea/acts_as_geocodable)\n\nacts_as_geocodable helps you build geo-aware applications. It automatically geocodes your models when they are saved, giving you the ability to search by location and calculate distances between records.\n\n**Beginning with version 2, we require Rails 3. Use one of the 1.0.x tags to work with Rails 2.3.**\n\nWe've adopted the ARel style syntax for finding records.\n\n## Usage\n\n```ruby\nevent = Event.create(\n  street: \""777 NE Martin Luther King, Jr. Blvd.\"",\n  locality: \""Portland\"",\n  region: \""Oregon\"",\n  postal_code: 97232\n)\n\nevent.geocode.latitude  # => 45.529100000000\nevent.geocode.longitude # => -122.644200000000\n\nevent.distance_to(\""49423\"") # => 1807.66560483205\n\nEvent.origin(\""97232\"", within: 50)\n\nEvent.origin(\""Portland, OR\"").nearest\n```\n\n## Installation\n\nInstall as a gem\n\n```\ngem install acts_as_geocodable\n```\n\nor add it to your Gemfile\n\n```ruby\ngem \""acts_as_geocodable\""\n```\n\n[Graticule](http://github.com/collectiveidea/graticule) is used for all the heavy lifting and will be installed too.\n\n## Upgrading\n\nBefore October 2008, precision wasn't included in the `Geocode` model. Make sure you add a string precision column to your geocode table if you're upgrading from an older version, and update Graticule.\n\nAlso, if you're upgrading from a previous version of this plugin, note that `:city` has been renamed to `:locality` to be consistent with Graticule 0.2. Create a migration that has:\n\n```ruby\nrename_column :geocodes, :city, :locality\n```\n\nAlso remember to change your mapping in your geocodable classes to use the `:locality` key instead of `:city`:\n\n```ruby\nclass Event < ActiveRecord::Base\n  acts_as_geocodable address: { street: :address1, locality: :city, region: :state, postal_code: :zip }\nend\n```\n\n## Configuration\n\nCreate the required tables\n\n```\nrails generate acts_as_geocodable\nrake db:migrate\n```\n\nSet the default geocoder in your environment.rb file.\n\n```ruby\nGeocode.geocoder = Graticule.service(:yahoo).new(\""your_api_key\"")\n```\n\nThen, in each model you want to make geocodable, add `acts_as_geocodable`.\n\n```ruby\nclass Event < ActiveRecord::Base\n  acts_as_geocodable\nend\n```\n\nThe only requirement is that your model must have address fields. By default, acts_as_geocodable looks for attributes called _street_, _locality_, _region_, _postal_code_, and _country_. To change these, you can provide a mapping in the `:address` option:\n\n```ruby\nclass Event < ActiveRecord::Base\n  acts_as_geocodable address: { street: :address1, locality: :city, region: :state, postal_code: :zip }\nend\n```\n\nIf that doesn't meet your needs, simply override the default `to_location` method in your model, and return a `Graticule::Location` with those attributes set.\n\nacts_as_geocodable can also update your address fields with the data returned from the geocoding service:\n\n```ruby\nclass Event < ActiveRecord::Base\n  acts_as_geocodable normalize_address: true\nend\n```\n\n## IP-based Geocoding\n\nacts_as_geocodable adds a `remote_location` method in your controllers that uses http://hostip.info to guess remote users location based on their IP address.\n\n```ruby\ndef index\n  @nearest = Store.origin(remote_location).nearest if remote_location\n  @stores = Store.all\nend\n```\n\nKeep in mind that IP-based geocoding is not always accurate, and often will not return any results.\n\n## Contributing\n\nIn the spirit of [free software](http://www.fsf.org/licensing/essays/free-sw.html), **everyone** is encouraged to help improve this project.\n\nHere are some ways **you** can contribute:\n\n* using alpha, beta, and prerelease versions\n* reporting bugs\n* suggesting new features\n* writing or editing documentation\n* writing specifications\n* writing code (**no patch is too small**: fix typos, add comments, clean up inconsistent whitespace)\n* refactoring code\n* closing [issues](https://github.com/collectiveidea/acts_as_geocodable/issues/)\n* reviewing patches\n\n## Submitting an Issue\n\nWe use the [GitHub issue tracker](https://github.com/collectiveidea/acts_as_geocodable/issues/) to track bugs\nand features. Before submitting a bug report or feature request, check to make sure it hasn't already\nbeen submitted. You can indicate support for an existing issuse by voting it up. When submitting a\nbug report, please include a [Gist](https://gist.github.com/) that includes a stack trace and any\ndetails that may be necessary to reproduce the bug, including your gem version, Ruby version, and\noperating system. Ideally, a bug report should include a pull request with failing specs.\n\n## Submitting a Pull Request\n\n1. Fork the project.\n2. Create a topic branch.\n3. Implement your feature or bug fix.\n4. Add specs for your feature or bug fix.\n5. Run `bundle exec rake`. If your changes are not 100% covered and passing, go back to step 4.\n6. Commit and push your changes.\n7. Submit a pull request. Please do not include changes to the gemspec, version, or history file. (If you want to create your own version for some reason, please do so in a separate commit.)\n\n### To Do\n\n* configurable formulas\n"""
https://github.com/collectiveidea/acts_as_money,"""= ActsAsMoney\n\nacts_as_money is a plugin that makes it easier to work with the money gem.\n\n  class Product < ActiveRecord::Base\n    money :price\n  end\n  \nThis assumes that there are 2 columns in the database, price_in_cents (integer) and currency (string).  These fields can be changed by setting the :cents and :currency options.  To use the default currency (USD), you can simply leave off :currency.\n\n  class Room < ActiveRecord::Base\n    money :rate, :cents => :rate_in_cents, :currency => :rate_currency\n    money :discount, :cents => :discount_in_cents, :currency => false\n  end\n\nacts_as_money allows you to pass a String, Fixnum, Float or Money object as a parameter to the setter, and it will call #to_money to convert it to a Money object.  This makes it convenient for using money fields in forms.\n\n  r = Room.new :rate => \""100.00\""\n  r.rate                            # returns <Money:0x249ef9c @currency=\""USD\"", @cents=10000>\n\n\n= Compatibility\n\nThis plugin is compatible with the current edge-rails that is slated to be 2.2. If you are using Rails <= 2.1, check out the \""rails-2.1\"" tag from git."""
https://github.com/jnewland/capsize,null
https://github.com/brosner/oebfare,null
https://github.com/josh/rails,"""## Welcome to Rails\n\nRails is a web-application framework that includes everything needed to\ncreate database-backed web applications according to the\n[Model-View-Controller (MVC)](http://en.wikipedia.org/wiki/Model-view-controller)\npattern.\n\nUnderstanding the MVC pattern is key to understanding Rails. MVC divides your\napplication into three layers, each with a specific responsibility.\n\nThe _Model layer_ represents your domain model (such as Account, Product,\nPerson, Post, etc.) and encapsulates the business logic that is specific to\nyour application. In Rails, database-backed model classes are derived from\n`ActiveRecord::Base`. Active Record allows you to present the data from\ndatabase rows as objects and embellish these data objects with business logic\nmethods. You can read more about Active Record in its [README](activerecord/README.rdoc).\nAlthough most Rails models are backed by a database, models can also be ordinary\nRuby classes, or Ruby classes that implement a set of interfaces as provided by\nthe Active Model module. You can read more about Active Model in its [README](activemodel/README.rdoc).\n\nThe _Controller layer_ is responsible for handling incoming HTTP requests and\nproviding a suitable response. Usually this means returning HTML, but Rails controllers\ncan also generate XML, JSON, PDFs, mobile-specific views, and more. Controllers load and\nmanipulate models, and render view templates in order to generate the appropriate HTTP response.\nIn Rails, incoming requests are routed by Action Dispatch to an appropriate controller, and\ncontroller classes are derived from `ActionController::Base`. Action Dispatch and Action Controller\nare bundled together in Action Pack. You can read more about Action Pack in its\n[README](actionpack/README.rdoc).\n\nThe _View layer_ is composed of \""templates\"" that are responsible for providing\nappropriate representations of your application's resources. Templates can\ncome in a variety of formats, but most view templates are HTML with embedded\nRuby code (ERB files). Views are typically rendered to generate a controller response,\nor to generate the body of an email. In Rails, View generation is handled by Action View.\nYou can read more about Action View in its [README](actionview/README.rdoc).\n\nActive Record, Action Pack, and Action View can each be used independently outside Rails.\nIn addition to them, Rails also comes with Action Mailer ([README](actionmailer/README.rdoc)), a library\nto generate and send emails; Active Job ([README](activejob/README.md)), a\nframework for declaring jobs and making them run on a variety of queueing\nbackends; and Active Support ([README](activesupport/README.rdoc)), a collection\nof utility classes and standard library extensions that are useful for Rails,\nand may also be used independently outside Rails.\n\n## Getting Started\n\n1. Install Rails at the command prompt if you haven't yet:\n\n        gem install rails\n\n2. At the command prompt, create a new Rails application:\n\n        rails new myapp\n\n   where \""myapp\"" is the application name.\n\n3. Change directory to `myapp` and start the web server:\n\n        cd myapp\n        rails server\n\n   Run with `--help` or `-h` for options.\n\n4. Using a browser, go to `http://localhost:3000` and you'll see:\n\""Welcome aboard: You're riding Ruby on Rails!\""\n\n5. Follow the guidelines to start developing your application. You may find\n   the following resources handy:\n    * [Getting Started with Rails](http://guides.rubyonrails.org/getting_started.html)\n    * [Ruby on Rails Guides](http://guides.rubyonrails.org)\n    * [The API Documentation](http://api.rubyonrails.org)\n    * [Ruby on Rails Tutorial](http://www.railstutorial.org/book)\n\n## Contributing\n\nWe encourage you to contribute to Ruby on Rails! Please check out the\n[Contributing to Ruby on Rails guide](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for guidelines about how to proceed. [Join us!](http://contributors.rubyonrails.org)\n\n## Code Status\n\n[![Build Status](https://travis-ci.org/rails/rails.svg?branch=master)](https://travis-ci.org/rails/rails)\n\n## License\n\nRuby on Rails is released under the [MIT License](http://www.opensource.org/licenses/MIT).\n"""
https://github.com/collectiveidea/calendar_builder,null
https://github.com/up_the_irons/credit_card_tools,"""Credit Card Tools\n=================\n\nThese are a set of ruby scripts for processing credit cards on the command\nline.\n\nSupported processors:\n\n  * PayPal (Business or Premier account required)\n\nRequirements\n------------\n\n  * RubyGems\n  * ActiveMerchant\n\nSetup\n-----\n\nCopy gateway.yml.example to gateway.yml and fill in the fields in that file.\n\nThere is one block for the \""live\"" environment, where real credit cards are\ncharged, and one block for the \""test\"" environment, which mocks everything\nthrough PayPal's Sandbox and no real money is exchanged.\n\nInstall ActiveMerchant::\n\n  gem install activemerchant\n\nIf the following files are not set executable, you should do::\n\n  chmod 755 charge.rb refund.rb\n\nUsage\n-----\n\nCommands:\n\n  * charge.rb\n  * refund.rb\n\nRun the commands without arguments to see the options.\n\nExample $1.00 charge::\n\n  ./charge.rb 1.00 4111111111111111 02/2012\n\nExample $1.00 refund::\n\n  ./refund.rb 1.00 2TL24258DY409104G\n\nThe second argument in the above example is the Auth ID of the original \ntransaction.\n\nThe output will be a nicely formatted response from PayPal.  The response is\nin YAML format, so you could do further processing with your own scripts \nrelatively easily.\n\nOther Processors\n----------------\n\nActiveMerchant supports a large list of credit card processors / gateways.\nTo use these tools with a gateway besides PayPal, modify gateway.rb to suit\nyour needs.  It should be relatively straight forward.\n\nSee: http://www.activemerchant.org\n\nAuthor\n------\n\nGarry C. Dolley\n\ngdolley [at] NOSPAM- ucla.edu\n\nAIM: garry97531\n\nIRC: I am up_the_irons in #ram, #git and #caboose on Freenode.\n\nCopyright\n---------\n\nCopyright (c) 2008 Garry C. Dolley\n\nThis is free software; you can redistribute it and/or modify it under the\nterms of the GNU General Public License as published by the Free Software\nFoundation; either version 2 of the License, or (at your option) any later \nversion.\n\nThis is distributed in the hope that it will be useful, but WITHOUT ANY\nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\nFOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\ndetails.\n\nYou should have received a copy of the GNU General Public License along with\nthis software; if not, write to the Free Software Foundation, Inc., 51 Franklin\nStreet, Fifth Floor, Boston, MA  02110-1301, USA\n"""
https://github.com/engineyard/eycap,null
https://github.com/bs/starling,"""= Name\n\nStarling - a light weight server for reliable distributed message passing.\n\n= Synopsis\n\n  # Start the Starling server as a daemonized process:\n  starling -h 192.168.1.1 -d\n\n  # Put messages onto a queue:\n  require 'memcache'\n  starling = MemCache.new('192.168.1.1:22122')\n  starling.set('my_queue', 12345)\n\n  # Get messages from the queue:\n  require 'memcache'\n  starling = MemCache.new('192.168.1.1:22122')\n  loop { puts starling.get('my_queue') }\n\n  # See the Starling documentation for more information.\n\n= Description\n\nStarling is a powerful but simple messaging server that enables reliable \ndistributed queuing with an absolutely minimal overhead. It speaks the\nMemCache protocol for maximum cross-platform compatibility. Any language\nthat speaks MemCache can take advantage of Starling's queue facilities.\n\n= Known Issues\n\n* Starling is \""slow\"" as far as messaging systems are concerned. In practice,\n  it's fast enough.\n\n= Authors\n\nBlaine Cook <romeda@gmail.com>\n\n= Copyright\n\nStarling - a light-weight server for reliable distributed message passing.\nCopyright 2007 Blaine Cook <blaine@twitter.com>, Twitter Inc.\n\n<<to be completed>>\n"""
https://github.com/sr/ape,"""== Atom Protocol Exerciser (APE)\n\nAPE is a sanity-checker for implementations of the Atom Publishing Protocol (AtomPub or APP). It is written in Ruby,\nand provides a Mongrel-based HTML interface describing its interactions with the APP implementation under test.\n\nFor more information about the history and impetus for the creation of APE, see Tim Bray's account here[http://www.tbray.org/ongoing/When/200x/2006/08/11/Meet-the-Ape].\n  \n== License\n\nCopyright (c) 2006 Sun Microsystems, Inc. All rights reserved. See the included LICENSE[link:/files/LICENSE.html] file for details.\n\n== Quick Start\n\nInstall APE via RubyGems:\n\n $ gem install ape\n \nNow, you should have the ape_server command available in your $PATH. Start the server with:\n\n $ ape_server\n \nThis will start the server in the foreground. You can access APE in your browser at http://localhost:4000\n\n== The Source\n\nTo access the latest source code for APE, see the project site at https://rubyforge.org/projects/ape\n"""
https://github.com/collectiveidea/clear_empty_attributes,null
https://github.com/collectiveidea/css_naked_day,"""CssNakedDay\n===========\n\nThis plugin disables all stylesheets on CSS Naked Day.\nhttp://naked.dustindiaz.com/\n\nAs long as you're using Rails' stylesheet_link_tag helper, your CSS will automatically be hidden on Naked Day (April 9, 2009).\n\nIt also adds a method to the Date class so you can check if a day is Naked Day.\n\nExample\n=======\n\n<% if Date.today.is_css_naked_day? %>\n  <h3>What happened to the design?</h3>\n  <p>To know more about why styles are disabled on this website visit the\n  <a href=\""http://naked.dustindiaz.com\"" title=\""Web Standards Naked Day Host Website\"">\n  Annual CSS Naked Day</a> website for more information.</p>\n<% end %>\n\n\nRead more at:\nhttp://daniel.collectiveidea.com/blog/tags/css_naked_day\n\n\nCopyright (c) 2007 Daniel Morrison, Collective Idea http://collectiveidea.com, released under the MIT license"""
https://github.com/collectiveidea/imap_authenticatable,"""IMAPAuthenticatable\n===================\n\nA quick library for authenticating against an IMAP server.\n\nSee http://daniel.collectiveidea.com/blog/tags/imap_authenticatable for more info.\n\nIt expects a model with a 'username' column. You must pass a host.\n\nExample:\n\nclass User < ActiveRecord::Base\n  imap_authenticatable :host => 'mail.example.com'\n  \n  ...\nend\n\n\nother options:\n\t:allow_new_users => true/false\n\t\tAlters whether to use find_by_username or find_or_create_by_username.\n\t\tThe default is true (find or create).\n\t:default_domain => 'example.com'\n\t\tWhat usernames have at the end.\n\t\tDefaults to the :host option.\n\t:append_domain => false/true\n\t\tShould we always add or remove the default_domain (with preceding '@) value?\n\t\tThe default is false (always remove).\n\t:ssl => false/true\n\t  Sets whether to connect via SSL (TLS).  You must have OpenSSL installed.\n\t  Defaults to false.\n\t:port => 143\n\t  Sets the port.  The :ssl option will set the port automatically unless you override it.\n\t  Defaults to 143 if :ssl => false, 993 if :ssl => true\n\t\t\n\nOther options may be added as need arises.\n\n\nTesting:\n\nTo mock the IMAP login in your tests, add the following line to the top of your test_helper.rb\n  require File.join(File.dirname(__FILE__), '..', 'vendor', 'plugins', 'imap_authenticatable', 'test', 'mocks', 'imap.rb')\n\nThis mock makes the valid password the reverse of the username (username.reverse)."""
https://github.com/collectiveidea/random_finders,"""RandomFinders\n=============\n\nAllows quick and easy fetching of random records, or records in random order.\n\nSimply pass the :random to the order in any finder method.\n\nExamples\n========\n\nFind a random article\n  Article.find(:first, :order => :random)\n  \nRandomize photos\n  Photo.find(:all, :order => :random)\n  \n\nCaveat\n======\n\nThis will not treat you nicely with large datasets.  \n\nRead about it here:\nhttp://daniel.collectiveidea.com/blog/tags/random_finders\n\n\n\nBased on an idea by Mike Burns\nhttp://mikeburnscoder.wordpress.com/2006/08/18/retrieving-random-elements-from-an-activerecord/\n\nCopyright (c) 2007 Daniel Morrison, Collective Idea (http://collectiveidea.com), released under the MIT license"""
https://github.com/macournoyer/invisible,"""= THE INVISIBLE FRAMEWORK\nInvisible is like a giant robot combining the\nawesomeness of Rails, Merb, Camping and Sinatra.\nExcept, it's tiny (100 sloc).\n\nIt's easy to deploy and get started with using the\nfriendly generator.\n\nGet started today!\n\n  invisible my_lil_app\n  cd my_lil_app\n  thin start config/rack.ru\n  edit app.rb\n\nOr, if you're really into tiny things:\n\n  invisible my_very_lil_app --flat\n\n== Build web apps in just a few lines\nThe app syntax looks a lot like Sinatra:\n\n  get \""/session/:value\"" do\n    session[:invisible] = params[:value]\n    render do\n      h2 \""I added this to the session for you:\""\n      pre params[:value].inspect\n      p { a \""Go back\"", :href => \""/\"" }\n    end\n  end\n\nYou can also render ERB, eRubis and Haml templates.\n\n== TATFT (aka Test all the fucking time)\nInvisible also comes with support for easy\ntesting, using Test::Unit or RSpec.\n\n  def test_should_get_root\n    assert get(\""/\"").ok?\n  end\n  \n  it \""should get /\"" do\n    get(\""/\"").should be_ok\n  end\n\n== The extras you were missing in a micro-framework\nInvisible has:\n* reloading\n* configurable multi-environment support\n* multi-app in the same VM\n* session support (Cookie, Memcache, etc.)\n* a love affair with Rack middlewares\n* another love affair with testing\n* load just what you need approach (low mem)\n* awesomeness builtin, twice!\n* all that under 100 LOC (+ taxes)\n\nI'm like, WOW! What are you waiting for?\nGo build the next Twitter now, mkay?\n\nRuby License, http://ruby-lang.org/en/LICENSE.txt\nInvisible is copyright Marc-Andre Cournoyer\nmacournoyer@gmail.com\n"""
https://github.com/shane/youtube-g,""""""
https://github.com/adelcambre/textilizefu,"""TextilizeFu\n\n  class Article < ActiveRecord::Base\n    textilize :body\n  end\n\nThis will convert the body from textile into html and store the result in body_html\n\nBased primarily off permalink_fu from Rick Olsen (technoweenie)"""
https://github.com/mtodd/halcyon,"""= Halcyon\n== JSON Application Framework\n\nA JSON Web Application Framework for developing lightweight applications\ninterfaced via JSON-encoded HTTP requests. This is ideal for back end\napplications serving functionality for other applications.\n\nHalcyon consists of two parts, the server application and the client. The\nserver application is similar to a Merb or Rails app, without the need for\nimplementing views, and the client is used to facilitate talking to the\napplication from other applications.\n\n\n== On Rack\n\nHalcyon is a Rack application, meaning that it can sit right along with any\nother Rack app, such as a Merb or Rails app, and can be manipulated by any\nkind of Rack middleware/filter. This means that interfacing with Halcyon in\nunconventional ways is trivial since the Rack specification makes communicating\nwith Rack apps dead simple.\n\n\n== Development\n\nHalcyon is actively being developed by a very small community of developers and\ncontributors. Halcyon has seen a good deal of paradigm shift up until the 0.5.0\nrelease, but with that release its internal API has stabilized and should\nremain fairly backwards compatible from here on.\n\nThe changes made on the way to the 0.5.0 codebase were to remove all of the\nserver-like code to make Halcyon more application-centric and also to model\napplication development and structure to be more Rails- or Merb-like, though\nthis was just the natural evolution of Halcyon's design.\n\n\n== Installation\n\nA Gem of Halcyon is available.  You can install it with:\n\n  $ sudo gem install halcyon\n\nThe latest development release can be installed with RubyGems:\n\n  $ sudo gem install halcyon --source http://halcyon.rubyforge.org/latest/\n\nAlternatively, you can install the latest development efforts from the git\nrepository, located at http://github.com/mtodd/halcyon:\n\n  $ git clone git://github.com/mtodd/halcyon.git\n  $ cd halcyon; rake install\n\nDon't forget to install the JSON gem for improved performance:\n\n  $ sudo gem install json\n\nMore in depth documentation can be found at\nhttp://halcyon.rubyforge.org/docs/installation.html.\n\n\n== Usage\n\nAfter installing a Halcyon app, you can generate a new app, similar to the\n<tt>rails</tt> or <tt>merb-gen app</tt> commands, with this:\n\n  $ halcyon init app_name\n\nThis will create a directory and generate a skeletal Halcyon application. You\ncan run this application without changing anything; here's how:\n\n  $ cd app_name\n  $ halcyon start -p 4647\n\nA great tutorial to dive right into using Halcyon and writing apps is located\nat http://halcyon.rubyforge.org/docs/tutorial.html. This will step you through\nwhat to do, what to expect, and what it means.\n\n\n== Contact\n\nPlease mail bugs, suggestions and patches to <mailto:chiology@gmail.com>.\n\nYou are also welcome to join the #halcyon channel on irc.freenode.net.\n\nOur website is up so stop by and check out what's going down. Our address is\nhttp://halcyon.rubyforge.org/. On there you will find information about our\nmailing list as well, so do stop by.\n\n\n== Thanks To\n\n* Bill Marquette, typo correction, reviewing examples\n* Elliott Cable, missing dependency, Thin testing\n* ramstedt, Mongrel on JRuby port numericality issue (#14)\n* Ben Simpson, PHP Client bug fixes\n* Eivind Uggedal, dependencies for Router support of resources\n\n\n== Links\n\nHalcyon:: <http://halcyon.rubyforge.org/>\nAurora:: <http://aurora.rubyforge.org/>\n\nRack:: <http://rack.rubyforge.org/>\nMerb:: <http://merbivore.com/>\nJSON:: <http://json.rubyforge.org/>\n\nMatt Todd:: <http://maraby.org/>\n"""
https://github.com/collectiveidea/with_action,"""= WithAction\n\nA respond_to style helper for doing different actions based on which request parameters are passed. Specifically, it is helpful if you want to use multiple form buttons on a page, such as \""Save\"", \""Save and Continue Editing\"", and \""Cancel\"".  with_action executes different blocks based on what the presence of request parameters.\n\n  def create\n    with_action do |a|\n      a.cancel { redirect_to articles_path }\n      a.any do\n        @article = Article.new(params[:article])\n        if @article.save\n          a.save { redirect_to article_path(@article) }\n          a.edit { redirect_to article_path(@article) }\n          a.approve do\n            @article.approve!\n            redirect_to article_path(@article)\n          end\n        else\n          render :action => 'new'\n        end\n      end\n    end\n  end\n  \nA block is invoked if a parameter with the same name exists and is not blank.  Here is an example of a form to submit to this action:\n\n  <%= submit_tag 'Save', :name => 'save' %>\n  <%= submit_tag 'Save & Continue Editing', :name => 'edit' %>\n  <%= submit_tag 'Save & Approve', :name => 'approve' %>\n  <%= submit_tag 'Cancel', :name => 'cancel' %>\n\nIf an @any@ block is present and no parameter that matches one of the other blocks, it is called by default, otherwise the first block will be called. The @any@ block is the only one that can have nesting and be called multiple times.\n\nIf a block is not passed to the action, then a method with the same name is called on the controller: \n\n  def update\n    with_action do |a|\n      a.publish\n      a.reject\n      a.any { redirect_to root_path }\n    end\n  end\n  \n  def publish\n    # \u2026\n  end\n  \n  def reject\n    # \u2026\n  end\n  \nWhich can be abbreviated as:\n\n  def update\n    with_action(:publish, :reject) do |a|\n      a.any { redirect_to root_path }\n    end\n  end\n\n(c) Copyright 2007 Brandon Keepers (brandon@opensoul.org)"""
https://github.com/anotherjesse/exception_logger,"""ExceptionLogger\n===============\n\nThe Exception Logger (forgive the horrible name) logs your Rails exceptions in the database and provides a funky web interface to manage them.\n\nFirst you need to generate the migration:\n\n  ./script/generate exception_migration\n\nNext, you'll need to include the ExceptionLoggable module into ApplicationController.  Once that's done you might want to modify key methods to customize the logging:\n\n  render_404(exception) - Shows the 404 template.\n  \n  render_500(exception) - Shows the 500 template.\n  \n  log_exception(exception) - Logs the actual exception in the database.\n  \n  rescue_action_in_public(exception) - Does not log these exceptions: ActiveRecord::RecordNotFound, ActionController::UnknownController, ActionController::UnknownAction\n\nAfter that, visit /logged_exceptions in your application to manage the exceptions.\n\nIt's understandable that you may want to require authentication.  Add this to your config/environments/production.rb:\n\n  # config/environments/production.rb\n  config.after_initialize do\n    require 'application' unless Object.const_defined?(:ApplicationController)\n    LoggedExceptionsController.class_eval do\n      # set the same session key as the app\n      session :session_key => '_beast_session_id'\n      \n      # include any custom auth modules you need\n      include AuthenticationSystem\n      \n      before_filter :login_required\n      \n      # optional, sets the application name for the rss feeds\n      self.application_name = \""Beast\""\n      \n      protected\n        # only allow admins\n        # this obviously depends on how your auth system works\n        def authorized?\n          current_user.is_a?(Admin)\n        end\n        \n        # assume app's login required doesn't use http basic\n        def login_required_with_basic\n          respond_to do |accepts|\n            # alias_method_chain will alias the app's login_required to login_required_without_basic\n            accepts.html { login_required_without_basic }\n            \n            # access_denied_with_basic_auth is defined in LoggedExceptionsController\n            # get_auth_data returns back the user/password pair\n            accepts.rss do\n              access_denied_with_basic_auth unless self.current_user = User.authenticate(*get_auth_data)\n            end\n          end\n        end\n        \n        alias_method_chain :login_required, :basic\n    end\n  end\n\nThe exact code of course depends on the specific needs of your application.\n\nCREDITS\n\nJamis Buck  - original exception_notification plugin\nRick Olson  - model/controller code\nJosh Goebel - design\n\nUPDATES\n\nChris Wanstrath - use will_paginate\nHenrik Nyh (DanceJam) - catch exceptions in development mode\n"""
https://github.com/jnunemaker/mirrored,"""= Mirrored\n\nMirrored is a really easy to use wrapper for the delicious api (http://del.icio.us/help/api) and magnolia's mirrored version (http://wiki.ma.gnolia.com/Mirror%27d_API).\n\n== Install\n\n\tsudo gem install mirrored -y\n\t\n== Usage\n\n1. Setup your connection to either :magnolia or :delicious.\n\n\tMirrored::Base.establish_connection(:magnolia, 'jnunemaker', 'password')\n\n2. Work the mirrored classes (Post, Tag, Update and Date)\t\n\n\t# => posts tagged ruby\n\tMirrored::Post.find(:get, :tag => 'ruby')\n\t\nYou can also manipulate tags, find out when your last update was and see information about your posting habits. See the rubyforge page for more information (http://mirrored.rubyforge.org)."""
https://github.com/benburkert/cruisecontrolrb,"""== CruiseControl.rb\n\nThis is a fork of CruiseControl.rb that supports the git SCM.  You'll need git installed to download this fork.\n\n=== github URL\n\n* git://github.com/benburkert/cruisecontrolrb.git\n\n=== Download from github\n\nType the following command to download the source\ngit clone git://github.com/benburkert/cruisecontrolrb.git\n\n=== What's this?\n\nCruiseControl.rb is a continuous integration tool. Its basic purpose in life is to alert members of a software project\nwhen one of them checks into a source control system something that breaks the build.\n\nCC.rb is easy to install, pleasant to use and simple to hack. It's written in Ruby.\n\n===Download the latest release from:\n\n* http://rubyforge.org/frs/?group_id=2918\n\n\n=== Project web site\n\n* http://cruisecontrolrb.thoughtworks.com\n\n\n===Project RubyForge site (for developers)\n\n* http://rubyforge.org/projects/cruisecontrolrb/\n\n\n===License:\n\n* Apache Software License 2.0\n\n\n(C) ThoughtWorks 2007\n"""
https://github.com/defunkt/facebox,"""# Facebox\n\nFacebox is a jQuery-based, Facebook-style lightbox which can display images, divs, or entire remote pages.\n\n[See it in action](http://defunkt.github.com/facebox/).\n\n![Sample Image](http://share.kyleneath.com/captures/Facebox_1.2-20100417-190352.jpg)\n\n[Download the latest release](http://github.com/defunkt/facebox/zipball/master)\n\n## Compatibility\n\nThis release relies on a lot of advanced CSS techniques (box-shadow, border-radius, RGBA). That being said, it's compatible with many browsers.\n\n* **Safari 4**\n* **Webkit Nightlies** (Chromium, Chrome) as of 4/17/10\n* **Firefox 3.5**\n* **IE8** (degraded experience)\n* **IE7** (degraded experience)\n* IE6 - I just don't care\n* Opera - I just don't care\n\n## Usage\n\nInclude jQuery, `src/facebox.js` and `src/facebox.css`. Then tell facebox where you've put `src/loading.gif` and `src/closelabel.png`\n\n    $.facebox.settings.closeImage = '/images/facebox/closelabel.png'\n    $.facebox.settings.loadingImage = '/images/facebox/loading.gif'\n\nCalling facebox() on any anchor tag will do the trick, it's easier to give your Faceboxy links a rel=\""facebox\""  and hit them all onDomReady.\n\n    jQuery(document).ready(function($) {\n      $('a[rel*=facebox]').facebox()\n    })\n\nAny anchor links with `rel=\""facebox\""` with now automatically use facebox:\n\n    <a href=\""#terms\"" rel=\""facebox\"">Terms</a>\n      Loads the #terms div in the box\n\n    <a href=\""terms.html\"" rel=\""facebox\"">Terms</a>\n      Loads the terms.html page in the box\n\n    <a href=\""terms.png\"" rel=\""facebox\"">Terms</a>\n      Loads the terms.png image in the box\n\n\n### Using facebox programmatically\n\n    jQuery.facebox('some html')\n    jQuery.facebox('some html', 'my-groovy-style')\n\nThe above will open a facebox with \""some html\"" as the content.\n\n    jQuery.facebox(function($) {\n      $.get('blah.html', function(data) { $.facebox(data) })\n    })\n\nThe above will show a loading screen before the passed function is called,\nallowing for a better ajaxy experience.\n\nThe facebox function can also display an ajax page, an image, or the contents of a div:\n\n    jQuery.facebox({ ajax: 'remote.html' })\n    jQuery.facebox({ ajax: 'remote.html' }, 'my-groovy-style')\n    jQuery.facebox({ image: 'stairs.jpg' })\n    jQuery.facebox({ image: 'stairs.jpg' }, 'my-groovy-style')\n    jQuery.facebox({ div: '#box' })\n    jQuery.facebox({ div: '#box' }, 'my-groovy-style')\n\n### Events\n\nWant to close the facebox?  Trigger the `close.facebox` document event:\n\n    jQuery(document).trigger('close.facebox')\n\nFacebox also has a bunch of other hooks:\n\n* `loading.facebox`\n* `beforeReveal.facebox`\n* `reveal.facebox` (aliased as `afterReveal.facebox`)\n* `init.facebox`\n* `afterClose.facebox`  (callback after closing `facebox`)\n\nSimply bind a function to any of these hooks:\n\n    $(document).bind('reveal.facebox', function() { ...stuff to do after the facebox and contents are revealed... })\n\n### Customization\n\nYou can give the facebox container an extra class (to fine-tune the display of the facebox) with the facebox[.class] rel syntax.\n\n    <a href=\""remote.html\"" rel=\""facebox[.bolder]\"">text</a>\n\n## Contact & Help\n\nIf you have questions, feel free to ask on the [Google Groups Mailing List](http://groups.google.com/group/facebox/). Alternatively if you find a bug, you can [open an issue](http://github.com/defunkt/facebox/issues).\n"""
https://github.com/collectiveidea/graticule,"""Graticule\n=========\n\n```\n  grat\u00b7i\u00b7cule |\u02c8grat\u0259\u02cckyo\u014dl|\n    Navigation. a network of parallels and meridians on a map or chart.\n```\n\nGraticule is a geocoding API for looking up address coordinates and performing distance calculations. It supports many popular APIs:\n\n* Mapbox\n* Yahoo\n* Google\n* MapQuest\n* Geocoder.ca\n* Geocoder.us\n* Geonames\n* SimpleGeo\n* Postcode Anywhere\n* MetaCarta\n* FreeThePostcode\n* LocalSearchMaps\n* Yandex\n\n### Installation\n\n```\ngem install graticule\n```\n\n### Usage\n\nThere is a companion Rails plugin called [acts_as_geocodable](https://github.com/collectiveidea/acts_as_geocodable) that makes geocoding seem like magic.\n\nGraticule exposes to main APIs: location search and distance calculations. Graticule also\nprovides a command line utility.\n\n#### Location Search / Geocoding\n\n```\nrequire 'rubygems'\nrequire 'graticule'\n\ngeocoder = Graticule.service(:google).new \""api_key\""\nlocation = geocoder.locate(\""61 East 9th Street, Holland, MI\"")\n```\n\nFor specific service documentation, please visit the [documentation](http://rdoc.info/github/collectiveidea/graticule).\n\n#### Distance Calculation\n\nGraticule includes 3 different distance formulas, Spherical (simplest but least accurate), Vincenty (most accurate and most complicated), and Haversine (somewhere inbetween). The default is Haversine. There are two ways to calculate the distance between two points.\n\nFirst is `Location#distance_to`:\n\n```\nholland = geocoder.locate(\""Holland, MI\"")\nchicago = geocoder.locate(\""Chicago, IL\"")\nholland.distance_to(chicago, :formula => :haversine) # or :spherical or :vincenty\n# => 101.997458788177\n```\n\nYou can also use the formula classes directly:\n\n```\nGraticule::Distance::Haversine.distance(holland, chicago)\n# => 101.997458788177\n```\n\nAll units are miles by default, but you can switch to kilometers with the `units` option\n\n```\nholland.distance_to(chicago, :units => :kilometers)\n#\nGraticule::Distance::Haversine.distance(holland, chicago, :kilometers)\n```\n\n\n#### Command Line\n\nGraticule includes a command line interface (CLI). The CLI does not currently support all of the implemented services.\n\n```\n$ geocode -s google -a [api_key] Washington, DC\nWashington, DC US\nlatitude: 38.895222, longitude: -77.036758\n```\n\n### Contributing\n\nIn the spirit of [free software](http://www.fsf.org/licensing/essays/free-sw.html), **everyone** is encouraged to help improve this project.\n\nHere are some ways you can contribute:\n\n* Reporting bugs\n* Suggesting new features\n* Writing or editing documentation\n* Writing specifications\n* Writing code (**no patch is too small**: fix typos, add comments, clean up inconsistent whitespace)\n* Refactoring code\n* Reviewing patches\n\n### Submitting an Issue\n\nWe use the [GitHub issue tracker](https://github.com/collectiveidea/graticule/issues) to track bugs and features. Before submitting a bug report or feature request, check to make sure it hasn't already been submitted. When submitting a bug report, please include a [Gist](https://gist.github.com/) that includes a stack trace and any details that may be necessary to reproduce the bug, including your gem version, Ruby version, and operating system.\n\n### Submitting a Pull Request\n\n1. Fork the project.\n2. Create a topic branch.\n3. Implement your feature or bug fix.\n4. Add specs for your feature or bug fix.\n5. Run `rake`. If your changes are not 100% covered and passing, go back to step 4.\n6. Commit and push your changes.\n7. Submit a pull request. Please do not include changes to the gemspec, version, or history file. (If you want to create your own version for some reason, please do so in a separate commit.)\n\n### Other Links\n\n[Blog posts about Graticule](http://opensoul.org/tags/geocoding)\n\n[Geocoder: Alternative Geocoding library](https://github.com/alex.../geocoder)\n\n\n"""
https://github.com/tommorris/pyprofile,null
https://github.com/drnic/newjs,null
https://github.com/haml/haml,"""# Haml\n\n[![Gem Version](https://badge.fury.io/rb/haml.svg)](http://rubygems.org/gems/haml)\n[![Build Status](https://travis-ci.org/haml/haml.svg?branch=master)](http://travis-ci.org/haml/haml)\n[![Code Climate](http://img.shields.io/codeclimate/github/haml/haml.svg)](https://codeclimate.com/github/haml/haml)\n[![Coverage Status](http://img.shields.io/coveralls/haml/haml.svg)](https://coveralls.io/r/haml/haml)\n[![Inline docs](http://inch-ci.org/github/haml/haml.png)](http://inch-ci.org/github/haml/haml)\n\nHaml is a templating engine for HTML. It's designed to make it both easier and\nmore pleasant to write HTML documents, by eliminating redundancy, reflecting the\nunderlying structure that the document represents, and providing an elegant syntax\nthat's both powerful and easy to understand.\n\n## Basic Usage\n\nHaml can be used from the command line or as part of a Ruby web framework. The\nfirst step is to install the gem:\n\n~~~sh\ngem install haml\n~~~\n\nAfter you write some Haml, you can run\n\n~~~sh\nhaml document.haml\n~~~\n\nto compile it to HTML. For more information on these commands, check out\n\n~~~sh\nhaml --help\n~~~\n\nTo use Haml programatically, check out the [YARD documentation](http://haml.info/docs/yardoc/).\n\n## Using Haml with Rails\n\nTo use Haml with Rails, simply add Haml to your Gemfile and run `bundle`.\n\n~~~ruby\ngem 'haml'\n~~~\n\nIf you'd like to replace Rails's Erb-based generators with Haml, add\n[haml-rails](https://github.com/indirect/haml-rails) to your Gemfile as well.\n\n## Formatting\n\nThe most basic element of Haml is a shorthand for creating HTML:\n\n~~~haml\n%tagname{:attr1 => 'value1', :attr2 => 'value2'} Contents\n~~~\n\nNo end-tag is needed; Haml handles that automatically. If you prefer HTML-style\nattributes, you can also use:\n\n~~~haml\n%tagname(attr1='value1' attr2='value2') Contents\n~~~\n\nAdding `class` and `id` attributes is even easier. Haml uses the same syntax as\nthe CSS that styles the document:\n\n~~~haml\n%tagname#id.class\n~~~\n\nIn fact, when you're using the `<div>` tag, it becomes _even easier_. Because\n`<div>` is such a common element, a tag without a name defaults to a div. So\n\n~~~haml\n#foo Hello!\n~~~\n\nbecomes\n\n~~~html\n<div id='foo'>Hello!</div>\n~~~\n\nHaml uses indentation to bring the individual elements to represent the HTML\nstructure. A tag's children are indented beneath than the parent tag. Again, a\nclosing tag is automatically added. For example:\n\n~~~haml\n%ul\n  %li Salt\n  %li Pepper\n~~~\n\nbecomes:\n\n~~~html\n<ul>\n  <li>Salt</li>\n  <li>Pepper</li>\n</ul>\n~~~\n\nYou can also put plain text as a child of an element:\n\n~~~haml\n%p\n  Hello,\n  World!\n~~~\n\nIt's also possible to embed Ruby code into Haml documents. An equals sign, `=`,\nwill output the result of the code. A hyphen, `-`, will run the code but not\noutput the result. You can even use control statements like `if` and `while`:\n\n~~~haml\n%p\n  Date/Time:\n  - now = DateTime.now\n  %strong= now\n  - if now > DateTime.parse(\""December 31, 2006\"")\n    = \""Happy new \"" + \""year!\""\n~~~\n\nHaml provides far more tools than those presented here. Check out the [reference\ndocumentation](http://haml.info/docs/yardoc/file.REFERENCE.html)\nfor full details.\n\n### Indentation\n\nHaml's indentation can be made up of one or more tabs or spaces. However,\nindentation must be consistent within a given document. Hard tabs and spaces\ncan't be mixed, and the same number of tabs or spaces must be used throughout.\n\n## Contributing\n\nContributions are welcomed, but before you get started please read the\n[guidelines](http://haml.info/development.html#contributing).\n\nAfter forking and then cloning the repo locally, install Bundler and then use it\nto install the development gem dependencies:\n~~~sh\ngem install bundler\nbundle install\n~~~\n\nOnce this is complete, you should be able to run the test suite:\n~~~sh\nrake\n~~~\n\nYou'll get a warning that you need to install haml-spec, so run this:\n\n~~~sh\ngit submodule update --init\n~~~\n\nAt this point `rake` should run without error or warning and you are ready to\nstart working on your patch!\n\nNote that you can also run just one test out of the test suite if you're working\non a specific area:\n\n~~~sh\nruby -Itest test/helper_test.rb -n test_buffer_access\n~~~\n\nHaml currently supports Ruby 2.0.0 and higher, so please make sure your changes run on 2.0+.\n\n## Team\n\n### Current Maintainers\n\n* [Akira Matsuda](https://github.com/amatsuda)\n* [Matt Wildig](https://github.com/mattwildig)\n* [Tee Parham](https://github.com/teeparham)\n* [Takashi Kokubun](https://github.com/k0kubun)\n\n### Alumni\n\nHaml was created by [Hampton Catlin](http://hamptoncatlin.com), the author of\nthe original implementation. Hampton is no longer involved in day-to-day coding,\nbut still consults on language issues.\n\n[Natalie Weizenbaum](http://nex-3.com) was for many years the primary developer\nand architect of the \""modern\"" Ruby implementation of Haml.\n\n[Norman Clarke](http://github.com/norman) was the primary maintainer of Haml from 2012 to 2016.\n\n## License\n\nSome of Natalie's work on Haml was supported by Unspace Interactive.\n\nBeyond that, the implementation is licensed under the MIT License.\n\nCopyright (c) 2006-2013 Hampton Catlin, Natalie Weizenbaum and the Haml team\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \""Software\""), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \""AS IS\"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"""
https://github.com/scharfie/slate,null
https://github.com/lancecarlson/kissgen,"""= KISS Generator\n\nKeep it stupid simple (or simple stupid) code generator. \n\n== Installation\n\n  gem install kissgen\n\n== API Usage\n\n  require \""kissgen\""\n\n  @generator = KISSGen.generator(\n                   :generator => \""/path/to/generator\"", \n                   :directory => \""/path/where/files/are/generated\"", \n                   :pretend   => true,\n                   :assignes  => {:my_name => \""lancelot\"", ...},\n                   :files     => {\""app\"", \""models\""}\n                  )\n\n Now perform the generation:\n\n   @generator.generate!\n\n Note that the last loaded generator is retrievable via:\n\n  @generator = KISSGen.generator # => Last loaded generator\n  \n  \nInstead of using @g.directory and @g.assign, you can also create a setup.rb file inside of your generator directory\nand run the instance methods directly from there. IE:\n  \nsetup.rb:\n  directory \""/app\""\n  file \""README\""\n  \n== Console Usage\n\n  kissgen -s /path/to/generator -t /path/where/files/are/generated\n\n== Repository\n\n  visit http://github.com/lancecarlson/kissgen/ or git clone git://github.com/lancecarlson/kissgen.git"""
https://github.com/tommorris/opml-schema,null
https://github.com/rsanheim/brain_buster,null
https://github.com/jnunemaker/scrobbler,null
https://github.com/halorgium/archangel,"""README"""
https://github.com/drnic/drnic_js_test_helpers,"""README"""
https://github.com/mojombo/vanhelsing,""""""
https://github.com/sferik/twitter,"""# The Twitter Ruby Gem\n\n[![Gem Version](https://badge.fury.io/rb/twitter.svg)][gem]\n[![Build Status](https://travis-ci.org/sferik/twitter.svg?branch=master)][travis]\n[![Maintainability](https://api.codeclimate.com/v1/badges/09362621ad91e8f599b3/maintainability)][maintainability]\n[![Coverage Status](https://coveralls.io/repos/github/sferik/twitter/badge.svg?branch=master)][coveralls]\n[![Inline docs](http://inch-ci.org/github/sferik/twitter.svg?style=shields)][inchpages]\n\n[gem]: https://rubygems.org/gems/twitter\n[travis]: https://travis-ci.org/sferik/twitter\n[maintainability]: https://codeclimate.com/github/sferik/twitter/maintainability\n[coveralls]: https://coveralls.io/r/sferik/twitter\n[inchpages]: http://inch-ci.org/github/sferik/twitter\n\nA Ruby interface to the Twitter API.\n\n## Installation\n    gem install twitter\n\n## CLI\nLooking for the Twitter command-line interface? It was [removed][] from this\ngem in version 0.5.0 and now exists as a [separate project][t].\n\n[removed]: https://github.com/sferik/twitter/commit/dd2445e3e2c97f38b28a3f32ea902536b3897adf\n[t]: https://github.com/sferik/t\n\n## Documentation\n[http://rdoc.info/gems/twitter][documentation]\n\n[documentation]: http://rdoc.info/gems/twitter\n\n## Examples\n[https://github.com/sferik/twitter/tree/master/examples][examples]\n\n[examples]: https://github.com/sferik/twitter/tree/master/examples\n\n## Announcements\nYou should [follow @gem][follow] on Twitter for announcements and updates about\nthis library.\n\n[follow]: https://twitter.com/gem\n\n## Mailing List\nPlease direct questions about this library to the [mailing list].\n\n[mailing list]: https://groups.google.com/group/twitter-ruby-gem\n\n## Apps Wiki\nDoes your project or organization use this gem? Add it to the [apps\nwiki][apps]!\n\n[apps]: https://github.com/sferik/twitter/wiki/apps\n\n## Configuration\nTwitter API v1.1 requires you to authenticate via OAuth, so you'll need to\n[register your application with Twitter][register]. Once you've registered an\napplication, make sure to set the correct access level, otherwise you may see\nthe error:\n\n[register]: https://apps.twitter.com/\n\n    Read-only application cannot POST\n\nYour new application will be assigned a consumer key/secret pair and you will\nbe assigned an OAuth access token/secret pair for that application. You'll need\nto configure these values before you make a request or else you'll get the\nerror:\n\n    Bad Authentication data\n\nYou can pass configuration options as a block to `Twitter::REST::Client.new`.\n\n```ruby\nclient = Twitter::REST::Client.new do |config|\n  config.consumer_key        = \""YOUR_CONSUMER_KEY\""\n  config.consumer_secret     = \""YOUR_CONSUMER_SECRET\""\n  config.access_token        = \""YOUR_ACCESS_TOKEN\""\n  config.access_token_secret = \""YOUR_ACCESS_SECRET\""\nend\n```\n\n## Usage Examples\nAfter configuring a `client`, you can do the following things.\n\n**Tweet (as the authenticated user)**\n\n```ruby\nclient.update(\""I'm tweeting with @gem!\"")\n```\n**Follow a user (by screen name or user ID)**\n\n```ruby\nclient.follow(\""gem\"")\nclient.follow(213747670)\n```\n**Fetch a user (by screen name or user ID)**\n\n```ruby\nclient.user(\""gem\"")\nclient.user(213747670)\n```\n**Fetch a cursored list of followers with profile details (by screen name or user ID, or by implicit authenticated user)**\n\n```ruby\nclient.followers(\""gem\"")\nclient.followers(213747670)\nclient.followers\n```\n**Fetch a cursored list of friends with profile details (by screen name or user ID, or by implicit authenticated user)**\n\n```ruby\nclient.friends(\""gem\"")\nclient.friends(213747670)\nclient.friends\n```\n\n**Fetch the timeline of Tweets by a user**\n\n```ruby\nclient.user_timeline(\""gem\"")\nclient.user_timeline(213747670)\n```\n**Fetch the timeline of Tweets from the authenticated user's home page**\n\n```ruby\nclient.home_timeline\n```\n**Fetch the timeline of Tweets mentioning the authenticated user**\n\n```ruby\nclient.mentions_timeline\n```\n**Fetch a particular Tweet by ID**\n\n```ruby\nclient.status(27558893223)\n```\n**Collect the three most recent marriage proposals to @justinbieber**\n\n```ruby\nclient.search(\""to:justinbieber marry me\"", result_type: \""recent\"").take(3).collect do |tweet|\n  \""#{tweet.user.screen_name}: #{tweet.text}\""\nend\n```\n**Find a Japanese-language Tweet tagged #ruby (excluding retweets)**\n\n```ruby\nclient.search(\""#ruby -rt\"", lang: \""ja\"").first.text\n```\nFor more usage examples, please see the full [documentation][].\n\n## Streaming\nSite Streams are restricted to whitelisted accounts. To apply for access,\n[follow the steps in the Site Streams documentation][site-streams]. [User\nStreams][user-streams] do not require prior approval.\n\n[site-streams]: https://dev.twitter.com/streaming/sitestreams#applyingforaccess\n[user-streams]: https://dev.twitter.com/streaming/userstreams\n\n**Configuration works just like `Twitter::REST::Client`**\n\n```ruby\nclient = Twitter::Streaming::Client.new do |config|\n  config.consumer_key        = \""YOUR_CONSUMER_KEY\""\n  config.consumer_secret     = \""YOUR_CONSUMER_SECRET\""\n  config.access_token        = \""YOUR_ACCESS_TOKEN\""\n  config.access_token_secret = \""YOUR_ACCESS_SECRET\""\nend\n```\n\n**Stream a random sample of all tweets**\n\n```ruby\nclient.sample do |object|\n  puts object.text if object.is_a?(Twitter::Tweet)\nend\n```\n\n**Stream mentions of coffee or tea**\n\n```ruby\ntopics = [\""coffee\"", \""tea\""]\nclient.filter(track: topics.join(\"",\"")) do |object|\n  puts object.text if object.is_a?(Twitter::Tweet)\nend\n```\n\n**Stream tweets, events, and direct messages for the authenticated user**\n\n```ruby\nclient.user do |object|\n  case object\n  when Twitter::Tweet\n    puts \""It's a tweet!\""\n  when Twitter::DirectMessage\n    puts \""It's a direct message!\""\n  when Twitter::Streaming::StallWarning\n    warn \""Falling behind!\""\n  end\nend\n```\n\nAn `object` may be one of the following:\n* `Twitter::Tweet`\n* `Twitter::DirectMessage`\n* `Twitter::Streaming::DeletedTweet`\n* `Twitter::Streaming::Event`\n* `Twitter::Streaming::FriendList`\n* `Twitter::Streaming::StallWarning`\n\n## Ads\n\nWe recommend using the [Twitter Ads SDK for Ruby][ads] to interact with the Twitter Ads API.\n\n[ads]: http://twitterdev.github.io/twitter-ruby-ads-sdk/\n\n## Object Graph\n![Entity-relationship diagram][erd]\n\n[erd]: https://cdn.rawgit.com/sferik/twitter/master/etc/erd.svg \""Entity-relationship diagram\""\n\nThis entity-relationship diagram is generated programatically. If you add or\nremove any Twitter objects, please regenerate the ERD with the following\ncommand:\n\n    bundle exec rake erd\n\n## Supported Ruby Versions\nThis library aims to support and is [tested against][travis] the following Ruby\nversions:\n\n* Ruby 2.3\n* Ruby 2.4\n* Ruby 2.5\n* JRuby 9.1.9.0\n\nIf something doesn't work on one of these versions, it's a bug.\n\nThis library may inadvertently work (or seem to work) on other Ruby versions,\nhowever support will only be provided for the versions listed above.\n\nIf you would like this library to support another Ruby version or\nimplementation, you may volunteer to be a maintainer. Being a maintainer\nentails making sure all tests run and pass on that implementation. When\nsomething breaks on your implementation, you will be responsible for providing\npatches in a timely fashion. If critical issues for a particular implementation\nexist at the time of a major release, support for that Ruby version may be\ndropped.\n\n## Versioning\nThis library aims to adhere to [Semantic Versioning 2.0.0][semver]. Violations\nof this scheme should be reported as bugs. Specifically, if a minor or patch\nversion is released that breaks backward compatibility, that version should be\nimmediately yanked and/or a new version should be immediately released that\nrestores compatibility. Breaking changes to the public API will only be\nintroduced with new major versions. As a result of this policy, you can (and\nshould) specify a dependency on this gem using the [Pessimistic Version\nConstraint][pvc] with two digits of precision. For example:\n\n    spec.add_dependency 'twitter', '~> 6.0'\n\n[semver]: http://semver.org/\n[pvc]: http://guides.rubygems.org/patterns/#pessimistic-version-constraint\n\n## Copyright\nCopyright (c) 2006-2016 Erik Michaels-Ober, John Nunemaker, Wynn Netherland, Steve Richert, Steve Agalloco.\nSee [LICENSE][] for details.\n\n[license]: LICENSE.md\n"""
https://github.com/collectiveidea/tinder,null
https://github.com/jnunemaker/lorem,"""== Lorem by John Nunemaker\n\nLorem is a simple gem for outputing lorem ipsum text. I got tired of opening a browser, going to lipsum.com, filling out a form and waiting for it to submit. Now you can get all that lorem goodness from the command line. Yehaw!\n\n== Usage\n\nUsage: lorem [number] [type] (ie: lorem 5 paragraphs)\n - Number defaults to 1 if no parameters given\n - Type defaults to paragraphs\n - Available Types:\n   - paragraphs\n   - words\n   - chars\n   - characters\n   \n   lorem -p # will paste default to pasteboard on OSX\n   \n== Docs\n\nhttp://rdoc.info/projects/jnunemaker/lorem"""
https://github.com/halorgium/god,"""god\n    by Tom Preston-Werner\n       Kevin Clark (kqueue/netlink support)\n       \n    http://god.rubyforge.org\n\n== DESCRIPTION:\n  \nGod is an easy to configure, easy to extend monitoring framework written \nin Ruby.\n\nKeeping your server processes and tasks running should be a simple part of \nyour deployment process. God aims to be the simplest, most powerful \nmonitoring application available.\n\n== DOCUMENTATION:\n\nSee online documentation at http://god.rubyforge.org\n\n== COMMUNITY:\n\nSign up for the god mailing list at http://groups.google.com/group/god-rb\n\n== INSTALL:\n\n  $ sudo gem install god\n  \n== CONTRIBUTE:\n\nLatest code is available at http://github.com/mojombo/god\n\nThe 'master' branch can be cloned with:\n\n  $ git clone git://github.com/mojombo/god.git\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) 2007 Tom Preston-Werner\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"""
https://github.com/bryanl/linthicum,"""== Welcome to Linthicum\n\nLithicum is attempt at creating a blog engine to work my way.\n\n== External dependencies\n\nhpricot 0.6"""
https://github.com/defunkt/matzbot,"""**********************\n   Plugin API Howto\n (so we don't forget)\n**********************\n\nTypical plugin:\n\n  module MatzBot::Commands\n    needs_gem 'hpricot' => [ :tinyurl, :get_tinyurl ]\n\n    def tinyurl(data)\n      say \""Here it is! #{get_tinyurl(data.first)}\""\n    rescue\n      say \""No, no that's not gonna work.\""\n    end\n\n  private\n    def get_tinyurl(url)\n      return if url.empty?\n\n      res = Net::HTTP.post_form(URI.parse('http://tinyurl.com/create.php'), { 'url' => url })\n      doc = Hpricot(res.body)\n      ((doc/:blockquote).last/:b).innerHTML\n    end\n  end\n\n- New methods added to MatzBot::Commands show up as commands\n\n- If you want to add methods which aren't bot commands, make them protected or private.\n\n- Methods must accept one argument, an array of words said after the command.\n\n- If you need to require a gem, use needs_gem like above.  Pass it the gem name and all\n  the methods that depend on it.\n\n- If you need to keep around data, use the `session' hash.\n    session[:my_plugin] = true\n    session[:my_plugin]\n\n- You can use `reply' like say, except it will prefix your command with the user's name.\n    <defunkt> hey bot\n    <matzbot> defunkt: hey  # => using reply 'hey'\n\n- You can use `pm' to send a private message to whoever made a request of you.  Use it like `say.'\n\n- The above plugin would be triggered like this:\n    <irc_dude> tinyurl http://myurl.com\n    <matzbot> Here it is!  http://tinyurl.com/fz3\n\n- You get these methods in the Commands API:\n  - puts(string to say)\n  - reply(string to say)\n  - pm(sting to pm) [your bot must be ident'd on most networks for this to work]\n  - action(string to emote)\n  - config -- hash of runtime configuration options\n  - socket -- direct access to the socket, if you need it\n\n- Put plugins in ~/.matzbot and name them whatever.rb.\n\n=> Evan Weaver && Chris Wanstrath\n>> %w[ http://blog.evanweaver.com http://errtheblog.com ]\n"""
https://github.com/jnunemaker/googlebase,"""DEAD AND UNMAINTAINED\n\nGoogle Base Class is a base for authenticating to google and making requests to google services.\n\n=Installation\n\nsudo gem install googlebase\n\n=Usage\n\n===Establish A Connection\n\nThe code below shows how to use the gem by itself. It checks if username and password are correct (raising Google::LoginError on FAIL) and stores the session id internally. Then you can make requests and the session id is automatically passed in a cookie.\n\n\trequire 'google/base'\n\tGoogle::Base.establish_connection('username', 'password')\n\tGoogle::Base.get('http://google.com/reader/path/to/whatever/')\n\tGoogle::Base.get('https://google.com:443/analytics/home/') # to make an ssl request\n\n===Inheritance\n\nThis example takes things a bit farther and shows how to use this class simply as a base to get some methods for free and then wrap whatever google service you would like.\n\t\n\trequire 'google/base'\n\tGoogle::Base.establish_connection('username', 'password')\n\tmodule Google\n\t  module Reader\n\t    class Base < Google::Base\n\t      class << self\n\t        def get_token\n\t          get(\""http://www.google.com/reader/api/0/token\"")\n\t        end\n\t      end\n\t    end\n\t  end\n\tend\n\n\tputs Google::Reader::Base.get_token\n"""
https://github.com/tommorris/reddy,"""This library is deprecated.\n\nTo use RDF in Ruby, use [RDF.rb](http://rdf.rubyforge.org/).\n"""
https://github.com/adamwiggins/rush,null
https://github.com/alexvollmer/pci4r,"""= pci4r\n'pci4r' is a library of concepts covered in Toby Seagaran's \""Programming\nCollective Intelligence\"". The idea is not to slavishly port Toby's code,\nbut to provide the same tools in Ruby for others to use.\n\nThis code is brought to you by the following international conspirators:\n  * Jesse Clark\n  * Sandro Paganotti\n  * Mike Mondragon\n  * Alex Vollmer\n  * Damiano Zanisi\n\n(c) 2008\n\nYou can find the latest code at http://github.com/alexvollmer/pci4r/tree/master."""
https://github.com/defunkt/ike,"""________________\nike: rake for io\n----------------\n\nThis is how I'm learning Io.  By writing code, y'know.\n\n>> chris@ozmm.org\n=> http://github.com/defunkt/ike \n"""
https://github.com/jnunemaker/googlereader,"""DEAD AND UNMAINTAINED\n\n= Installation\n\nsudo gem install googlereader\n\n= Usage\n\n  require 'google/reader'\n  Google::Reader::Base.establish_connection('username', 'password')\n\n  # => all feeds and labels unread counts\n  pp Google::Reader::Count.all\n\n  # => all unread counts for labels\n  pp Google::Reader::Count.labels\n\n  # => all unread counts for feeds\n  pp Google::Reader::Count.feeds\n\n  # => all items for a label\n  pp Google::Reader::Label.all\n  \n  puts 'Links'\n  # 5 latest unread items\n  unread = Google::Reader::Label.new('links').entries(:unread, :n => 5) \n  unread.each { |p| puts p.title }\n  \n  puts 'Using Continuation'\n  # next 5 latest items after the unread above\n  more_unread = Google::Reader::Label.new('links').entries(:unread, :n => 5, :c => unread.continuation) \n  more_unread.each { |p| puts p.title }\n\t\n= Notes\n\nI'm using the following links below as documentation (and also a bit of reverse engineering with Firebug) until google releases an official and documented api:\n\n* http://code.google.com/p/pyrfeed/wiki/GoogleReaderAPI\n* http://blog.gpowered.net/2007/08/google-reader-api-functions.html\n"""
https://github.com/joshuamckenty/elderbrowser,"""# ElderBrowser\n\n[![wercker status](https://app.wercker.com/status/b9c8d0bb3354d9ebf17c0a97eae317e1/m \""wercker status\"")](https://app.wercker.com/project/bykey/b9c8d0bb3354d9ebf17c0a97eae317e1)\n\nStarting from a chromium build as per\nhttp://dev.chromium.org/developers/how-tos/get-the-code\nAlso looked at CEF https://code.google.com/p/chromiumembedded/,\nfor later research.\n\nUsing @wercker for build and deployment pipelining.\nInstalled https://atom.io/packages/wercker-status so I can keep an eye on it.\nThen I installed the command line tools following\n http://devcenter.wercker.com/articles/cli/installation.html\n\n\n - http://www.ehow.com/info_8551183_colors-elderly.html\n - http://www.paciellogroup.com/resources/contrastanalyser/\n"""
https://github.com/jnewland/github-campfire,"""github-campfire\n===============\n\nToss your github pushes to Campfire\n\nrequirements\n============\nsudo gem install json tinder (sinatra|merb-core)\n\ninstructions\n============\ncp config.yml.example config.yml\nvim config.yml\n# sinatra\nruby servers/sinatra.rb\n# merb-core\nmerb -I servers/merb-core.rb"""
https://github.com/sr/merb-more,""""""
https://github.com/mudge/blankable,null
https://github.com/psq/mephisto-erb-templates-plugin,null
https://github.com/jnicklas/merb-more,""""""
https://github.com/chneukirchen/rubyports,"""= RubyPorts -- a hookin-based ports system for Ruby\n\nCopyright (C) 2008 Christian Neukirchen <purl.org/net/chneukirchen>\n\nRubyPorts is freely distributable under the terms of an MIT-style license.\nSee COPYING or http://www.opensource.org/licenses/mit-license.php.\n\n== How to install\n\nRun <tt>hook-bin.rb</tt> and add the <tt>bin</tt> directory to your path.\n\nYou need curl(1) to fetch packages over HTTP.\nYou need tar(1) to unpack packages.\nYou need svn, darcs, and git to check out package repositories.\n\nYou need a development tool chain installed if you want to build\nextensions.  RubyPorts does not provide binaries.\n\n== How to use\n\nUsually, you will want to use RubyPorts directly from the Git checkout.\nPeriodically call <tt>git pull</tt> to keep your ports tree fresh.\n\nUse <tt>ls -1 ports/*/*.rport</tt> to get a list of available ports.\n\nTo install a port, simply type <tt>hook-get.rb /path/to/portsfile.rport</tt>\nto automatically download, build and hookin the port.  Dependencies\nwill be installed automatically if possible.  You can also try to type\n<tt>hook-get.rb portname</tt> and hook-get will try to figure out what\nyou want to install.  Note that this can install unstable and even\nbroken development versions of your code; you may wish to provide a\nversion number as well.\n\nPeriodically call <tt>hook-bin.rb</tt> to update the symlinks in\n<tt>bin</tt>.\n\nSet the environment variable $RUBYPORTS to the full path of the\n\""ports\"" directory if you want to call hook-get from any location.\n\n== How RubyPorts works\n\nEvery port consists of a .rport-file that contains download and\nbuilding instructions.  It looks like this:\n\n    # A package-line declaring the package name and version (no\n    # version if it packages the trunk).\n    # This defines the pkgpath as \""mongrel-1.1.3\"".\n    package 'mongrel', '1.1.3'\n\n    # A list of dependencies, as by the versioning convention.\n    depend 'fastthread-1.0.1...'\n    depend 'daemons-1.0.3...'\n\n    # A source, which can be:\n    # tar_gz URL:: a tar.gz unpacking(!) into pkgpath\n    # tar_bz2 URL:: a tar.bz2 unpacking(!) into pkgpath\n    # gem URL:: a URL to a .gem file unpacked to pkgpath.\n    # git URL, head=\""HEAD\"":: a git checkout of the respective head to pkgpath\n    # svn URL:: a SVN checkout of the URL to pkgpath\n    # darcs URL, tag=nil:: a Darcs checkout of the repo (possibly of a\n    #                      tag) to pkgpath\n    tar_gz \""http://rubyforge.org/frs/download.php/30048/mongrel-1.1.3.tgz\""\n\n    # Optional build commands, run in pkgpath\n    build \""ruby setup.rb config\""\n    build \""ruby setup.rb setup\""\n\n    # A optional \""hookin add\"" call, defaulting to \""hookin add $pkgpath\n    # $pkgpath/lib\"" if not mentioned.\n    hookin pkgpath, [pkgpath+\""/lib\"", pkgpath+\""/ext/http11\""]\n\n== RubyPorts port naming conventions\n\n* foo.rport will install the current development branch from the repository.\n* foo-VERSION.rport will install a release VERSION.\n\n== RubyPorts versioning conventions\n\n* foo means any version of foo.\n* foo-1.0 means any version of foo prefixed with \""1.0\"".\n* foo-1.0... means any version of foo starting from \""1.0\"".\n* foo-1.0.1...foo-2 means any version of foo starting from \""1.0.1\""\n  up to, but not including any version starting with 2.\n\n== Caveat user\n\nPlease take note of these things:\n\n* RubyPorts is utterly alpha.  There is zero error handling as of now.\n  If it breaks you get to keep both pieces.\n\n* Therefore, consider using a hookin.db on its own for RubyPorts.\n\n== Contact\n\nPlease mail bugs, suggestions and patches to\n<mailto:chneukirchen@gmail.com>.\n\nGit repository (\""git send-email\"" is welcome for patches):\ngit clone http://git.vuxu.org/rubyports.git\ngit clone git://github.com/chneukirchen/rubyports.git\n\nPatches contributing a port are welcome *iff*\n* the patch only touch/add the desc and PORT.rport files.\n* the patch is titled \""Added port PORT-VERSION\"" or \""Update port\n  PORT-VERSION\"".\n* all dependencies are already in RubyPorts or contributed as well.\n\n== Thanks to\n\n* Michael Fellinger, for help with development.\n* pkgsrc/DarwinPorts/OpenBSD ports/portage for inspiration.\n* Paul Feyerabend, for making me open my eyes.\n\n== Copyright\n\nCopyright (C) 2008  Christian Neukirchen <http://purl.org/net/chneukirchen>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \""Software\""), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \""AS IS\"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\nTHE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"""
https://github.com/DocSavage/rails-authorization-plugin,null
https://github.com/lypanov/wordcram,""""""
https://github.com/jnicklas/merb-core,"""merb-core is a new branch of Merb (also referred to as merb-next or the 0.9 series) which aims to provide a stable, stripped down API for a future Merb 1.0 release.\n\nThis branch is based off the 0.5 release series but with significant rewrites.\n\nGoals of this release:\n\n  * Stabilize the @public interface methods to provide for a more consistent application development experience.\n  * Remove features until nothing except a central application API is left\n  * Improve comments on methods using a standard documentation methodology as described in DOCUMENTATION_STANDARDS\n  * Separate the tests into two sections... \""private\"" and \""public\""\n    * Public methods are methods tagged with @public that will be part of the standard, stable Merb API\n    * Private methods are implementation methods that might \n  * Implement a new render API\n  * Build more extensions to regain selected features when needed\n  \nTo familiarize yourself with how a merb-core application might look,\nuse merb-gen (from merb-more) to generate a few apps:\n$ merb-gen app myapp                   # a \""normal\"" merb app\n$ merb-gen app myapp --flat            # a flattened app\n$ merb-gen app myapp --very-flat       # a single-file app\n\n"""
https://github.com/ivey/merb-for-rails,"""Moved to separate repos\n\nhttp://github.com/ivey/merb_has_flash\nhttp://github.com/ivey/merb_has_rails_plugins\n"""
https://github.com/raymorgan/merl,""""""
https://github.com/pjhyett/errcount,null
https://github.com/bigfleet/blanket,"""Welcome to Blanket!\n\nhttps://github.com/bigfleet/blanket/wikis is the canonical online source for info on Blanket.\n\nh2. Version History\n\nh3. Current: 0.1.1\n\nMajor element in this release is new RDoc\n\nh3. Previous\n\n* 0.1.0\n\nAdded new sources and sinks."""
https://github.com/sr/dumbapp,"""DumbApp is a simple AtomPub (RFC 5023) implementation based on Mongrel and ActiveRecord.\n\n== Licence\n\nDumbApp is copyright 2008 Simon Rozet. It is licensed under the MIT licence.\nSee the included LICENSE file for details.\n\n== Usage\n\n  % git clone git://atonie.org/dumbapp.git\n  % cd dumbapp.git\n  % cp config.yml.example config.yml\n  % ./bin/dumbapp config.yml\n\n== Required gems\n\n- mongrel\n- active_record\n- atom-tools\n- uuid\n\n== Contact\n\nSimon Rozet -- simon@rozet.name\n"""
https://github.com/marten/exposure,null
https://github.com/kastner/sin,"""Sin - The lazy Blogging engine in Sinatra\n\nBased on a conversation with Dan Benjamin, I decided to see how hard it would be to get XMLRPC (MetaWeblog API) working on a minimal site.\nAs of right now (2008-02-17), it has:\n  * posting by anyone through MetaWeblog api (point blog editor at http://site/xml)\n  * uploads with the MetaWeblog api (only small-ish files, bug with Rack or something)\n  * hAtom\n  * A single file for the whole thing"""
https://github.com/zackchandler/squawk-micro,"""### Requirements ###\nRuby\nGit\nRake\nErubis gem\nBlueCloth gem\n\n### Get started ###\n\nClone squawk-micro\n\n\t$ git clone git@github.com:zackchandler/squawk-micro.git\n\t$ cd squawk-micro\n\t\nSetup commit hook\n\nEdit .git/hooks/post-commit file to say:\n\n\t#!/bin/sh\n\trake publish\n\nSet as executable\n\t\n\t$ chmod +x .git/hooks/post-commit\n\nMake posts in the posts/ directory in this format:\n\n\tposts/001-first-post\n\tor\n\tposts/002_second_post\n\t\nCommit changes\n\n\t$ git add .\n\t$ git commit -a -m 'Should auto-publish blog on commit'\n\t\nA site directory will be created on commit containing your published blog.\n\nOpen site/index.html to see your blog.\n\n### Rake ###\n\nYou can also build via rake:\n\n\t$ rake publish\n"""
https://github.com/kmarsh/git-wiki,null
https://github.com/drnic/comment_replies,"""Comment Replies\n\nDescription:\n    This JavaScript project makes it quick and easy to reply\n    to specific comments within a blog/forum.\n\n    It adds \""reply\"" links for each comment in your \n    blog/forum, and when clicked it copies the comment's authors name\n    into the comment textarea for easy reference.\n\nMore information:\n    http://drnicjavascript.rubyforge.org/comment_replies\n    \nAuthor:\n    Dr Nic Williams, drnicwilliams@gmail.com"""
https://github.com/gnufied/packet,"""Packet is a pure ruby library for writing network applications in Ruby.\nIt follows Evented Model of network programming and implements almost all the\nfeatures provided by EventMachine.\n\nIt also provides real easy to user UNIX workers for concurrent programming.\n\nIts best to have some examples going:\n\n== Examples\n=== A Simple Echo Server:\nrequire \""rubygems\""\nrequire \""packet\""\n\nclass Foo\n  def receive_data p_data\n    send_data(p_data)\n  end\n\n  def post_init\n    puts \""Client connected\""\n  end\n\n  def connection_completed\n    puts \""Whoa man\""\n  end\n  \n  def unbind\n    puts \""Client Disconnected\""\n  end\nend\n\nPacket::Reactor.run do |t_reactor|\n  t_reactor.start_server(\""localhost\"",11006,Foo)\nend\n\nThose new to network programming with events and callbacks, will note that,\neach time a new client connects an instance of class Foo is instantiated.\nWhen client writes some data to the socket, receive_data method is invoked.\n\nAlthough Packet implements an API similar to EventMachine, but it differs\nslightly because of the fact that, for a packet app, there can be more than one\nreactor loop running and hence, we don't use Packet.start_server(...).\n\n=== A Simple Http Client\nclass WikiHandler\n  def receive_data p_data\n    p p_data\n  end\n\n  def post_init\n  end\n\n  def unbind\n  end\n\n  def connection_completed\n    send_data(\""GET / \\r\\n\"")\n  end\nend\n\nPacket::Reactor.run do |t_reactor|\n  t_reactor.connect(\""en.wikipedia.org\"",80,WikiHandler)\nend\n\n\n=== Using Workers\n  Packet enables you to write simple workers, which will run in \n  different process and gives you nice \n  evented handle for concurrent execution of various tasks. \n\n  When, you are writing a scalable networking application \n  using Event Model of network programming,\n  sometimes when processing of certain events take time, \n  your event loop is stuck there. With green\n  threads, you don't really have a way of paralleling \n  your request processing. Packet library, allows\n  you to write simple workers, for executing long \n  running tasks. You can pass data and callbacks as an\n  argument.\n\n  When you are going to use workers in\n  your application, you need to define\n  constant WORKER_ROOT,\n  which is the directory location, where\n  your workers are located. All the workers defined in that directory\n  will be automatically, picked and forked in a\n  new process when your packet app starts. So, a typical\n  packet_app, that wants to use workers, will look like this:\n\n  packet_app_root\n    |\n    |__  lib\n    |\n    |___ worker\n    |\n    |___ config\n    |\n    |___ log\n\n  You would define WORKER_ROOT = PACKET_APP_ROOT/worker\n\n  All the workers must inherit class Packet::Worker, and hence a \n  general skeleton of worker will look like:\n\n    class FooWorker < Packet::Worker\n      set_worker_name :foo_worker #=> This is necessary.\n      def receive_data p_data\n      end\n      \n      def connection_completed\n      end\n      \n      def unbind\n      end\n      \n      def post_init\n      end\n    end\n\n  All the forked workers are connected to master via\n  UNIX sockets, and hence messages passed to workers from master\n  will be available in receive_data method. Also,\n  when you are passing messages to workers, or worker is passing \n  message to master ( in a nutshell, all the internal\n  communication between workers and master ) directly takes\n  place using ruby objects. All the passed ruby objects are\n  dumped and marshalled across unix sockets in a non blocking \n  manner. BinParser class parses dumped binary objects and\n  makes sure, packets received at other end are complete.\n  Usually, you wouldn't need to worry about this little detail.\n\n  Packet provides various ways of interacting with\n  workers. Usually, when a worker is instantiated, a proxy for\n  that worker will also be instantiated at master\n  process. Packet automatically provides a worker proxy(See meta_pimp.rb)\n  for you, but  if you need to multiplex/demultiplex\n  requests based on certain criteria, you may as well define your \n  own worker proxies. Code, would like something like this:\n\n    class FooWorker < Packet::Worker\n      set_worker_proxy :foo_handler\n    end\n\n  When you define, :foo_handler as a proxy for\n  this worker, packet is gonna search for FooHandler class and \n  instantiate it when the worker gets started. All \n  the worker proxies must inherit from Packet::Pimp. \n  Have a look at, Packet::MetaPimp,\n  which acts as a meta pimp for all the workers,\n  which don't have a explicit worker proxy defined.\n\n=== A complete Case :\n\n    Just for kicks, lets write a sample server,\n    which evals whatever clients send to it. But, assuming this 'eval' of \n    client data can be potentially time/cpu\n    consuming ( not to mention dangerous too ), we are gonna ask our eval_worker, to\n    perform eval and return the result to master process, which in \n    turn returns the result to happy client.\n\n    # APP_ROOT/bin/eval_server.rb\n    EVAL_APP_ROOT = File.expand_path(File.join(File.dirname(__FILE__) + \""/..\""))\n    [\""bin\"",\""worker\"",\""lib\""].each { |x| $LOAD_PATH.unshift(EVAL_APP_ROOT + \""/#{x}\"")}\n    WORKER_ROOT = EVAL_APP_ROOT + \""/worker\""\n    \n    require \""packet\""\n    class EvalServer\n      def receive_data p_data\n        ask_worker(:eval_worker,:data => p_data, :type => :request)\n      end\n  \n      # will be called, when any worker sends data back to master process\n      # it should be noted that, you may have several instances of eval_server in\n      # your master, for each connected client, but worker_receive will be always\n      # be invoked for the instance, which originally made the request.\n      # If you need fine control, over this behaviour, you can implement a worker proxy \n      # on the lines of meta_pimp class. This API will change in future perhaps, as i\n      # expect, better ideas to come.  \n      def worker_receive p_data\n        send_data \""#{p_data[:data]}\\n\""\n      end\n    \n      def show_result p_data\n        send_data(\""#{p_data[:response]}\\n\"")\n      end\n    \n      def connection_completed\n      end\n    \n      def post_init\n      end\n    \n      def wow\n        puts \""Wow\""\n      end\n    end\n    \n    Packet::Reactor.run do |t_reactor|\n      t_reactor.start_server(\""localhost\"", 11006,EvalServer) do |instance|\n        instance.wow\n      end\n    end\n\n   # APP_ROOT/worker/eval_worker.rb\n     class EvalWorker < Packet::Worker\n     set_worker_name :eval_worker\n     def worker_init\n       p \""Starting no proxy worker\""\n     end\n   \n     def receive_data data_obj\n       eval_data = eval(data_obj[:data])\n       data_obj[:data] = eval_data\n       data_obj[:type] = :response\n       send_data(data_obj)\n     end\n   end\n\n=== Disable auto loading of certain workers:\n  Sometimes, you would need to start a\n  worker at runtime and don't want this pre-forking mechanism.\n  Packet, allows this. You just need to define\n  \""set_no_auto_load true\"" in your worker class and worker\n  will not be automatically forked. Although name is a bit misleading perhaps.\n\n  Now, at runtime, you can call start_worker(:foo_worker, options)\n  to start a worker as usual. It should\n  be noted that, forking a worker, which is already\n  forked can be disastrous, since worker names are being\n  used as unique keys that represent a worker.Test\n\n== Performance:\n  Although written in pure ruby, packet performs\n  reasonably well. Mongrel, running on top of Packet is a tad\n  slower than Mongrel running on top of EventMachine. More benchmarks coming soon.\n\n== SVN repo:\n   Code for packet is on google code, svn repo is:\n   http://packet.googlecode.com/svn/trunk/\n\n== Credits\n  Francis for awesome EventMachine lib, which has constantly acted as an inspiration.\n  Ezra, for being a early user and porting mongrel to run on top of packet      \n\n\n\n"""
https://github.com/drnic/jsunittest,"""JsUnitTest\n\nDescription:\n    This JavaScript project provides a one-file JavaScript test suite.\n\n    This is based off unittest.js from \""prototypejs\"":http://prototypejs.org, \n    except this library has no dependency on prototype.js so there is no \n    chance your code-under-test can conflict with prototype.js or that you might \n    accidently use a prototype.js helper for a library that will be deployed \n    independently off prototypejs.\n\nMore information:\n    http://drnicjavascript.rubyforge.org/jsunittest\n    \nAuthor:\n    Dr Nic Williams, drnicwilliams@gmail.com\n    \nContributions/Thanks:\n    original unittest code - prototypejs project\n    ajax library - John Resig, Pro JavaScript book\n    event library - Dean Edwards\n"""
https://github.com/maddox/imdb,null
https://github.com/kmarsh/tumblr,"""== Tumblr\n\nTumblr is a simple Ruby script that aggregates RSS feeds into a \""tumblelog\""-style\nformat, in static files.\n\n=== Feeds\n\nFeeds are specified in <tt>config/feeds.yml</tt> like so:\n\n  blog:\n    url: http://feeds.feedburner.com/kevinmarsh\n    title: Blog\n    generate_permalink: true\n    \n  delicious:\n    url: http://del.icio.us/rss/kevinmarsh\n    title: del.icio.us\n\nBecause it is a YAML file, spaces are important (not tabs!). The url and title\nkeys are pretty straightforward, but the <tt>generate_permalink</tt> may be a little\nconfusing. <tt>generate_permalink</tt> should be set to true if you want tumblr to\ncreate its own permalink page for the content and link to that. This is\nespecially useful if you have a RSS-only feed that you'd like to generate a\nstatic page for. The default is to not specify it, therefore preserving the\nfeed's permalink for the post.\n\n=== Templates\n\nTemplates specify how you want tumblr to render the content of your feeds.\nThey are specified on a per-feed basis, so you can have different templates\nfor each type of content (only showing a <tt>media_thumbnail_link</tt> in Flickr, or tags for\ndel.icio.us, for example.)\n\nTemplates are straight-up ERB, so they will look very familiar if you've used\nRails, and there a few key ones everyone should have:\n\n  index.html.erb\n  layout.html.erb\n  post/_[feed_type].html.erb\n  post.[feed_type].html.erb\n  \n==== index.html.erb\n\nThis is the template for the main index page and archive pages. It is a listing\nof posts, and may look something like:\n\n  <% last_time = nil %>\n  <% @posts.each do |post| %>\n    <h2><% time = post.time.strftime(\""%A, %B %d, %Y\"") %></h2>\n    <%= render post %>\n  <% end %>\n\n==== layout.html.erb\n\nThis is the template for the layout of your site. All the other templates will\nbe wrapped around this one, inserted wherever <%= @content %> is. You'll include\nyour stylesheets, meta tags, doctype, and whatnot here.\n\nYou also have access to a few variables that can give you some flexibility in\nlaying out your tumblr: <tt>@feeds</tt> and <tt>@archives</tt>. They are used thusly:\n\n  <h2>Feeds</h2>\n  <ul id=\""feeds\"">\n    <%- @feeds.each do |key, feed| -%>\n    <li class=\""feed <%= key %>\""><a href=\""<%= feed['url'] %>\""><%= feed['title'] %></a></li>\n    <%- end -%>\n  </ul>\n\n  <h2>Archives</h2>\n  <ul>\n    <%- @archives.each do |date, posts| -%>\n    <li><a href=\""/<%= date.year %>/<%= date.month %>/\""><%= date.strftime(\""%B %Y\"") %></a> (<%= posts %>)</li>\n    <%- end -%>\n  </ul>\n  </div>    \n      \n==== post/_[feed_type].html.erb\n\nThis is the template rendered for each post. You will have one of these for each\nfeed you are displaying in your tumblr so you can customize and tailor the output for each.\n\nFor example, a Flickr feed may show a thumbnail:\n\n  <div class=\""post flickr\"">\n    <h1><a href=\""<%= @post.link %>\""><%= @post.title %></a></h1>\n    <img src=\""<%= @post.media_thumbnail_link %>\"" alt=\""<%= @post.title %>\"" />\n  </div>\n\nWhile a del.icio.us feed will show tags:\n\n  <div class=\""post delicious\"">\n    <p><a href=\""<%= @post.link %>\""><%= @post.title %></a></p>\n    <p><%= @post.content %></p>\n    <p class=\""tags\"">\n      <%- @post.tags.each do |tag| -%>\n      <a href=\""http://del.icio.us/kevinmarsh/<%= tag %>\""><%= tag %></a>\n      <%- end -%>\n    </p>\n  </div>\n\nNote: templates are ERB, which means you can run any string through Ruby and\nmanipulate the output. This is especially useful for feeds like Twitter, to\nstrip out your username from each post:\n\n  <div class=\""post twitter\"">\n    <p><%= @post.content.gsub(/^willcodeforfoo\\:/, \""\"") %></p>\n  </div>\n  \nThis also means you must be careful!\n\n====  post.[feed_type].html.erb\n\nThis template is very similar to those \""partials\"" in the post/ directory,\nbut they are rendered if and when tumblr creates permalink pages for you.\n\n=== Generating\n\nIt is important to note that tumblr generates static files for you, which means\ntumblr is not serving pages for you. You read that right, pages are not dynamic,\nand this is still Web 2.0. You'll have to point your web server to tumblr's\npublic directory.\n\nEach time you invoke <tt>tumblr</tt>, tumblr will fetch new feed items and regenerate\nall your pages (index, monthly archives, and invidual permalink pages if you \nhave feeds with <tt>generate_permalink</tt>). This may seem like overkill, but for\nhigh traffic sites, generating static files once every hour vs. every hit is the\nless expensive route.\n\nTo just re-generate without fetching your feeds, throw tumblr the <tt>--generate</tt>\nflag. You may find yourself wanting this after you tweak a template."""
https://github.com/halorgium/merb-core,"""merb-core is a new branch of Merb (also referred to as merb-next or the 0.9 series) which aims to provide a stable, stripped down API for a future Merb 1.0 release.\n\nThis branch is based off the 0.5 release series but with significant rewrites.\n\nGoals of this release:\n\n  * Stabilize the @public interface methods to provide for a more consistent application development experience.\n  * Remove features until nothing except a central application API is left\n  * Improve comments on methods using a standard documentation methodology as described in DOCUMENTATION_STANDARDS\n  * Separate the tests into two sections... \""private\"" and \""public\""\n    * Public methods are methods tagged with @public that will be part of the standard, stable Merb API\n    * Private methods are implementation methods that might \n  * Implement a new render API\n  * Build more extensions to regain selected features when needed\n  \nTo familiarize yourself with how a merb-core application might look,\nuse merb-gen (from merb-more) to generate a few apps:\n$ merb-gen myapp                   # a \""normal\"" merb app\n$ merb-gen myapp --flat            # a flattened app\n$ merb-gen myapp --very-flat       # a single-file app\n\n"""
https://github.com/anildigital/codesnippets,"""My random codes, configurations, scripts repsository.\n"""
https://github.com/imownbey/jim,"""This is an irc bot written in iO. Trying to learn.\n\nThe bot responds to its nick to just repeat things back\n! to eval a script\n!newSandbox to initiate a new sandbox"""
https://github.com/abhay/chronic,"""Chronic\n\thttp://chronic.rubyforge.org/\n\tby Tom Preston-Werner\n\n== DESCRIPTION:\n\nChronic is a natural language date/time parser written in pure Ruby. See below for the wide variety of formats Chronic will parse.\n\n== INSTALLATION:\n\nChronic can be installed via RubyGems:\n\n  $ sudo gem install chronic\n  \n== CODE:\n\nBrowse the code and get an RSS feed of the commit log at:\n\n  http://github.com/mojombo/chronic.git\n\nYou can grab the code (and help with development) via git:\n\n  $ git clone git://github.com/mojombo/chronic.git\n\n== USAGE:\n\nYou can parse strings containing a natural language date using the Chronic.parse method.\n\n  require 'rubygems'\n  require 'chronic'\n\n  Time.now   #=> Sun Aug 27 23:18:25 PDT 2006\n\n  #---\n\n  Chronic.parse('tomorrow')       \n    #=> Mon Aug 28 12:00:00 PDT 2006\n\n  Chronic.parse('monday', :context => :past)\n    #=> Mon Aug 21 12:00:00 PDT 2006\n\n  Chronic.parse('this tuesday 5:00')\n    #=> Tue Aug 29 17:00:00 PDT 2006\n\n  Chronic.parse('this tuesday 5:00', :ambiguous_time_range => :none)\n    #=> Tue Aug 29 05:00:00 PDT 2006\n\n  Chronic.parse('may 27th', :now => Time.local(2000, 1, 1))\n    #=> Sat May 27 12:00:00 PDT 2000\n\n  Chronic.parse('may 27th', :guess => false)\n    #=> Sun May 27 00:00:00 PDT 2007..Mon May 28 00:00:00 PDT 2007\n\nSee Chronic.parse for detailed usage instructions.\n\n== EXAMPLES:\n\nChronic can parse a huge variety of date and time formats. Following is a small sample of strings that will be properly parsed. Parsing is case insensitive and will handle common abbreviations and misspellings.\n\nSimple\n\n  thursday\n  november\n  summer\n  friday 13:00\n  mon 2:35\n  4pm\n  6 in the morning\n  friday 1pm\n  sat 7 in the evening\n  yesterday\n  today\n  tomorrow\n  this tuesday\n  next month\n  last winter\n  this morning\n  last night\n  this second\n  yesterday at 4:00\n  last friday at 20:00\n  last week tuesday\n  tomorrow at 6:45pm\n  afternoon yesterday\n  thursday last week\n\nComplex\n\n  3 years ago\n  5 months before now\n  7 hours ago\n  7 days from now\n  1 week hence\n  in 3 hours\n  1 year ago tomorrow\n  3 months ago saturday at 5:00 pm\n  7 hours before tomorrow at noon\n  3rd wednesday in november\n  3rd month next year\n  3rd thursday this september\n  4th day last week\n\nSpecific Dates\n\n  January 5\n  dec 25\n  may 27th\n  October 2006\n  oct 06\n  jan 3 2010\n  february 14, 2004\n  3 jan 2000\n  17 april 85\n  5/27/1979\n  27/5/1979\n  05/06\n  1979-05-27\n  Friday\n  5\n  4:00\n  17:00\n  0800\n\nSpecific Times (many of the above with an added time)\n\n  January 5 at 7pm\n  1979-05-27 05:00:00\n  etc\n\n== LIMITATIONS:\n  \nChronic uses Ruby's built in Time class for all time storage and computation. Because of this, only times that the Time class can handle will be properly parsed. Parsing for times outside of this range will simply return nil. Support for a wider range of times is planned for a future release.\n\nTime zones other than the local one are not currently supported. Support for other time zones is planned for a future release.\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) 2008 Tom Preston-Werner\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\""Software\""), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \""AS IS\"", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"""
https://github.com/halfbyte/portmidi-ruby,null
https://github.com/adelcambre/rubyurl,"""== RubyURL\n\nThis project is the source code for the application that powers Rubyurl.com. \n\n* http://rubyurl.com\n\nFeel free to start your own URL-shortening service!\n\n== Bugs and/or Feedback\n\nFeel free to submit tickets to the Rubyurl ticket system.\n\n* http://planetargon.lighthouseapp.com/projects/4059-rubyurl\n\n== Authors\n\nRobby Russell <robby@planetargon.com>\nChris Griffin <chris@deadboltdesign.com>\n"""
https://github.com/francois/mor7-google-charts-demo,"""= Montreal on Rails 7:  Google Charts Demo\n\nGoogle Charts API documentation is available at:\n  http://code.google.com/apis/chart/\n\nThe demo code can be had using Git using:\n  git clone git@github.com:francois/mor7-google-charts-demo\n\nThe code in this application is available under the public domain.\n"""
https://github.com/delynn/userstamp,"""Userstamp Plugin (v 2.0)\n========================\n\nOverview\n--------\n\nThe Userstamp Plugin extends [ActiveRecord::Base](http://api.rubyonrails.org/classes/ActiveRecord/Base.html) to add automatic updating of 'creator',\n'updater', and 'deleter' attributes. It is based loosely on the [ActiveRecord::Timestamp](http://api.rubyonrails.org/classes/ActiveRecord/Timestamp.html) module.\n\nTwo class methods (`model_stamper` and `stampable`) are implemented in this plugin.\nThe `model_stamper` method is used in models that are responsible for creating, updating, or\ndeleting other objects. The `stampable` method is used in models that are subject to being\ncreated, updated, or deleted by 'stampers'.\n\n\nInstallation\n------------\n\nInstallation of the plugin can be done using the built in Rails plugin script. Issue the following\ncommand from the root of your Rails application:\n\n    $ ./script/rails plugin install git://github.com/delynn/userstamp.git\n\nor add it to your Gemfile:\n\n    gem 'userstamp'\n\nand run `bundle install` to install the new dependency.\n\nOnce installed you will need to restart your application for the plugin to be loaded into the Rails\nenvironment.\n\nUsage\n-----\n\nIn this new version of the Userstamp plug-in, the assumption is that you have two different\ncategories of objects; those that manipulate, and those that are manipulated. For those objects\nthat are being manipulated there's the Stampable module and for the manipulators there's the\nStamper module. There's also the actual Userstamp module for your controllers that assists in\nsetting up your environment on a per request basis.\n\nTo better understand how all this works, I think an example is in order. For this example we will\nassume that a weblog application is comprised of User and Post objects. The first thing we need to\ndo is create the migrations for these objects, and the plug-in gives you a `userstamps`\nmethod for very easily doing this:\n\n```ruby\nclass CreateUsers < ActiveRecord::Migration\n  def self.up\n    create_table :users, :force => true do |t|\n      t.timestamps\n      t.userstamps\n      t.name\n    end\n  end\n  \n  def self.down\n    drop_table :users\n  end\nend\n\nclass CreatePosts < ActiveRecord::Migration\n  def self.up\n    create_table :posts, :force => true do |t|\n      t.timestamps\n      t.userstamps\n      t.title\n    end\n  end\n  \n  def self.down\n    drop_table :posts\n  end\nend\n```\n\nSecond, since Users are going to manipulate other objects in our project, we'll use the\n`model_stamper` method in our User class:\n\n```ruby\nclass User < ActiveRecord::Base\n  model_stamper\nend\n```\n\nFinally, we need to setup a controller to set the current user of the application. It's\nrecommended that you do this in your ApplicationController:\n\n```ruby\nclass ApplicationController < ActionController::Base\n  include Userstamp\nend\n```\n\nIf all you are interested in is making sure all tables that have the proper columns are stamped\nby the currently logged in user you can stop right here. More than likely you want all your\nassociations setup on your stamped objects, and that's where the `stampable` class method\ncomes in. So in our example we'll want to use this method in both our User and Post classes:\n\n```ruby\nclass User < ActiveRecord::Base\n  model_stamper\n  stampable\nend\n\nclass Post < ActiveRecord::Base\n  stampable\nend\n```\n\nOkay, so what all have we done? The `model_stamper` class method injects two methods into the\nUser class. They are #stamper= and #stamper and look like this:\n\n```ruby\ndef stamper=(object)\n  object_stamper = if object.is_a?(ActiveRecord::Base)\n    object.send(\""#{object.class.primary_key}\"".to_sym)\n  else\n    object\n  end\n  \n  Thread.current[\""#{self.to_s.downcase}_#{self.object_id}_stamper\""] = object_stamper\nend\n\ndef stamper\n  Thread.current[\""#{self.to_s.downcase}_#{self.object_id}_stamper\""]\nend\n```\n\nThe big change with this new version is that we are now using Thread.current to save the current\nstamper so as to avoid conflict with concurrent requests.\n\nThe `stampable` method allows you to customize what columns will get stamped, and also\ncreates the _creator_, _updater_, and _deleter_ associations.\n\nThe Userstamp module that we included into our ApplicationController uses the setter method to\nset which user is currently making the request. By default the 'set_stampers' method works perfectly\nwith the [RestfulAuthentication](http://svn.techno-weenie.net/projects/plugins/restful_authentication) plug-in:\n\n```ruby\ndef set_stampers\n  User.stamper = self.current_user\nend\n```\n\nIf you aren't using ActsAsAuthenticated, then you need to create your own version of the\n`set_stampers` method in the controller where you've included the Userstamp module.\n\nNow, let's get back to the Stampable module (since it really is the interesting one). The Stampable\nmodule sets up before_* filters that are responsible for setting those attributes at the appropriate\ntimes. It also creates the belongs_to relationships for you.\n\nIf you need to customize the columns that are stamped, the `stampable` method can be\ncompletely customized. Here's an quick example:\n\n```ruby\nclass Post < ActiveRecord::Base\n  acts_as_stampable :stamper_class_name => :person,\n                    :creator_attribute  => :create_user,\n                    :updater_attribute  => :update_user,\n                    :deleter_attribute  => :delete_user\nend\n```\n\nIf you are upgrading your application from the old version of Userstamp, there is a compatibility\nmode to have the plug-in use the old \""_by\"" columns by default. To enable this mode, add the\nfollowing line to the Rails.root/config/initializers/userstamp.rb file:\n\n```ruby\nDdb::Userstamp.compatibility_mode = true\n```\n\nIf you are having a difficult time getting the Userstamp plug-in to work, I recommend you checkout\nthe sample application that I created. You can find this application on [GitHub](http://github.com/delynn/userstamp_sample)\n\nUninstall\n---------\n\nUninstalling the plugin can be done using the built in Rails plugin script. Issue the following\ncommand from the root of your application:\n\n    script/plugin remove userstamp\n\n\nDocumentation\n-------------\n\nRDoc has been run on the plugin directory and is available in the doc directory.\n\n\nRunning Unit Tests\n------------------\n\nThere are extensive unit tests in the \""test\"" directory of the plugin. These test can be run\nindividually by executing the following command from the userstamp directory:\n\n    ruby test/compatibility_stamping_test.rb\n    ruby test/stamping_test.rb\n    ruby test/userstamp_controller_test.rb\n\n\nBugs & Feedback\n---------------\n\nBug reports and feedback are welcome via [GitHub Issues](https://github.com/delynn/userstamp/issues). I also encouraged everyone to clone the git repository and make modifications--I'll be more than happy to merge any changes from other people's branches that would be beneficial to the whole project.\n\n\nCredits and Special Thanks\n--------------------------\n\nThe original idea for this plugin came from the Rails Wiki article entitled\n\""Extending ActiveRecord\"" on the Rails Wiki (no longer published)."""
https://github.com/nullstyle/ruby-satisfaction,"""README"""
https://github.com/cdcarter/io,null
https://github.com/jwhitmire/llor-nu-legacy,"""Yeah, this is really old code. Not only old, but it's the first app I built with Rails when Rails was something like 0.11.0. Be kind.\n\nGETTING IT RUNNING\n* Make sure you have Rails 1.2.6 - there might be some gems needed too\n* Create the database\n* Run rake db:migrate\n* Run script/server\n* Go to localhost:3000\n* Click the huge JOIN button\n* Signup\n* Run script/console\n* u = User.find :first\n* u.role = \""admin\""\n* u.save\n* Go to localhost:3000/instances/new\n* Fiddle with the settings and create an instance\n* Make sure you enter settings for all numeric fields (nil default causes issues)\n* Go to localhost:3000/instances/choose\n* Join the instance you created.\n* Done."""
https://github.com/toretore/barby,"""# Barby\nBarby is a Ruby library that generates barcodes in a variety of symbologies.\n\nIts functionality is split into _barcode_ and \""_outputter_\"" objects:\n  * [`Barby::Barcode` objects] [symbologies] turn data into a binary representation for a given symbology.\n  * [`Barby::Outputter`] [outputters] then takes this representation and turns it into images, PDF, etc.\n\nYou can easily add a symbology without having to worry about graphical\nrepresentation. If it can be represented as the usual 1D or 2D matrix of\nlines or squares, outputters will do that for you.\n\nLikewise, you can easily add an outputter for a format that doesn't have one\nyet, and it will work with all existing symbologies.\n\nFor more information, check out [the Barby wiki][wiki].\n\n\n### New require policy\n\nBarcode symbologies are no longer required automatically, so you'll have to\nrequire the ones you need.\n\nIf you need EAN-13, `require 'barby/barcode/ean_13'`. Full list of symbologies and filenames below.\n\n## Example\n\n```ruby\nrequire 'barby'\nrequire 'barby/barcode/code_128'\nrequire 'barby/outputter/ascii_outputter'\n\nbarcode = Barby::Code128B.new('BARBY')\n\nputs barcode.to_ascii #Implicitly uses the AsciiOutputter\n\n## #    #  #   # ##   # #   ##   ##   # ### #   # ##   ### ## #   ## ### ### ##   ### # ##\n## #    #  #   # ##   # #   ##   ##   # ### #   # ##   ### ## #   ## ### ### ##   ### # ##\n## #    #  #   # ##   # #   ##   ##   # ### #   # ##   ### ## #   ## ### ### ##   ### # ##\n## #    #  #   # ##   # #   ##   ##   # ### #   # ##   ### ## #   ## ### ### ##   ### # ##\n## #    #  #   # ##   # #   ##   ##   # ### #   # ##   ### ## #   ## ### ### ##   ### # ##\n## #    #  #   # ##   # #   ##   ##   # ### #   # ##   ### ## #   ## ### ### ##   ### # ##\n## #    #  #   # ##   # #   ##   ##   # ### #   # ##   ### ## #   ## ### ### ##   ### # ##\n## #    #  #   # ##   # #   ##   ##   # ### #   # ##   ### ## #   ## ### ### ##   ### # ##\n## #    #  #   # ##   # #   ##   ##   # ### #   # ##   ### ## #   ## ### ### ##   ### # ##\n## #    #  #   # ##   # #   ##   ##   # ### #   # ##   ### ## #   ## ### ### ##   ### # ##\n          B          A          R          B          Y\n```\n\n## Supported symbologies\n\n```ruby\nrequire 'barby/barcode/<filename>'\n```\n\n| Name                                | Filename              | Dependencies                       |\n| ----------------------------------- | --------------------- | ---------------------------------- |\n| Code 25                             | `code_25`             | \u2500                                  |\n| \u251c\u2500 Interleaved                      | `code_25_interleaved` | \u2500                                  |\n| \u2514\u2500 IATA                             | `code_25_iata`        | \u2500                                  |\n| Code 39                             | `code_39`             | \u2500                                  |\n| \u2514\u2500 Extended                         | `code_39`             | \u2500                                  |\n| Code 93                             | `code_93`             | \u2500                                  |\n| Code 128 (A, B, and C)              | `code_128`            | \u2500                                  |\n| \u2514\u2500 GS1 128                          | `gs1_128`             | \u2500                                  |\n| EAN-13                              | `ean_13`              | \u2500                                  |\n| \u251c\u2500 Bookland                         | `bookland`            | \u2500                                  |\n| \u2514\u2500 UPC-A                            | `ean_13`              | \u2500                                  |\n| EAN-8                               | `ean_8`               | \u2500                                  |\n| UPC/EAN supplemental, 2 & 5 digits  | `upc_supplemental`    | \u2500                                  |\n| QR Code                             | `qr_code`             | `rqrcode`                          |\n| DataMatrix (Semacode)               | `data_matrix`         | `semacode` or `semacode-ruby19`    |\n| PDF417                              | `pdf_417`             | JRuby                              |\n\n\n## Outputters\n\n```ruby\nrequire 'barby/outputter/<filename>_outputter'\n```\n\n| filename    | dependencies  |\n| ----------- | ------------- |\n| `ascii`     | \u2500             |\n| `cairo`     | cairo         |\n| `html`      | \u2500             |\n| `pdfwriter` | \u2500             |\n| `png`       | chunky_png    |\n| `prawn`     | prawn         |\n| `rmagick`   | rmagick       |\n| `svg`       | \u2500             |\n\n### Formats supported by outputters\n\n* Text (mostly for testing)\n* PNG, JPEG, GIF\n* PS, EPS\n* SVG\n* PDF\n* HTML\n\n---\n\nFor more information, check out [the Barby wiki][wiki].\n\n\n  [wiki]: https://github.com/toretore/barby/wiki\n  [symbologies]: https://github.com/toretore/barby/wiki/Symbologies\n  [outputters]: https://github.com/toretore/barby/wiki/Outputters\n"""
https://github.com/reinh/jquery-autocomplete,null
https://github.com/robbyrussell/rubyurl,"""== RubyURL\n\nThis project is the source code for the application that powers Rubyurl.com. \n\n* http://rubyurl.com\n\nFeel free to start your own URL-shortening service!\n\n== Bugs and/or Feedback\n\nFeel free to submit tickets to the Rubyurl ticket system.\n\n* http://planetargon.lighthouseapp.com/projects/4059-rubyurl\n\n== Authors\n\nRobby Russell <robby@planetargon.com>\nChris Griffin <chris@deadboltdesign.com>\n"""
https://github.com/jarkko/kroonikko,""""""
https://github.com/anotherjesse/finally,"""One part taboo, one part mini-mapper, one part flock shelf, one part scrap book, one part netvibes\n\nThe goal is to be extensible ala greasemonkey (easy to add scripts to enhance without restarting),\nproviding wrappers around the technologies that aren't \""standard\"" (xbl/rdf/dnd) so that enhancements\ncan be done by as many people as possible.\n\nTODO:\n\n  * pattern for inheritance/reuse of xbls (lots of redundancy)\n  * pattern for scraplets to determine DND content\n  * how to hanlde multiple scraplets having an opinion on the dropped content\n\nCONTENT:\n  * photos\n    * screenshots from page\n    * flickr\n    * smugmug\n    * photobucket\n    * ...\n  * movies\n    * youtube\n    * metacafe\n    * ...\n  * web pages\n    * taboo\n    * delicious\n    * ...\n  * addresses\n  * text/html\n  * people\n  * micro-format content\n  * music\n  * products\n    * books\n  * email\n  * chat\n  * twitter\n  * widgets (open social?)\n  \nWhat works:\n\n  * dnd a flickr picture on to the page\n  * dnd a picture on to the page\n  * dnd a link (stored but bad ui)\n  * dnd html snippet (stored but bad ui)"""
https://github.com/yrashk/strokedb,"""StrokeDB is a distributed document-oriented database engine. \nMain features are complete decentralization, JSON object format, \nmetadocuments, integration with runtime (it is just a ruby library). \n\n\n= Starting points\n\nOne of the most important concepts of StrokeDB is a StrokeDB::Document.\n\n\n= Installing StrokeDB\n\n=== Requirements\n\nInstall ossp-uuid library:\n\n\t$ brew install ossp-uuid # (MacOSX)\n\nYou need to install few gems in order to run StrokeDB:\n\n\t$ gem install diff-lcs json RubyInline\n\t\nIf you can't install ossp-uuid for some reason, then install uuidtools gem as well.\n\n*Note*: There is no need in <tt>uuidtools</tt> if you use JRuby\n\n=== Getting source code\n\n\t$ git clone git://github.com/yrashk/strokedb.git\n\n=== Installing rubygem\n\n\t$ gem install strokedb\n\t\n=== <i>(Optional) Running test suite</i>\n\n  $ gem install rcov echoe rspec\n\t$ rake sup\n\t\n=AUTHORS\n\n* Yurii Rashkovskii <yrashk@idbns.com>\n* Oleg Andreev <oleganza@idbns.com>\n"""
https://github.com/KirinDave/fuzed-old,"""fuzed\n    by Dave Fayram, Tom Preston-Werner\n    fuzed.rubyforge.org\n\n\n== Summary\nLeverage the YAWS webserver (and additional erlang-based infrastructure) to\nrun Rails.\n\n\n== Dependencies\n* Erlang: http://www.erlang.org\n* Yaws: http://yaws.hyber.org\n* Ruby: http://www.ruby-lang.org\n* Ruby Gems: \n  * rake: http://rake.rubyforge.org\n  * erlectricty: http://code.google.com/p/erlectricity\n  * rack: http://rack.rubyforge.org\n\n\n== Installation (from gem)\n\n  sudo gem install fuzed\n\n\n== Installation (from git)\n\nGet it from the git repo:\n\n  git clone git://repo.or.cz/fuzed.git\n\nChange to the fuzed working copy:\n\n  cd fuzed\n\nBuild Fuzed:\n\n  rake build\n\n\n== Configuration\n\nCreate a shared Erlang cookie on each machine. In order for Erlang processes in\ndifferent interpreters to communicate with each other, they each need to be\nable to find a file called .erlang.cookie in the home directory of the user\nunder which they are running. The cookie should contain 20 uppercase alpha\ncharacters on a single line (no newline).\n\nGenerate a starter Yaws config file with:\n\n  fuzed-conf RAILS_ROOT 8080 > fuzed.conf\n\nwhere RAILS_ROOT is the absolute path to the root directory of your Rails\nproject. You may optionally specify a port as the second argument. This will\ngenerate a file called 'fuzed.conf' which contains a sample Yaws config file\nthat should be suitable for initial testing.\n\n\n== Starting fuzed\n\nStart the fuzed master server (yaws) locally:\n\n  fuzed start -n server@127.0.0.1 -c fuzed.conf\n\nIn another terminal, start a fuzed client locally:\n\n  fuzed join -n client@127.0.0.1 -m server@127.0.0.1 -r RAILS_ROOT\n\nwhere RAILS_ROOT is the same as before.\n    \nPoint your browser at:\n\n  http://localhost:8080\n\nIf everything worked out, you'll see your Rails app!\n\n\n== What is a Valid Hostname?\n  Erlang has a funny notion about what a valid hostname is. Localhost won't\n  cut it. I recommend using rendezvous to point to your local host. Short of\n  that, 127.0.0.1 works.\n\n\n== Contribution Notes\n* Please note that empty directories should contain a .placeholder file\n  (which should be empty), to facilitate the use of other version\n  control systems which bridge to subversion but don't support empty\n  directories."""
https://github.com/tobi/delayed_job,null
https://github.com/cannikin/alfred,"""Alfred is a Rails app for controlling other Rails apps. I developed it for myself to keep track of lots of \nlittle prototypes that need to be up and available at various times so that others in the company can view\nand comment on them.\n\nRequirements\n------------\nRails\nMongrel - There is currently the option to start your app with either Mongrel or WEBrick but the code will\n          always try to start with Mongrel only.\n\nKnown Limitations\n-----------------\n* Although the New Project screen says that you can specify WEBrick as the web server, you can't (there's no\n  code in the controller to try anything other than Mongrel).\n* The system does not gracefully respond to errors in your app. Let's say you try to start your app, but you\n  specified the wrong Rails Root. Ideally that project square turns red and gives you some info about why\n  the error occurred. This doesn't happen yet.\n* If you have an app running and you `kill` it, or the server restarts, Mongrel will not restart the app\n  until you clear out the mongrel.pid file (which for some reason seems to sometimes live in /log and\n  other times in /tmp). I attempted some code to rescue from this, but it doesn't seem to work. Haven't\n  had a chance to go back and take a second look.\n* You'll see a link to view the log of the current environment, but this doesn't work yet\n* There's a checkbox in the New Project screen to create the rails app itself along with the project.\n  This doesn't work yet!\n* No tests (sorry).\n\nInstallation\n------------\nPretty simple. Get a copy of the code:\n\n  git clone git://github.com:cannikin/alfred.git   (if you have git)\n    or\n  http://github.com/cannikin/alfred/tarball/master    (if you don't)\n  \n`cd` to that directory and initialize the database:\n\n  rake db:create\n  rake db:migrate\n\nNow start the app from Alfred's directory (switching it to a different port if you wish, my default \nis 3100 to keep all the 3000's open for apps):\n\n  mongrel_rails start -p 3100 -d\n\nAlfred is now running and ready to serve your apps:\n\n  http://localhost:3100 \n  (if you used my default port above and you're running it locally).\n\nUsage\n-----\nThe first screen you'll see is the Dashboard. This is where you'll see your projects and their current \nstatus. There's an Extended and Compact view. They both have the same info, just that Compact takes up \nless space. \n\nClick the Settings tab to set the default values for new projects (local hostname, remote \nhostname) as well as the port Alfred is running on and how often he should check for the current status \nof projects. Unless you're doing some volatile testing, or someone else also has access to your apps, \ntheir status isn't going to change very often. 600 seconds is 10 minutes which is still probably more\noften than necessary. \n\nIf you're running this in Firefox 2 you may want to disable Firebug -- after Alfred is open for a \ncouple of days Firefox's RAM tends to get a little out of control, I assume because Firebug is tracking \neach status update AJAX request.\n\nComing Soon\n-----------\n* Properly handle and recover from errors\n* Create a little command line \""engine\"" to run all the logic of starting/stopping the apps, handling\n  errors that come back from the command line, etc. (right now this is handled by UtilityController)\n* Ability to view live log\n* Make Environment a dropdown in the dashboard so you can switch to others before starting the app (right\n  now you need to edit the project and change the environment there)\n* Add a Public view so that others can find your apps, but not have access to start/stop them\n* Ideally I would love to integrate with god: http://github.com/mojombo/god"""
https://github.com/pjhyett/vjot,null
https://github.com/KirinDave/bus-scheme,"""Bus Scheme\n    by Phil Hagelberg (c) 2007 - 2008\n    http://bus-scheme.rubyforge.org\n\n== Description\n\nBus Scheme is a Scheme written in Ruby, but implemented on the bus!\nEvery programmer must implement Scheme as a rite of passage; this is\nmine. Note that at least half of the implementation of Bus Scheme must\nbe written while on a bus. Documentation, tests, and administrivia may\nbe accomplished elsewhere, but the majority of actual implementation\ncode is strictly bus-driven. Patches are welcome especially if they were\nwritten while riding a bus. (If your daily commute does not involve a\nbus but you want to submit a patch, we may be able to work something\nout regarding code written on trains, ferries, or perhaps even carpool\nlanes.) Bus Scheme is primarily a toy; using it for anything serious\nis (right now) ill-advised.\n\nBus Scheme aims for general Scheme usefulness optimized for learning\nand fun. It's not targeting R5RS or anything like that.\n\n== Usage\n\n$ bus # drop into the REPL\n\n$ bus -e \""(do some stuff)\""\n\n$ bus foo.scm # load a file\n\n== Tutorial\n\nSee http://technomancy.us/104 for a \""Getting Started\"" tutorial.\n\n== What makes Bus Scheme different?\n\nWell, for starters it's implemented on the bus. No other Scheme\nimplementation can claim this. Here are a few other things that set\nBus Scheme apart:\n\n=== Flexible calling syntax\n\nTaking a hint from Arc, Bus Scheme allows you to use the notation\n(mylist n) to access the nth place of the mylist list instead of (nth\nmylist n) or the (myhash key) notation to access the slot in myhash\ncorresponding to the value of key instead of (gethash myhash key). \nTODO: This notation is flexible, and other data types may have\ntheir own \""call behaviour\"" specified.\n\n=== Mongrel integration\n\nWeb and RESTful application development are part of the package. Bus\nScheme uses the wonderful Mongrel web server to allow scheme programs\nto serve web applications. TODO: Representations of data can be easily\ntranslated between s-expressions, HTML, and JSON.\n\n=== Written in a high-level language\n\nBus Scheme is written in Ruby, which means anyone with experience in\nhigh-level dynamic languages (like, oh, I don't know... Scheme?)\nshould be right at home poking around at the implementation. Using\nRuby allows the implementation code to remain compact and concise. Bus\nScheme should run on Ruby 1.8, Ruby 1.9, and Rubinius at least. Bus\nScheme also allows you to drop into Ruby when that's convenient. TODO:\nallow real inline Ruby blocks instead of access via a function call.\n\n=== XML integration\n\nTODO: Bus Scheme has a notion of XML literals so that it may be\ninlined into your Scheme code, much like the way ECMAScript uses\nE4X. If you'd prefer, you can leverage convenient s-expression -> XML\nconversion facilities.\n\n=== Test-Driven\n\nBus Scheme is written in an entirely test-driven manner. As much as\npossible, it tries to keep its tests written in Scheme itself, so it\nincludes a fairly comprehensive testing suite and encourages programs\nto be written test-first.\n\n== Install\n\n* sudo gem install bus-scheme\n\nFor the source:\n\n* git clone git://git.caboo.se/bus_scheme.git\n\n== Todo\n\nBus Scheme is currently missing pieces of functionality:\n\n=== Parser\n* character literals\n* multiline strings\n* dotted cons cells\n\n=== General\n* test framework needs work\n* macros\n* continuations\n\nFailing tests for some of these are already included (commented out,\nmostly) in the relevant test files.\n\n=== Long Term (post 1.0)\n* web functions (defresource and friends)\n* (lambda (arg1 arg2 . args) body) for rest args\n* string interpolation\n* escape sequences in strings\n* Ruby blocks inline?\n* XML literals?\n* optimize tail call recursion\n* compile to Rubinius bytecode\n* custom call behaviour\n* parse non-decimal base numbers\n* parse rationals, scientific, complex, and polar complex numbers\n\n== Requirements\n\nBus Scheme should run on (at least) Ruby 1.8, Ruby 1.9, and Rubinius.\n\n== Bonus Fact\n\nI haven't actually used a real Scheme yet. Everything I know about it\nI've gathered from reading The Little Schemer, watching the Structure\nand Interpretation of Computer Programs videos, and reading lots about\nCommon Lisp and Emacs Lisp. If there are huge gaping flaws in the\nimplementation, this is likely to be why.\n"""
https://github.com/nakajima/calendar-maker,"""Calendar Maker\n==============\n\nPutting a calendar on a web page is easy now. Also, you can add events to a \ncalendar, which are denoted by adding a custom class name to that day, allowing\nyou to style it differently, or even define behavior for that day via unobtrusive\nJavascript.\n\n\nUsage\n=====\n\nYou can create a new calendar object by simply running \""Calendar.new\"" from either\nyour controller or your view. You can specify the month and year of your calendar\nlike so:\n\n  @calendar = Calendar.new(:month => 'oct', :year => 2001)\n  \nIf you'd like to add events to the calendar object, you can simply pass it an\narray of objects via its #add method, then designating an attribute to signify the\nevent date using the :schedule_for option. This option is not optional. If you don't\ninclude it, an ArgumentError exception will be raised.\n\nYou can also specify which class should be added to days that have certain events\nby using the :html_class option. If you don't provide one, then the plugin will just\nadd the :schedule_for value as a class name.\n\nFinally, use the #generate method to actually render the HTML code for your calendar.\n\nExample\n=======\n\nIn your controller...\n\n  class PartyController < ApplicationController\n    def index\n      @parties  = Party.find(:all)\n      @calendar = Calendar.new\n      @calendar.add @parties, :schedule_for => :party_date, :html_class => \""party_time\""\n      render :action => :index\n    end\n  end\n\nIn your view...\n\n  <%= @calendar.generate %>\n\nTodo\n====\n\n- Clean it up. Big time.\n- Finish documentation.\n\nCopyright (c) 2007 Pat Nakajima, James Herdman, released under the MIT license\n"""
https://github.com/jredville/blog,"""== Welcome to Rails\n\nRails is a web-application and persistence framework that includes everything\nneeded to create database-backed web-applications according to the\nModel-View-Control pattern of separation. This pattern splits the view (also\ncalled the presentation) into \""dumb\"" templates that are primarily responsible\nfor inserting pre-built data in between HTML tags. The model contains the\n\""smart\"" domain objects (such as Account, Product, Person, Post) that holds all\nthe business logic and knows how to persist themselves to a database. The\ncontroller handles the incoming requests (such as Save New Account, Update\nProduct, Show Post) by manipulating the model and directing data to the view.\n\nIn Rails, the model is handled by what's called an object-relational mapping\nlayer entitled Active Record. This layer allows you to present the data from\ndatabase rows as objects and embellish these data objects with business logic\nmethods. You can read more about Active Record in\nlink:files/vendor/rails/activerecord/README.html.\n\nThe controller and view are handled by the Action Pack, which handles both\nlayers by its two parts: Action View and Action Controller. These two layers\nare bundled in a single package due to their heavy interdependence. This is\nunlike the relationship between the Active Record and Action Pack that is much\nmore separate. Each of these packages can be used independently outside of\nRails.  You can read more about Action Pack in\nlink:files/vendor/rails/actionpack/README.html.\n\n\n== Getting Started\n\n1. At the command prompt, start a new Rails application using the <tt>rails</tt> command\n   and your application name. Ex: rails myapp\n   (If you've downloaded Rails in a complete tgz or zip, this step is already done)\n2. Change directory into myapp and start the web server: <tt>script/server</tt> (run with --help for options)\n3. Go to http://localhost:3000/ and get \""Welcome aboard: You\u2019re riding the Rails!\""\n4. Follow the guidelines to start developing your application\n\n\n== Web Servers\n\nBy default, Rails will try to use Mongrel and lighttpd if they are installed, otherwise\nRails will use WEBrick, the webserver that ships with Ruby. When you run script/server,\nRails will check if Mongrel exists, then lighttpd and finally fall back to WEBrick. This ensures\nthat you can always get up and running quickly.\n\nMongrel is a Ruby-based webserver with a C component (which requires compilation) that is\nsuitable for development and deployment of Rails applications. If you have Ruby Gems installed,\ngetting up and running with mongrel is as easy as: <tt>gem install mongrel</tt>.\nMore info at: http://mongrel.rubyforge.org\n\nIf Mongrel is not installed, Rails will look for lighttpd. It's considerably faster than\nMongrel and WEBrick and also suited for production use, but requires additional\ninstallation and currently only works well on OS X/Unix (Windows users are encouraged\nto start with Mongrel). We recommend version 1.4.11 and higher. You can download it from\nhttp://www.lighttpd.net.\n\nAnd finally, if neither Mongrel or lighttpd are installed, Rails will use the built-in Ruby\nweb server, WEBrick. WEBrick is a small Ruby web server suitable for development, but not\nfor production.\n\nBut of course its also possible to run Rails on any platform that supports FCGI.\nApache, LiteSpeed, IIS are just a few. For more information on FCGI,\nplease visit: http://wiki.rubyonrails.com/rails/pages/FastCGI\n\n\n== Debugging Rails\n\nSometimes your application goes wrong.  Fortunately there are a lot of tools that\nwill help you debug it and get it back on the rails.\n\nFirst area to check is the application log files.  Have \""tail -f\"" commands running\non the server.log and development.log. Rails will automatically display debugging\nand runtime information to these files. Debugging info will also be shown in the\nbrowser on requests from 127.0.0.1.\n\nYou can also log your own messages directly into the log file from your code using\nthe Ruby logger class from inside your controllers. Example:\n\n  class WeblogController < ActionController::Base\n    def destroy\n      @weblog = Weblog.find(params[:id])\n      @weblog.destroy\n      logger.info(\""#{Time.now} Destroyed Weblog ID ##{@weblog.id}!\"")\n    end\n  end\n\nThe result will be a message in your log file along the lines of:\n\n  Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1\n\nMore information on how to use the logger is at http://www.ruby-doc.org/core/\n\nAlso, Ruby documentation can be found at http://www.ruby-lang.org/ including:\n\n* The Learning Ruby (Pickaxe) Book: http://www.ruby-doc.org/docs/ProgrammingRuby/\n* Learn to Program: http://pine.fm/LearnToProgram/  (a beginners guide)\n\nThese two online (and free) books will bring you up to speed on the Ruby language\nand also on programming in general.\n\n\n== Debugger\n\nDebugger support is available through the debugger command when you start your Mongrel or\nWebrick server with --debugger. This means that you can break out of execution at any point\nin the code, investigate and change the model, AND then resume execution! Example:\n\n  class WeblogController < ActionController::Base\n    def index\n      @posts = Post.find(:all)\n      debugger\n    end\n  end\n\nSo the controller will accept the action, run the first line, then present you\nwith a IRB prompt in the server window. Here you can do things like:\n\n  >> @posts.inspect\n  => \""[#<Post:0x14a6be8 @attributes={\\\""title\\\""=>nil, \\\""body\\\""=>nil, \\\""id\\\""=>\\\""1\\\""}>,\n       #<Post:0x14a6620 @attributes={\\\""title\\\""=>\\\""Rails you know!\\\"", \\\""body\\\""=>\\\""Only ten..\\\"", \\\""id\\\""=>\\\""2\\\""}>]\""\n  >> @posts.first.title = \""hello from a debugger\""\n  => \""hello from a debugger\""\n\n...and even better is that you can examine how your runtime objects actually work:\n\n  >> f = @posts.first\n  => #<Post:0x13630c4 @attributes={\""title\""=>nil, \""body\""=>nil, \""id\""=>\""1\""}>\n  >> f.\n  Display all 152 possibilities? (y or n)\n\nFinally, when you're ready to resume execution, you enter \""cont\""\n\n\n== Console\n\nYou can interact with the domain model by starting the console through <tt>script/console</tt>.\nHere you'll have all parts of the application configured, just like it is when the\napplication is running. You can inspect domain models, change values, and save to the\ndatabase. Starting the script without arguments will launch it in the development environment.\nPassing an argument will specify a different environment, like <tt>script/console production</tt>.\n\nTo reload your controllers and models after launching the console run <tt>reload!</tt>\n\n\n== Description of Contents\n\napp\n  Holds all the code that's specific to this particular application.\n\napp/controllers\n  Holds controllers that should be named like weblogs_controller.rb for\n  automated URL mapping. All controllers should descend from ApplicationController\n  which itself descends from ActionController::Base.\n\napp/models\n  Holds models that should be named like post.rb.\n  Most models will descend from ActiveRecord::Base.\n\napp/views\n  Holds the template files for the view that should be named like\n  weblogs/index.erb for the WeblogsController#index action. All views use eRuby\n  syntax.\n\napp/views/layouts\n  Holds the template files for layouts to be used with views. This models the common\n  header/footer method of wrapping views. In your views, define a layout using the\n  <tt>layout :default</tt> and create a file named default.erb. Inside default.erb,\n  call <% yield %> to render the view using this layout.\n\napp/helpers\n  Holds view helpers that should be named like weblogs_helper.rb. These are generated\n  for you automatically when using script/generate for controllers. Helpers can be used to\n  wrap functionality for your views into methods.\n\nconfig\n  Configuration files for the Rails environment, the routing map, the database, and other dependencies.\n\ndb\n  Contains the database schema in schema.rb.  db/migrate contains all\n  the sequence of Migrations for your schema.\n\ndoc\n  This directory is where your application documentation will be stored when generated\n  using <tt>rake doc:app</tt>\n\nlib\n  Application specific libraries. Basically, any kind of custom code that doesn't\n  belong under controllers, models, or helpers. This directory is in the load path.\n\npublic\n  The directory available for the web server. Contains subdirectories for images, stylesheets,\n  and javascripts. Also contains the dispatchers and the default HTML files. This should be\n  set as the DOCUMENT_ROOT of your web server.\n\nscript\n  Helper scripts for automation and generation.\n\ntest\n  Unit and functional tests along with fixtures. When using the script/generate scripts, template\n  test files will be generated for you and placed in this directory.\n\nvendor\n  External libraries that the application depends on. Also includes the plugins subdirectory.\n  This directory is in the load path.\n"""
https://github.com/jdhuntington/bus-scheme,"""= Bus Scheme\n    by Phil Hagelberg (c) 2007 - 2008\n    http://bus-scheme.rubyforge.org\n\n== Description\n\nBus Scheme is a Scheme written in Ruby, but implemented on the bus!\nEvery programmer must implement Scheme as a rite of passage; this is\nmine. Note that at least half of the implementation of Bus Scheme must\nbe written while on a bus. Documentation, tests, and administrivia may\nbe accomplished elsewhere, but the majority of actual implementation\ncode is strictly bus-driven. Bus Scheme is primarily a toy; using it\nfor anything serious is (right now) ill-advised.\n\nBus Scheme aims for general Scheme usefulness optimized for learning\nand fun. It's loosely targeting R5RS, but varies in huge ways. (For\nthe purposes of this project we pretend that R6RS never happened.) See\nthe file R5RS.diff for ways in which Bus Scheme differs from the\nstandard, both things that are yet unimplemented and things that are\nintentionally different.\n\n== Usage\n\n$ bus # drop into the REPL\n\n$ bus -e \""(do some stuff)\""\n\n$ bus foo.scm # load a file\n\n== Tutorial\n\nSee http://technomancy.us/104 for a \""Getting Started\"" tutorial.\n\n== Contributing\n\nIf you're looking for stuff to do, try \""rake todo\""\n\nPatches are welcome especially if they were written while riding a\nbus. If your daily commute does not involve a bus but you want to\nsubmit a patch, we may be able to work something out regarding code\nwritten on trains, ferries, or perhaps even carpool lanes.\n\nJoin the mailing list to ask questions and discuss:\nhttp://rubyforge.org/mail/?group_id=5094\n\n== What makes Bus Scheme different?\n\nWell, for starters it's implemented on the bus. No other Scheme\nimplementation can claim this. Here are a few other things that set\nBus Scheme apart:\n\n=== Flexible calling syntax\n\nTaking a hint from Arc, Bus Scheme allows you to use the notation\n(mylist n) to access the nth place of the mylist list instead of (nth\nmylist n) or the (myhash key) notation to access the slot in myhash\ncorresponding to the value of key instead of (gethash myhash key). \nTODO: This notation is flexible, and other data types may have\ntheir own \""call behaviour\"" specified.\n\n=== Web functionality\n\nPlanned: Web and RESTful application development are part of the\npackage. Bus Scheme uses the Rack library to allow scheme programs to\nserve web applications. Representations of data can be easily\ntranslated between s-expressions, HTML, and JSON.\n\n=== Written in a high-level language\n\nBus Scheme is written in Ruby, which means anyone with experience in\nhigh-level dynamic languages (like, oh, I don't know... Scheme?)\nshould be right at home poking around at the implementation. Using\nRuby allows the implementation code to remain compact and concise. Bus\nScheme should run on Ruby 1.8, Ruby 1.9, Rubinius, and JRuby at\nleast. Bus Scheme also allows you to drop into Ruby when that's\nconvenient. TODO: allow real inline Ruby blocks instead of access via\na function call.\n\n=== Test-Driven\n\nBus Scheme is written in an entirely test-driven manner. As much as\npossible, it tries to keep its tests written in Scheme itself, so it\nincludes a fairly comprehensive testing suite and encourages programs\nto be written test-first.\n\n== Install\n\n* sudo gem install bus-scheme\n\nFor the source:\n\n* git clone git://github.com/technomancy/bus-scheme.git\n\n== Todo\n\nBus Scheme is currently missing pieces of functionality:\n\n=== Parser\n* multiline strings\n* regular expressions\n\n=== General\n* filter stacktrace\n* continuations\n* macros\n\nFailing tests for some of these are already included (commented out,\nmostly) in the relevant test files.\n\n=== Long Term (post 1.0)\n* web functions (defresource and friends)\n* (lambda (arg1 arg2 . args) body) for rest args\n* string interpolation\n* escape sequences in strings\n* Ruby blocks inline?\n* XML literals?\n* optimize tail call recursion\n* compile to Rubinius bytecode\n* custom call behaviour\n* parse non-decimal base numbers\n* parse rationals, scientific, complex, and polar complex numbers\n\n== Requirements\n\nBus Scheme should run on (at least) Ruby 1.8, Ruby 1.9, Rubinius,\nJRuby. Any support for Windows is entirely accidental.\n\n== Bonus Fact\n\nI haven't actually used a real Scheme yet. Everything I know about it\nI've gathered from reading The Little Schemer, watching the Structure\nand Interpretation of Computer Programs videos, and reading lots about\nCommon Lisp and Emacs Lisp. If there are huge gaping flaws in the\nimplementation, this is likely to be why.\n"""
https://github.com/urubatan/mydry,"""Mydry\n=====\n\nThis plugin emulates some of the old \""scaffold\"" functionality, but using RESTFul controllers, will_paginate for pagination, partials for forms and enforces the model first approach.\n\nThe basic workflow is this:\n1 - create a migration and define your initial table\n2 - ./script/generate drymodel model_name\n\there the model file generated for you, will have all the validations and belongs defined in the database table\n\tyou can add more validations, configure relationships, code your model\n3 - ./script/generate dryscaffold model_name\n\there the scaffold will import the model definition (currently it is working with the database, but the next release will import from the model), and generate all the boilerplate code for you.\n\n\nThe origin of this plugin was the need to define a validation in the migration (Eg.: :null => false), in the model again (Eg.: validates_presence_of :column), then again in the view, ...\nThe way this generators work I define one thing once and it is generated in the other places for me.\n\n\nExample\n=======\n\nExample goes here.\n\n\nCopyright (c) 2008 Rodrigo Urubatan Ferreira Jardim, released under the MIT license\n"""
https://github.com/ericallam/hairball,"""Hairball is a Haml clone built using the Treetop parser generator library (http://treetop.rubyforge.org/)\n\nReally this was just a way for me to try out Treetop, so I put it up so other people could check out the .treetop file."""
https://github.com/reinh/dm,null
https://github.com/dgoodlad/bindata,"""= BinData\n\nA declarative way to read and write structured binary data.\n\n== What is it for?\n\nDo you ever find yourself writing code like this?\n\n  io = File.open(...)\n  len = io.read(2).unpack(\""v\"")\n  name = io.read(len)\n  width, height = io.read(8).unpack(\""VV\"")\n  puts \""Rectangle #{name} is #{width} x #{height}\""\n\nIt's ugly, violates DRY and feels like you're writing Perl, not Ruby.\nThere is a better way.\n\n  class Rectangle < BinData::Struct\n    uint16le :len\n    string   :name, :read_length => :len\n    uint32le :width\n    uint32le :height\n  end\n\n  io = File.open(...)\n  r = Rectangle.read(io)\n  puts \""Rectangle #{r.name} is #{r.width} x #{r.height}\""\n\nBinData makes it easy to specify the structure of the data you are\nmanipulating.\n\nRead on for the tutorial, or go straight to the\ndownload[http://rubyforge.org/frs/?group_id=3252] page.\n\n== Syntax\n\nBinData declarations are easy to read.  Here's an example.\n\n  class MyFancyFormat < BinData::Struct\n    stringz :comment\n    uint8   :count, :check_value => lambda { (value % 2) == 0 }\n    array   :some_ints, :type => :int32be, :initial_length => :count\n  end\n\nThe structure of the data in this example is\n1. A zero terminated string\n2. An unsigned 8bit integer which must by even\n3. A sequence of unsigned 32bit integers in big endian form, the total\n   number of which is determined by the value of the 8bit integer.\n\nThe BinData declaration matches the english description closely.  Just for\nfun, lets look at how we'd implement this using #pack and #unpack.  Here's\nthe writing code, have a go at the reading code.\n\n  comment = \""this is a comment\""\n  some_ints = [2, 3, 8, 9, 1, 8]\n  File.open(...) do |io|\n    io.write([comment, some_ints.size, *some_ints].pack(\""Z*CN*\""))\n  end\n\n\nThe general format of a BinData declaration is a class containing one or more\nfields.\n\n  class MyName < BinData::Struct\n    type field_name, :param1 => \""foo\"", :param2 => bar, ...\n    ...\n  end\n\n*type* is the name of a supplied type (e.g. <tt>uint32be</tt>,  +string+)\nor a user defined type.  For user defined types, convert the class name\nfrom CamelCase to lowercase underscore_style.\n\n*field_name* is the name by which you can access the data.  Use either a\nString or a Symbol.  You may specify a name as nil, but this is described\nlater in the tutorial.\n\nEach field may have *parameters* for how to process the data.  The\nparameters are passed as a Hash using Symbols for keys.\n\n== Handling dependencies between fields\n\nA common occurance in binary file formats is one field depending upon the\nvalue of another.  e.g. A string preceded by it's length.\n\nAs an example, let's assume a Pascal style string where the byte preceding\nthe string contains the string's length.\n\n  # reading\n  io = File.open(...)\n  len = io.getc\n  str = io.read(len)\n  puts \""string is \"" + str\n\n  # writing\n  io = File.open(...)\n  str = \""this is a string\""\n  io.putc(str.length)\n  io.write(str)\n\nHere's how we'd implement the same example with BinData.\n\n  class PascalString < BinData::Struct\n    uint8  :len,  :value => lambda { data.length }\n    string :data, :read_length => :len\n  end\n\n  # reading\n  io = File.open(...)\n  ps = PascalString.new\n  ps.read(io)\n  puts \""string is \"" + ps.data\n\n  # writing\n  io = File.open(...)\n  ps = PascalString.new\n  ps.data = \""this is a string\""\n  ps.write(io)\n\nThis syntax needs explaining.  Let's simplify by examining reading and\nwriting separately.\n\n  class PascalStringReader < BinData::Struct\n    uint8  :len\n    string :data, :read_length => :len\n  end\n\nThis states that when reading the string, the initial length of the string\n(and hence the number of bytes to read) is determined by the value of the\n+len+ field.\n\nNote that <tt>:read_length => :len</tt> is syntactic sugar for\n<tt>:read_length => lambda { len }</tt>, but more on that later.\n\n  class PascalStringWriter < BinData::Struct\n    uint8  :len, :value => lambda { data.length }\n    string :data\n  end\n\nThis states that the value of +len+ is always equal to the length of +data+.\n+len+ may not be manually modified.\n\nCombining these two definitions gives the definition for +PascalString+ as\npreviously defined.\n\nOnce thing to note with dependencies, is that a field can only depend on one\nbefore it.  You can't have a string which has the characters first and the\nlength afterwards.\n\n== Predefined Types\n\nThese are the predefined types.  Custom types can be created by composing\nthese types.\n\nBinData::Int8::     Signed  8 bit integer.\nBinData::Int16le::  Signed 16 bit integer (little endian).\nBinData::Int16be::  Signed 16 bit integer (big endian).\nBinData::Int32le::  Signed 32 bit integer (little endian).\nBinData::Int32be::  Signed 32 bit integer (big endian).\nBinData::Int64le::  Signed 64 bit integer (little endian).\nBinData::Int64be::  Signed 64 bit integer (big endian).\n\nBinData::Uint8::    Unsigned  8 bit integer.\nBinData::Uint16le:: Unsigned 16 bit integer (little endian).\nBinData::Uint16be:: Unsigned 16 bit integer (big endian).\nBinData::Uint32le:: Unsigned 32 bit integer (little endian).\nBinData::Uint32be:: Unsigned 32 bit integer (big endian).\nBinData::Uint64le:: Unsigned 64 bit integer (little endian).\nBinData::Uint64be:: Unsigned 64 bit integer (big endian).\n\nBinData::FloatLe::  Single precision floating point number (little endian).\nBinData::FloatBe::  Single precision floating point number (big endian).\nBinData::DoubleLe:: Double precision floating point number (little endian).\nBinData::DoubleBe:: Double precision floating point number (big endian).\n\nBinData::String::   A sequence of bytes.\nBinData::Stringz::  A zero terminated sequence of bytes.\n\nBinData::Array::    A list of objects of the same type.\nBinData::Choice::   A choice between several objects.\nBinData::Struct::   An ordered collection of named objects.\n\n== Parameters\n\n  class PascalStringWriter < BinData::Struct\n    uint8  :len, :value => lambda { data.length }\n    string :data\n  end\n\nRevisiting the Pascal string writer, we see that a field can take\nparameters.  Parameters are passed as a Hash, where the key is a symbol.\nIt should be noted that parameters are designed to be lazily evaluated,\npossibly multiple times.  This means that any parameter value must not have\nside effects.\n\nHere are some examples of legal values for parameters.\n\n  * :param => 5\n  * :param => lambda { 5 + 2 }\n  * :param => lambda { foo + 2 }\n  * :param => :foo\n\nThe simplest case is when the value is a literal value, such as 5.\n\nIf the value is not a literal, it is expected to be a lambda.  The lambda\nwill be evaluated in the context of the parent, in this case the parent is\nan instance of +PascalStringWriter+.\n\nIf the value is a symbol, it is taken as syntactic sugar for a lambda\ncontaining the value of the symbol.\ne.g <tt>:param => :foo</tt> is <tt>:param => lambda { foo }</tt>\n\n== Saving Typing\n\nThe endianess of numeric types must be explicitly defined so that the code\nproduced is independent of architecture.  Explicitly specifying the\nendianess of each numeric type can become tedious, so the following\nshortcut is provided.\n\n  class A < BinData::Struct\n    endian :little\n\n    uint16   :a\n    uint32   :b\n    double   :c\n    uint32be :d\n    array    :e, :type => :int16\n  end\n\nis equivalent to:\n\n  class A < BinData::Struct\n    uint16le  :a\n    uint32le  :b\n    double_le :c\n    uint32be  :d\n    array     :e, :type => :int16le\n  end\n\nUsing the endian keyword improves the readability of the declaration as well\nas reducing the amount of typing necessary.  Note that the endian keyword will\ncascade to nested types, as illustrated with the array in the above example.\n\n== Creating custom types\n\nCustom types should be created by subclassing BinData::Struct.\nOcassionally it may be useful to subclass BinData::Single.  Subclassing\nother classes may have unexpected results and is unsupported.\n\n\n== License\n\nBinData is released under the same license as Ruby.\n\nCopyright (c) 2007 Dion Mendel\n"""
https://github.com/rsl/stringex,null
https://github.com/caffo-archived/bookqueue,"""UPDATE: A updated (and much improved) version of this application is available as SaaS (software as a service) here: http://bookqueue.net/ \n\n\n= bookqueue\n\nbookqueue is a bookshelf application done in rails. under heavy development,\nthe current features includes:\n\n* Categorize your books in 3 main categories (Next/Current/Finished)\n* File upload for covers\n* RSS feed with queue activity\n* Twitter integration\n\n== REQUIREMENTS:\n\n* rails 2.1 (vendored)\n* some gems (vendored too)\n* imagemagick for cover manipulation\n\n\n== INSTRUCTIONS:\n\n- mkdir log\n- create a config/database.yml (rename and edit config/database.yml.example)\n- modify the session secret\n- rake db:migrate RAILS_ENV=production\n- modify config/amazon_s3.yml with your amazon s3 credentials (covers are uploaded to s3)\n- setup the webserver to access the app\n- access '/signup' and create your admin user.\n\nYou can later login into the admin area accessing '/login'. Feel free to customize the config.yml file with fancy configatron options.\n\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) 2008 Rodrigo Franco\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n"""
https://github.com/trey/yark,"""Yark: Web 1.0 Done Right\n\nInstallation instructions:\n\n- Set your DocumentRoot to yark/public/\n- chmod 777 yark/tmp/haml\n- Do your thing in content/ and templates/\n- Bring. It. Around. Town.\n"""
https://github.com/james/freefall,"""FreeFall\n========\n\nA personal CMS\n\nThe focus of Freefall is to refocus online lives back into single websites\n\nThis code is not currently Open Source, and while you clearly have access to the source code, just for now, you can't use it. This will change very soon.\n\nFeatures\n========\n\nInbuilt Tumblog and full Blog\nSupport for various APIs direct into your site:\n  * Twitter\n  * Flickr\n  * Ma.gnolia\n  * Last.fm hearted\n  * More to come\nOpenID authentication for Administration and User comments\nRESTful\n\nDependencies\n============\n\nGems\n----\nhaml"""
https://github.com/jackdempsey/merb-core,"""merb-core is a new branch of Merb (also referred to as merb-next or the 0.9 series) which aims to provide a stable, stripped down API for a future Merb 1.0 release.\n\nThis branch is based off the 0.5 release series but with significant rewrites.\n\nGoals of this release:\n\n  * Stabilize the @public interface methods to provide for a more consistent application development experience.\n  * Remove features until nothing except a central application API is left\n  * Improve comments on methods using a standard documentation methodology as described in DOCUMENTATION_STANDARDS\n  * Separate the tests into two sections... \""private\"" and \""public\""\n    * Public methods are methods tagged with @public that will be part of the standard, stable Merb API\n    * Private methods are implementation methods that might \n  * Implement a new render API\n  * Build more extensions to regain selected features when needed\n  \nTo familiarize yourself with how a merb-core application might look,\nuse merb-gen (from merb-more) to generate a few apps:\n$ merb-gen app myapp                   # a \""normal\"" merb app\n$ merb-gen app myapp --flat            # a flattened app\n$ merb-gen app myapp --very-flat       # a single-file app\n\n"""
https://github.com/nakajima/capistrano-bells,"""= Capistrano Bells\n  By Pat Nakajima.\n\n=== About\n\nCapistrano Bells is a collection of recipes intended to make deploying\nRails apps easier. That's it and that's all.\n\nCopyright (c) 2007-2008 Pat Nakajima, released under the MIT license\n"""
https://github.com/xraid/merb-core,"""merb-core is a new branch of Merb (also referred to as merb-next or the 0.9 series) which aims to provide a stable, stripped down API for a future Merb 1.0 release.\n\nThis branch is based off the 0.5 release series but with significant rewrites.\n\nGoals of this release:\n\n  * Stabilize the @public interface methods to provide for a more consistent application development experience.\n  * Remove features until nothing except a central application API is left\n  * Improve comments on methods using a standard documentation methodology as described in DOCUMENTATION_STANDARDS\n  * Separate the tests into two sections... \""private\"" and \""public\""\n    * Public methods are methods tagged with @public that will be part of the standard, stable Merb API\n    * Private methods are implementation methods that might \n  * Implement a new render API\n  * Build more extensions to regain selected features when needed\n  \nTo familiarize yourself with how a merb-core application might look,\nuse merb-gen (from merb-more) to generate a few apps:\n$ merb-gen myapp                   # a \""normal\"" merb app\n$ merb-gen myapp --flat            # a flattened app\n$ merb-gen myapp --very-flat       # a single-file app\n\n"""
https://github.com/cdwillie76/evm-portal,"""The Earned Value Management (EVM) Portal will allow for business users to easily\nmanage EVM related activities though a easy to use web interface.\n"""
https://github.com/judofyr/gemify,"""Gemify, the gemspec generator\n=============================\n\nOverview\n--------\n\nGemify is a simple tool which helps you generate gemspecs (which are\nused for building gems) and verify that your project follows the common\nand proven way to structure your Ruby packages.\n\nGetting started\n---------------\n\nGenerating gemspec:\n\n    $ gem install gemify\n    $ cd myproject (which doesn't have a gemspec yet)\n    $ gemify\n    Gemify needs to know a bit about your project, but should be\n    able to guess most of the information. Type the value if you\n    need to correct it, or press ENTER to accept the suggestion by Gemify.\n\n    Project name:        gemify? \n    Namespace:           Gemify? \n    Library:             lib/gemify? \n\n    *** Verifying the structure of lib/\n    [+] Please consider to define Gemify::VERSION in lib/gemify/version.rb\n    [.] Done\n\n    *** Verifying the structure of bin/\n    [.] Done\n\n    *** Verifying the structure of ext/\n    [.] Done\n\n    *** Generating a gemspec\n    [.] Done\n\n    Please open gemify.gemspec in your text editor and fill out the details.\n\n    You should fix any warnings that was reported above. You won't need to\n    generate a new gemspec after you've fixed them.\n\n    You must also define Gemify::VERSION in lib/gemify/version.rb.\n    Gemify has automatically created the file for you, so simply\n    open it in your text editor and fill in the current version.\n    \nOr if you just want to verify it:\n\n    $ gemify -v\n\n### Build and share a gem\n\nLet's not reinvent the wheel, shall we?\n\n    $ gem build foo.gemspec\n    $ gem push foo.gem\n\n\nAcknowledgements\n----------------\n\nThanks to [Pat Nakajima](http://patnakajima.com/) for reminding me that\nGemify still has its uses.\n\n\nContributors\n------------\n\n* David A. Cuadrado\n* Ben Wyrosdick\n* Chris Wanstrath\n* Pat Nakajima\n* Vincent Landgraf\n\n"""
https://github.com/macournoyer/mor7,"""Presentation I did of Thin at http://www.montrealonrails.com/2008/01/22/announcing-mor-7-presenters-that-was-fast/"""
https://github.com/halorgium/admin_tasks,null
https://github.com/trevorturk/eldorado,"""El Dorado\n=========\n\nEl Dorado is a full-stack community web application written in Ruby/Rails.\nIt features a forum, event calendar, group chat, file sharing, random headers,\navatars, themes, and privacy settings.\n\n- Code: <http://github.com/trevorturk/eldorado/>\n- Demo and support site: <http://eldorado.heroku.com/>\n- Examples: <http://wiki.github.com/trevorturk/eldorado/> # add your site!\n\n\nScreenshot\n----------\n\n![Screenshot](http://s3.amazonaws.com/trevorturk/eldorado.png)\n\n\nInstall\n----------\n\n    git clone git://github.com/trevorturk/eldorado.git\n    cd eldorado\n    cp config/database.example.yml config/database.yml\n    cp config/config.example.yml config/config.yml\n    gem install rails -v=2.3.9\n    rake gems:install\n    rake db:create\n    rake db:schema:load\n    script/server\n\nVisit <http://localhost:3000/> to see the app running locally.\n\n\nDeploy\n------\n\nDeploy the app to Heroku:\n\n    gem install heroku\n    heroku create\n    # set the variables for your production environment in config/config.yml\n    rake s3:create\n    rake heroku:config\n    git push heroku master\n    heroku rake db:schema:load\n    heroku open\n\n\nMIT License\n-----------\n\nCopyright (c) 2006-* Trevor Turk\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \""Software\""), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \""AS IS\"", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE."""
https://github.com/al3x/git-wiki,null
https://github.com/tobi/mephisto_textlinkads,"""MephistoTextlinkads\n===================\n\nSimple support for textlinkads. \n\nExample usage:\n\n\n   <ul>\n   {{ 'GC014CRPERVL1BFLJFJG' | textlinkads }}\n   </ul>"""
https://github.com/drudru/enroll,"""== Welcome to Rails\n\nRails is a web-application and persistence framework that includes everything\nneeded to create database-backed web-applications according to the\nModel-View-Control pattern of separation. This pattern splits the view (also\ncalled the presentation) into \""dumb\"" templates that are primarily responsible\nfor inserting pre-built data in between HTML tags. The model contains the\n\""smart\"" domain objects (such as Account, Product, Person, Post) that holds all\nthe business logic and knows how to persist themselves to a database. The\ncontroller handles the incoming requests (such as Save New Account, Update\nProduct, Show Post) by manipulating the model and directing data to the view.\n\nIn Rails, the model is handled by what's called an object-relational mapping\nlayer entitled Active Record. This layer allows you to present the data from\ndatabase rows as objects and embellish these data objects with business logic\nmethods. You can read more about Active Record in\nlink:files/vendor/rails/activerecord/README.html.\n\nThe controller and view are handled by the Action Pack, which handles both\nlayers by its two parts: Action View and Action Controller. These two layers\nare bundled in a single package due to their heavy interdependence. This is\nunlike the relationship between the Active Record and Action Pack that is much\nmore separate. Each of these packages can be used independently outside of\nRails.  You can read more about Action Pack in\nlink:files/vendor/rails/actionpack/README.html.\n\n\n== Getting Started\n\n1. At the command prompt, start a new Rails application using the <tt>rails</tt> command\n   and your application name. Ex: rails myapp\n   (If you've downloaded Rails in a complete tgz or zip, this step is already done)\n2. Change directory into myapp and start the web server: <tt>script/server</tt> (run with --help for options)\n3. Go to http://localhost:3000/ and get \""Welcome aboard: You\u2019re riding the Rails!\""\n4. Follow the guidelines to start developing your application\n\n\n== Web Servers\n\nBy default, Rails will try to use Mongrel and lighttpd if they are installed, otherwise\nRails will use WEBrick, the webserver that ships with Ruby. When you run script/server,\nRails will check if Mongrel exists, then lighttpd and finally fall back to WEBrick. This ensures\nthat you can always get up and running quickly.\n\nMongrel is a Ruby-based webserver with a C component (which requires compilation) that is\nsuitable for development and deployment of Rails applications. If you have Ruby Gems installed,\ngetting up and running with mongrel is as easy as: <tt>gem install mongrel</tt>.\nMore info at: http://mongrel.rubyforge.org\n\nIf Mongrel is not installed, Rails will look for lighttpd. It's considerably faster than\nMongrel and WEBrick and also suited for production use, but requires additional\ninstallation and currently only works well on OS X/Unix (Windows users are encouraged\nto start with Mongrel). We recommend version 1.4.11 and higher. You can download it from\nhttp://www.lighttpd.net.\n\nAnd finally, if neither Mongrel or lighttpd are installed, Rails will use the built-in Ruby\nweb server, WEBrick. WEBrick is a small Ruby web server suitable for development, but not\nfor production.\n\nBut of course its also possible to run Rails on any platform that supports FCGI.\nApache, LiteSpeed, IIS are just a few. For more information on FCGI,\nplease visit: http://wiki.rubyonrails.com/rails/pages/FastCGI\n\n\n== Debugging Rails\n\nSometimes your application goes wrong.  Fortunately there are a lot of tools that\nwill help you debug it and get it back on the rails.\n\nFirst area to check is the application log files.  Have \""tail -f\"" commands running\non the server.log and development.log. Rails will automatically display debugging\nand runtime information to these files. Debugging info will also be shown in the\nbrowser on requests from 127.0.0.1.\n\nYou can also log your own messages directly into the log file from your code using\nthe Ruby logger class from inside your controllers. Example:\n\n  class WeblogController < ActionController::Base\n    def destroy\n      @weblog = Weblog.find(params[:id])\n      @weblog.destroy\n      logger.info(\""#{Time.now} Destroyed Weblog ID ##{@weblog.id}!\"")\n    end\n  end\n\nThe result will be a message in your log file along the lines of:\n\n  Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1\n\nMore information on how to use the logger is at http://www.ruby-doc.org/core/\n\nAlso, Ruby documentation can be found at http://www.ruby-lang.org/ including:\n\n* The Learning Ruby (Pickaxe) Book: http://www.ruby-doc.org/docs/ProgrammingRuby/\n* Learn to Program: http://pine.fm/LearnToProgram/  (a beginners guide)\n\nThese two online (and free) books will bring you up to speed on the Ruby language\nand also on programming in general.\n\n\n== Debugger\n\nDebugger support is available through the debugger command when you start your Mongrel or\nWebrick server with --debugger. This means that you can break out of execution at any point\nin the code, investigate and change the model, AND then resume execution! Example:\n\n  class WeblogController < ActionController::Base\n    def index\n      @posts = Post.find(:all)\n      debugger\n    end\n  end\n\nSo the controller will accept the action, run the first line, then present you\nwith a IRB prompt in the server window. Here you can do things like:\n\n  >> @posts.inspect\n  => \""[#<Post:0x14a6be8 @attributes={\\\""title\\\""=>nil, \\\""body\\\""=>nil, \\\""id\\\""=>\\\""1\\\""}>,\n       #<Post:0x14a6620 @attributes={\\\""title\\\""=>\\\""Rails you know!\\\"", \\\""body\\\""=>\\\""Only ten..\\\"", \\\""id\\\""=>\\\""2\\\""}>]\""\n  >> @posts.first.title = \""hello from a debugger\""\n  => \""hello from a debugger\""\n\n...and even better is that you can examine how your runtime objects actually work:\n\n  >> f = @posts.first\n  => #<Post:0x13630c4 @attributes={\""title\""=>nil, \""body\""=>nil, \""id\""=>\""1\""}>\n  >> f.\n  Display all 152 possibilities? (y or n)\n\nFinally, when you're ready to resume execution, you enter \""cont\""\n\n\n== Console\n\nYou can interact with the domain model by starting the console through <tt>script/console</tt>.\nHere you'll have all parts of the application configured, just like it is when the\napplication is running. You can inspect domain models, change values, and save to the\ndatabase. Starting the script without arguments will launch it in the development environment.\nPassing an argument will specify a different environment, like <tt>script/console production</tt>.\n\nTo reload your controllers and models after launching the console run <tt>reload!</tt>\n\n\n== Description of Contents\n\napp\n  Holds all the code that's specific to this particular application.\n\napp/controllers\n  Holds controllers that should be named like weblogs_controller.rb for\n  automated URL mapping. All controllers should descend from ApplicationController\n  which itself descends from ActionController::Base.\n\napp/models\n  Holds models that should be named like post.rb.\n  Most models will descend from ActiveRecord::Base.\n\napp/views\n  Holds the template files for the view that should be named like\n  weblogs/index.erb for the WeblogsController#index action. All views use eRuby\n  syntax.\n\napp/views/layouts\n  Holds the template files for layouts to be used with views. This models the common\n  header/footer method of wrapping views. In your views, define a layout using the\n  <tt>layout :default</tt> and create a file named default.erb. Inside default.erb,\n  call <% yield %> to render the view using this layout.\n\napp/helpers\n  Holds view helpers that should be named like weblogs_helper.rb. These are generated\n  for you automatically when using script/generate for controllers. Helpers can be used to\n  wrap functionality for your views into methods.\n\nconfig\n  Configuration files for the Rails environment, the routing map, the database, and other dependencies.\n\ndb\n  Contains the database schema in schema.rb.  db/migrate contains all\n  the sequence of Migrations for your schema.\n\ndoc\n  This directory is where your application documentation will be stored when generated\n  using <tt>rake doc:app</tt>\n\nlib\n  Application specific libraries. Basically, any kind of custom code that doesn't\n  belong under controllers, models, or helpers. This directory is in the load path.\n\npublic\n  The directory available for the web server. Contains subdirectories for images, stylesheets,\n  and javascripts. Also contains the dispatchers and the default HTML files. This should be\n  set as the DOCUMENT_ROOT of your web server.\n\nscript\n  Helper scripts for automation and generation.\n\ntest\n  Unit and functional tests along with fixtures. When using the script/generate scripts, template\n  test files will be generated for you and placed in this directory.\n\nvendor\n  External libraries that the application depends on. Also includes the plugins subdirectory.\n  This directory is in the load path.\n"""
https://github.com/russ/jacks-php,"""I am Jack's PHP framework.\n\nJack's PHP came out of a project for a client that needs a slightly complex website\nthat required PHP4 to run. Looking for a small framwork that stayed out of the way\nwas fruitless. So Jack's PHP came together over the course of a couple of days. It's\nbeen receiving some care since then.\n\nFeatures:\n* Works on PHP4 (if that really is a feature).\n* Small footprint, under 2K lines of code.\n* Stays out of your way.\n\nSee http://jacks.bashme.org for more information.\n\n===================================================================================\n\nNotes:\n\nThere is a test folder in the root directory of the application. Jack's PHP doesn't\nprovide any testing tools at the moment (probably won't ever). Use something like\nPHPUnit or SimpleTest if you want to attempt unit testing with PHP.\n\n===================================================================================\n\nCredits:\n\nRuss Smith, Stephan Walton\n\nSome code borrowed from the Creovel project (http://www.creovel.org).\n"""
https://github.com/mbbx6spp/metafusion,"""Metafusion\n==========\n\nSet of Ruby libraries that provide convenience for application developers from cryptography to configuration that utilize metadata in some form.\n\nDevelopers\n==========\n* Susan Potter <me at susanpotter dot net>\n"""
https://github.com/shadowmaru/cd-covers,"""== Welcome to Rails\n\nRails is a web-application and persistence framework that includes everything\nneeded to create database-backed web-applications according to the\nModel-View-Control pattern of separation. This pattern splits the view (also\ncalled the presentation) into \""dumb\"" templates that are primarily responsible\nfor inserting pre-built data in between HTML tags. The model contains the\n\""smart\"" domain objects (such as Account, Product, Person, Post) that holds all\nthe business logic and knows how to persist themselves to a database. The\ncontroller handles the incoming requests (such as Save New Account, Update\nProduct, Show Post) by manipulating the model and directing data to the view.\n\nIn Rails, the model is handled by what's called an object-relational mapping\nlayer entitled Active Record. This layer allows you to present the data from\ndatabase rows as objects and embellish these data objects with business logic\nmethods. You can read more about Active Record in\nlink:files/vendor/rails/activerecord/README.html.\n\nThe controller and view are handled by the Action Pack, which handles both\nlayers by its two parts: Action View and Action Controller. These two layers\nare bundled in a single package due to their heavy interdependence. This is\nunlike the relationship between the Active Record and Action Pack that is much\nmore separate. Each of these packages can be used independently outside of\nRails.  You can read more about Action Pack in\nlink:files/vendor/rails/actionpack/README.html.\n\n\n== Getting Started\n\n1. At the command prompt, start a new Rails application using the <tt>rails</tt> command\n   and your application name. Ex: rails myapp\n   (If you've downloaded Rails in a complete tgz or zip, this step is already done)\n2. Change directory into myapp and start the web server: <tt>script/server</tt> (run with --help for options)\n3. Go to http://localhost:3000/ and get \""Welcome aboard: You\u2019re riding the Rails!\""\n4. Follow the guidelines to start developing your application\n\n\n== Web Servers\n\nBy default, Rails will try to use Mongrel and lighttpd if they are installed, otherwise\nRails will use WEBrick, the webserver that ships with Ruby. When you run script/server,\nRails will check if Mongrel exists, then lighttpd and finally fall back to WEBrick. This ensures\nthat you can always get up and running quickly.\n\nMongrel is a Ruby-based webserver with a C component (which requires compilation) that is\nsuitable for development and deployment of Rails applications. If you have Ruby Gems installed,\ngetting up and running with mongrel is as easy as: <tt>gem install mongrel</tt>.\nMore info at: http://mongrel.rubyforge.org\n\nIf Mongrel is not installed, Rails will look for lighttpd. It's considerably faster than\nMongrel and WEBrick and also suited for production use, but requires additional\ninstallation and currently only works well on OS X/Unix (Windows users are encouraged\nto start with Mongrel). We recommend version 1.4.11 and higher. You can download it from\nhttp://www.lighttpd.net.\n\nAnd finally, if neither Mongrel or lighttpd are installed, Rails will use the built-in Ruby\nweb server, WEBrick. WEBrick is a small Ruby web server suitable for development, but not\nfor production.\n\nBut of course its also possible to run Rails on any platform that supports FCGI.\nApache, LiteSpeed, IIS are just a few. For more information on FCGI,\nplease visit: http://wiki.rubyonrails.com/rails/pages/FastCGI\n\n\n== Debugging Rails\n\nSometimes your application goes wrong.  Fortunately there are a lot of tools that\nwill help you debug it and get it back on the rails.\n\nFirst area to check is the application log files.  Have \""tail -f\"" commands running\non the server.log and development.log. Rails will automatically display debugging\nand runtime information to these files. Debugging info will also be shown in the\nbrowser on requests from 127.0.0.1.\n\nYou can also log your own messages directly into the log file from your code using\nthe Ruby logger class from inside your controllers. Example:\n\n  class WeblogController < ActionController::Base\n    def destroy\n      @weblog = Weblog.find(params[:id])\n      @weblog.destroy\n      logger.info(\""#{Time.now} Destroyed Weblog ID ##{@weblog.id}!\"")\n    end\n  end\n\nThe result will be a message in your log file along the lines of:\n\n  Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1\n\nMore information on how to use the logger is at http://www.ruby-doc.org/core/\n\nAlso, Ruby documentation can be found at http://www.ruby-lang.org/ including:\n\n* The Learning Ruby (Pickaxe) Book: http://www.ruby-doc.org/docs/ProgrammingRuby/\n* Learn to Program: http://pine.fm/LearnToProgram/  (a beginners guide)\n\nThese two online (and free) books will bring you up to speed on the Ruby language\nand also on programming in general.\n\n\n== Debugger\n\nDebugger support is available through the debugger command when you start your Mongrel or\nWebrick server with --debugger. This means that you can break out of execution at any point\nin the code, investigate and change the model, AND then resume execution! Example:\n\n  class WeblogController < ActionController::Base\n    def index\n      @posts = Post.find(:all)\n      debugger\n    end\n  end\n\nSo the controller will accept the action, run the first line, then present you\nwith a IRB prompt in the server window. Here you can do things like:\n\n  >> @posts.inspect\n  => \""[#<Post:0x14a6be8 @attributes={\\\""title\\\""=>nil, \\\""body\\\""=>nil, \\\""id\\\""=>\\\""1\\\""}>,\n       #<Post:0x14a6620 @attributes={\\\""title\\\""=>\\\""Rails you know!\\\"", \\\""body\\\""=>\\\""Only ten..\\\"", \\\""id\\\""=>\\\""2\\\""}>]\""\n  >> @posts.first.title = \""hello from a debugger\""\n  => \""hello from a debugger\""\n\n...and even better is that you can examine how your runtime objects actually work:\n\n  >> f = @posts.first\n  => #<Post:0x13630c4 @attributes={\""title\""=>nil, \""body\""=>nil, \""id\""=>\""1\""}>\n  >> f.\n  Display all 152 possibilities? (y or n)\n\nFinally, when you're ready to resume execution, you enter \""cont\""\n\n\n== Console\n\nYou can interact with the domain model by starting the console through <tt>script/console</tt>.\nHere you'll have all parts of the application configured, just like it is when the\napplication is running. You can inspect domain models, change values, and save to the\ndatabase. Starting the script without arguments will launch it in the development environment.\nPassing an argument will specify a different environment, like <tt>script/console production</tt>.\n\nTo reload your controllers and models after launching the console run <tt>reload!</tt>\n\n\n== Description of Contents\n\napp\n  Holds all the code that's specific to this particular application.\n\napp/controllers\n  Holds controllers that should be named like weblogs_controller.rb for\n  automated URL mapping. All controllers should descend from ApplicationController\n  which itself descends from ActionController::Base.\n\napp/models\n  Holds models that should be named like post.rb.\n  Most models will descend from ActiveRecord::Base.\n\napp/views\n  Holds the template files for the view that should be named like\n  weblogs/index.erb for the WeblogsController#index action. All views use eRuby\n  syntax.\n\napp/views/layouts\n  Holds the template files for layouts to be used with views. This models the common\n  header/footer method of wrapping views. In your views, define a layout using the\n  <tt>layout :default</tt> and create a file named default.erb. Inside default.erb,\n  call <% yield %> to render the view using this layout.\n\napp/helpers\n  Holds view helpers that should be named like weblogs_helper.rb. These are generated\n  for you automatically when using script/generate for controllers. Helpers can be used to\n  wrap functionality for your views into methods.\n\nconfig\n  Configuration files for the Rails environment, the routing map, the database, and other dependencies.\n\ndb\n  Contains the database schema in schema.rb.  db/migrate contains all\n  the sequence of Migrations for your schema.\n\ndoc\n  This directory is where your application documentation will be stored when generated\n  using <tt>rake doc:app</tt>\n\nlib\n  Application specific libraries. Basically, any kind of custom code that doesn't\n  belong under controllers, models, or helpers. This directory is in the load path.\n\npublic\n  The directory available for the web server. Contains subdirectories for images, stylesheets,\n  and javascripts. Also contains the dispatchers and the default HTML files. This should be\n  set as the DOCUMENT_ROOT of your web server.\n\nscript\n  Helper scripts for automation and generation.\n\ntest\n  Unit and functional tests along with fixtures. When using the script/generate scripts, template\n  test files will be generated for you and placed in this directory.\n\nvendor\n  External libraries that the application depends on. Also includes the plugins subdirectory.\n  This directory is in the load path.\n"""
https://github.com/jnewland/fireeagle,"""FireEagle[http://fireeagle.yahoo.net] (FE) is a system providing centralized\nmanagement of user location information. FE allows 3rd party developers to\npdate and/or access user's location data.\n\nhttp://fireeagle.yahoo.net/developer/documentation\n\n== Installation\n\n gem install fireeagle\n \n== Usage\n\n  >> require 'fireeagle'\n  >> client = FireEagle::Client.new(\n    :consumer_key        => \""<consumer key>\"",\n    :consumer_secret     => \""<consumer secret>\"",\n    :access_token        => \""[access token]\"",\n    :access_token_secret => \""[access token secret]\"")\n\n==== With a User-specific OAuth Access Token\n\n  # update your location\n  >> client.update(:q => \""punta del diablo, uruguay\"") # I wish\n  # query your location\n  >> user = client.user\n  => #<FireEagle::User:0x1ca5e08 ... >\n  >> user.locations\n  => [#<FireEagle::Location:0x1cdd9e8 ...>, #<FireEagle::Location:0x1cc8ffc ...>, ... ]\n  >> user.best_guess\n  => #<FireEagle::Location:0x1cdd9e8 ...>\n  >> user.best_guess.name\n  => \""Punta del Diablo, Uruguay\""\n  # lookup a location\n  >> locations = client.lookup(:q => \""30022\"")\n  => [#<FireEagle::Location:0x1cdd9e8 ...>, #<FireEagle::Location:0x1cc8ffc ...>, ...]\n  >> locations.first.name => \""Alpharetta, GA 30022\""\n  >> locations.first.place_id => \""IrhZMHuYA5s1fFi4Qw\""\n\n== Authorization\n\nAuthorization is handled by OAuth. For more details about the OAuth\nauthorization flow and how it differs based on your application type, please\nsee http://fireeagle.yahoo.net/developer/documentation/authorizing\n\n== Contributing\n\nhttp://github.com/jnewland/fireeagle/tree/master. You know what to do.\n\nRubyforge Project Page:: http://rubyforge.org/projects/fireeagle\nAuthor::    Jesse Newland (http://soylentfoo.jnewland.com) (jnewland@gmail.com[mailto:jnewland@gmail.com])\nCopyright:: Copyright (c) 2008 Jesse Newland. Portions[http://pastie.caboo.se/private/oevvkdzl0zrdkf8s7hetg] Copyright (c) 2008 Yahoo!\nLicense::   Distributed under the same terms as Ruby\n"""
https://github.com/kevinansfield/viper,"""Required Gems:\r\n\r\n\t- ar_mailer (requires: hoe, rubyforge)\r\n\t- redcloth\r\n\t- ferret\r\n\t- rmagick\r\n\t- linguistics\r\n\t- markaby (requires: builder)"""
https://github.com/sxross/ruby-on-rails-tmbundle,"""TextMate bundle for Ruby on Rails development\n\nGET IT NOW: with Rails 2.0 support.\n\nRails 2.0 (copied from CHANGELOG)\n\n* Snippets/Commands for:\n  * Tests\n    * assert_select (ass)\n    * assert_difference/assert_no_difference (asd/asnd)\n    * GET+POST test method stubs (defg+defp)\n  * Controllers\n    * respond_to (rst)\n    * REMOVED: render_component snippets\n    * loggers - pass a block instead of raw string to save time if logging not used (e.g. production) [thx Stephen Touset]\n    * redirect_to for resource paths (rep, repp, renp, renpp)\n    * render :update (ru) [thx Simon Jefford]\n  * Views\n    * form_for (ff)\n    * link_to for resource paths (lip, lipp, linp, linpp)\n    * <% end -%> (end)\n  * Models\n    * has_many :though (hmt)\n    * association snippets give better defaults (e.g. bt + hm)\n    * validates_format_of (vf,vfif) [thx Dean Strelau]\n  * Migrations\n    * Sexy Migrations now available as \""t.\"" snippets [thx Lawrence Pit]\n    * Migration classes have own textmate scope\n    * Add/Remove Columns - the 'down' statements are in reverse order [thx Lawrence Pit, Daniel Kristensen]\n* Language/Syntax\n  * New keywords: rescue_from\n  * Added rb as a valid Rails file type [thx James Deville]\n* Commands\n  * html.erb is the default for new templates (backwards compatibility is being worked on too)\n* Plugins\n  * Footnote\n    * footnote-edge uses .erb for templates [thx Stephen Bannasch]\n\n"""
https://github.com/nakajima/many-mailers,"""ManyMailers\n===========\n\nMultiple SMTP servers for ActionMailer.\n\nExample\n=======\n\n  ProjectMailer.with_settings(:internal) do |mailer|\n    mailer.deliver_notification(blah)\n  end\n\nYou can also specify servers to use in the event that the initially specified\nserver fails:\n\n  ProjectMailer.with_settings(:internal, :retry => [:backup, :default]) do |mailer|\n    mailer.deliver_notification(blah)\n  end\n\nUSE\n===\n\nCreate a YAML file in your config directory named \""mail_servers.yml\"" Put\nyour mail settings in there like so (see mail_servers.yaml in this plugin's \ntest directory for a better example):\n\n  |default:\n  |  address: mail.example.com\n  |  port: 25\n  |  domain: example.com\n  |  user_name: test_user\n  |  password: test_password\n  |\n  |internal:\n  |  address: internal.example.com\n  |  port: 25\n  |  domain: example.com\n  |  user_name: test_user\n  |  password: test_password\n    \nThe plugin will look for a server named \""default\"" to use by default. Make sure\nit exists.\n\nActionMailer::Base (and all of its subclasses, ie, your mailers) will use this\nserver by default.\n\nTODO\n====\n\n* Per-mailer settings (non-global)\n* ActionMailer::Base#with_settings shouldn't modify SMTP settings for other\n  mailers besides the one that called it.\n  \n\nCopyright (c) 2008 Animoto Productions, released under the MIT license\n"""
https://github.com/andykent/jquery-humanize-messages-plugin,"""jQuery Humanize Plugin - By Andy Kent\n======================================================\n\nThis plugin is a great way of showing user feedback\nwithout distracting flow. It shows a semi-transparent\noverlay on top of the current page which fades away\nas soon as the user interacts with the browser in\nany way.\n\n\nUsage\n------------------------------------------------------\n\nYou will need to include both the JS and CSS files\nfirst, feel free to customize the CSS as you feel\nfit.\n\nThe first example will search for an element with a\nclass of 'feedback' and then display it's contents\nto the user immediately, it's great for showing\nrails flash messages and the like.\n\n$(document).ready(function(){\n\t$.humanize();\n});\n\nThe second example shows the provided message to the\nuser as soon as it is called. This is great for use\nin AJAX callbacks and validation checks.\n\n$.humanize('hello this is a message');\n\n\nOptions\n------------------------------------------------------\n\n$.humanize([msg:String],options:Object);\n\nThe defaults should be fine for most people but the \nplugin does take several options if you want to\ncustomize things. Options can be passed in as the\nlast parameter to $.humanize(); or set globally\nvia $.humanize.defaults\n\nbaseSelector ('.feedback)\nThe jQuery selector to be used to find and display \nthe message.\n\ncontainer ('<p class=\""feedback\"">&nbsp;</p>')\nThe html to use so a container can be added if none \nexists.\n\nfadeIn ({easing:'swing', duration:1000})\nOptions to be passed to the jQuery animate function\nwhen fading the message in.\n\nfadeOut ({easing:'swing', duration:1000})\nOptions to be passed to the jQuery animate function\nwhen fading the message out.\n\nopacity : 0.8\nvalue between 0 and 1 for the final message opacity.\n\n\nCredits\n------------------------------------------------------\n\nCreated by: Andy Kent\nContributors: YOUR NAME HERE ?\n\nI'd love to hear about any bugs/improvements/patches\nthat you may have and will always credit people where\nappropriate. Thanks."""
https://github.com/anotherjesse/elasticfox,"""This is a Mozilla Firefox extension for interacting with Amazon EC2. The source code\nalso functions as an example of how to use the Amazon EC2 Query API from\nJavaScript.\n\nUsage:\n\nThe extension can be installed by opening the .xpi file contained in the archive that includes\nthis README file. Alternatively, the latest version of the .xpi file is hosted in Amazon\nS3 at the following URL:\n\n  http://s3.amazonaws.com/ec2-downloads/ec2ui.xpi\n\nIf you visit the link above using Mozilla Firefox you will be prompted regarding the\ninstallation of the extension.\n\nPrerequisites:\n\nThis extension requires Mozilla Firefox version 1.5.0 or later.\n\nSource Code:\n\nThe .xpi file is really just a renamed ZIP archive. Your garden variety ZIP utilities can be \nused to unzip it. Within this archive you will find a file named ec2ui.jar. This is also just\na renamed JAR archive so you can explore it in the same way. This JAR file contains the bulk\nof the interesting source code. Highlights include:\n\n  content/ec2ui/client.js\n    This file contains the logic to construct and sign requests to Amazon EC2.\n\n  content/ec2ui/controller.js\n    This file wraps client.js and includes logic to unpack Amazon EC2 responses.\n"""
https://github.com/mojombo/fixture-scenarios,"""Copyright (c) 2007 Tom Preston-Werner\n\n=FixtureScenarios\n\nThis plugin allows you to create \""scenarios\"" which are collections of fixtures\nand ruby files that represent a context against which you can run tests.\n\n==Disclaimer\n\nThis software is in Beta.\nSend feedback to tom at rubyisawesome dot com or find me (mojombo) on irc.freenode.net.\n\n==Installation\n\nFixtureScenarios should work on both 1.1.6 and edge rails.\nCurrently you must install this plugin from the subversion repository\n\n  script/plugin install http://fixture-scenarios.googlecode.com/svn/trunk/fixture_scenarios\n\n==WARNING\n\nBecause this plugin clears out fixture data between your test classes, you may\nsee some of your tests fail after installation. If this occurs, look at your\ntests to see if you didn't actually load a required fixture for that test\nclass. If you forgot to add it and your tests passed anyway (because of\nfixture contamination), just add the missing fixture(s) and you'll be good\nto go.\n\n==The Basics\n\nTo create a scenario, simply create a subdirectory under test/fixtures in your\nRails app. The name of the subdirectory will be the name of the scenario.\nInside this new directory, you can place fixture files, and/or Ruby files.\n\n  [RAILS_ROOT]\n  +-test/\n    +-fixtures/\n      +-brand_new_user/\n        +-users.yml\n  \n  # in users.yml\n  borges:\n    id: 1\n    name: Jorge Luis Borges\n    active: 1\n\nTo load the scenario for testing, you simply use the +scenario+ method instead\nof the normal +fixtures+ method.\n\n  require File.dirname(__FILE__) + '/../test_helper'\n\n  class UserTest < Test::Unit::TestCase\n    scenario :brand_new_user\n\n    def test_should_be_active\n      assert users(:borges).active?\n    end\n  end\n\nAll of the fixtures placed into your scenario directory will be loaded when\nyou invoke the +scenario+ method with your scenario name. In addition, any\nRuby files you place in the scenario directory will be run after the fixtures.\nYou can use a Ruby file to create non-database model instances, set up\nrelationships between fixtures (instead of creating fixtures for the join\ntables), or replace fixtures entirely by creating your database items with\nRuby code.\n\nIn this example, +scenario+ will actually load all fixtures from the fixture\ndirectory *and* your scenario directory. This is useful if you have some\nfixtures (such as lookup data) that you'd like to have in most of your\nscenarios. To prevent the loading of fixtures in the fixtures root directory,\nuse the <tt>:root</tt> option. This can be very useful if you still have tests\nusing regular fixtures.\n\n  scenario :brand_new_user, :root => false\n  \nIf you've just started FixtureScenarios on an existing project, adding\n:root => false to every scenario call will become tedious, so you can set\nthe option globally in your test_helper.rb (inside the Test::Unit::TestCase\nclass) like so:\n\n  self.scenarios_load_root_fixtures = false\n\nTo keep things DRY in your scenarios, you can extend or layer scenarios on top\nof each other. Following with our example, to create an \""experienced user\""\nscenario, we could create another subdirectory under the existing\n\""brand_new_user\"" that would contain fixture/Ruby files that add upon the\n\""brand new user\"" scenario.\n\n  [RAILS_ROOT]\n  +-test/\n    +-fixtures/\n      +-brand_new_user/\n        +-users.yml\n        +-experienced_user/\n          +-articles.yml\n\nNow when you load the +experienced_user+ scenario, it will load any\nfixture/Ruby files in \""fixtures\"", then in \""brand_new_user\"", then in\n\""experienced_user\""! Building off of your existing scenarios keeps data\nredundancy to a minimum, and makes it easy to change data for multiple\nscenarios simultaneously.\n\n==Testing your scenarios\n\nScenarios represent your assumptions about a given context. If these\nassumptions are wrong, your tests will be inaccurate. Your scenarios should be\nunit tested along with the rest of your application. This plugin allows you to\nplace scenario tests in a \""scenario\"" directory under your \""test\"" directory.\n\n  [RAILS_ROOT]\n  +-test/\n    +-scenario/\n      +-brand_new_user_test.rb\n      +-experienced_user_test.rb\n  \nYou can run these tests with rake.\n\n  rake test:scenarios  # run just scenario tests\n  rake                 # run unit, functional, integration, and scenario tests\n\nScenario tests will protect you from accidentally changing your assumptions in\na dangerous or transparent way when modifying existing scenarios."""
https://github.com/anotherjesse/git-wiki,"""= git-wiki -- because who needs cool names when you use git?\n\n== Requirements\n\nrubygems\nsinatra\ngrit\nredcloth\nrubypants\nultraviolet (uv) - a pain to install - required installing Onigurama ala\n                   http://snippets.aktagon.com/snippets/61\n\n"""
https://github.com/zachinglis/rails-plugins,null
https://github.com/halorgium/nginx,null
https://github.com/cbowns/cpu-history,null
https://github.com/IoLanguage/io,"""# The Io Language\n\n_Note: This document is intended to be used as a reference for setting up and configuring Io. For a guide on how to use the language itself, please visit the website at <http://iolanguage.org/guide/guide.html>._\n\n# Table of Contents\n\n* [Table of Contents](#table-of-contents)\n* [What is Io?](#what-is-io)\n\t* [Example Code](#example-code)\n\t* [Quick Links](#quick-links)\n* [Installing](#installing)\n\t* [From a Package Manager](#from-a-package-manager)\n\t* [From Source](#from-source)\n\t\t* [Linux Build Instructions](#linux-build-instructions)\n\t\t\t* [Note About Building Eerie](#note-about-building-eerie)\n\t\t* [OS X Build Instructions](#os-x-build-instructions)\n\t\t* [Windows Build Instructions](#windows-build-instructions)\n\t\t\t* [Building with MSVC](#building-with-msvc)\n\t\t\t* [Building with MinGW](#building-with-mingw)\n\t\t\t* [Building with MinGW-W64](#building-with-mingw-w64)\n\t\t\t* [Building with Cygwin](#building-with-cygwin)\n* [Running Tests](#running-tests)\n* [Installing Addons](#installing-addons)\n\nWhat is Io?\n=====\n\nIo is a dynamic prototype-based programming language in the same realm as Smalltalk and Self. It revolves around the idea of message passing from object to object.\n\nFor further information, the programming guide and reference manual can be found in the docs folder.\n\nQuick Links\n---\n* The Wikipedia page for Io has a good overview and shows a few interesting examples of the language: <https://en.wikipedia.org/wiki/Io_(programming_language)>.\n* The entry on the c2 wiki has good discussion about the merits of the language: <http://wiki.c2.com/?IoLanguage>.\n\n\nInstalling\n==========\n\nFrom a Package Manager\n---\n\nIo is currently only packaged for OS X. To install it, open a terminal and type:\n\n```\nbrew install io\n```\n\nNote that this package may not be as updated as the version from the source repository.\n\nFrom Source\n---\n\n### Linux Build Instructions\n\nFirst, make sure that this repo and all of its submodules have been cloned to your computer by running `git clone` with the `--recursive` flag:\n\n```\ngit clone --recursive https://github.com/IoLanguage/io.git\n```\n\nIo uses the [CMake build system](https://cmake.org/) and supports all of the normal flags and features provided by CMake. To prepare the project for building, run the following commands:\n\n```\ncd io/           # To get into the cloned folder\nmkdir build      # To contain the CMake data\ncd build/\ncmake ..         # This populates the build folder with a Makefile and all of the related things necessary to begin building\n```\n\nIn a production environment, pass the flag `-DCMAKE_BUILD_TYPE=release` to the `cmake` command to ensure that the C compiler does the proper optimizations. Without this flag, Io is built in debug mode without standard C optimizations.\n\nTo install to a different folder than `/usr/local/bin/`, pass the flag `-DCMAKE_INSTALL_PREFIX=/path/to/your/folder/` to the `cmake` command.\n\nTo build without Eerie, the Io package manager, pass the flag `-DWITHOUT_EERIE=1` to the `cmake` command.\n\nOnce CMake has finished preparing the build environment, ensure you are inside the build folder, and run:\n\n```\nmake\nsudo make install\n```\n\nThis should build and install the Io language and Eerie, the Io package manager. Io can then be run with the `io` command and Eerie can be run with the `eerie` command.\n\n#### Note About Building Eerie\n\nRunning `eerie` after installing with `sudo make install` may shoot back an error such as this one:\n\n```\nException: unable to open file path '/home/<user>/.eerie/config.json': Permission denied\n---------\nopenForUpdating                     Eerie.io 77\nObject Eerie                         eerie 3\nCLI doFile                           Z_CLI.io 140\nCLI run                              IoState_runCLI() 1\n```\n\nIf this occurs, this is because the `~/.eerie/` folder isn't accessible due to your user permissions. To fix this, go to your home folder and run:\n\n```\nsudo chown -R <your username>:<your username> .eerie/\n```\n\n\n### OS X Build Instructions\n\nSee the [Linux build instructions](#linux-build-instructions).\n\n### Windows Build Instructions\n\nFor all the different methods explained here, some of the addons won't compile as they depend on libraries not provided by Io.\n\nFor methods A and B you must download and install CMake (at least v2.8) from here: <http://www.cmake.org/cmake/resources/software.html>\n\nFor method C you must install the CMake Cygwin package (at least v2.8) using the Cygwin package installer.\n\nFor the `make install` command, if you are on Windows 7/Vista you will need to run your command prompts as Administrator: right-click on the command prompt launcher->\""Run as administrator\"" or something similar)\n\nYou will also need to add `<install_drive>:\\<install_directory>\\bin` and `<install_drive>:\\<install_directory>\\lib` to your `PATH` environment variable.\n\n#### Building with MSVC\n\n1. Install Microsoft Visual C++ 2008 Express (should work with other versions).\n2. Install Microsoft Windows SDK 7.0 (or newer).\n3. Install CMake (v2.8 at least)\n4. Run \""Vistual Studio 2008 Command Prompt\"" from the \""Microsoft Visual Studio 2008\"" start menu.\n5. `cd` to `<install_drive>:\\Microsoft SDKs\\Windows\\v7.0\\Setup` then run: `WindowsSdkVer.exe -version:v7.0`\n6. Close the command prompt window and run step 4 again\n7. Ensure CMake bin path is in the `PATH` environment variable (eg: `echo %PATH%` and see that the folder is there) if not you will have to add it to your `PATH`.\n8. `cd` to your Io root folder\n9. We want to do an out-of-source build, so: `mkdir buildroot` and `cd buildroot`\n10. a) `cmake ..`\n\n\tor\n\n\tb) `cmake -DCMAKE_INSTALL_PREFIX=<install_drive>:\\<install_directory> ..` (eg: `cmake -DCMAKE_INSTALL_PREFIX=C:\\Io ..`)\n11. `nmake`\n12. `nmake install`\n\n\n#### Building with MinGW\n\nFor automatic MinGW install: <http://sourceforge.net/projects/mingw/files/Automated%20MinGW%20Installer>\n\nFor non-automatic MinGW install and detailed instructions refer to: <http://www.mingw.org/wiki/InstallationHOWTOforMinGW>\n\n1. `cd` to your Io root folder\n2. We want to do an out-of-source build, so: `mkdir buildroot` and `cd buildroot`\n3. a) `cmake -G\""MSYS Makefiles\"" ..`\n\n\tor\n\n\tb) `cmake -G\""MSYS Makefiles\"" -DCMAKE_INSTALL_PREFIX=<install_drive>:/<install_directory> ..` (eg: `cmake -G\""MSYS Makefiles\"" -DCMAKE_INSTALL_PREFIX=C:/Io ..`)\n4. `make`\n5. `make install`\n\n#### Building with MinGW-W64\n\n1. `cd` to your Io root folder\n2. We want to do an out-of-source build, so: `mkdir buildroot` and `cd buildroot`\n3. a) `cmake -G\""MinGW Makefiles\"" ..`\n\n\tor\n\n\tb) `cmake -G\""MinGW Makefiles\"" -DCMAKE_INSTALL_PREFIX=<install_drive>:/<install_directory> ..` (eg: `cmake -G\""MinGW Makefiles\"" -DCMAKE_INSTALL_PREFIX=C:/Io ..`)\n4. `mingw32-make install`\n\n\n#### Building with Cygwin\n\nInstall Cygwin from: <http://www.cygwin.com/>\n\n1. `cd` to your Io root folder\n2. We want to do an out-of-source build, so: `mkdir buildroot` and `cd buildroot`\n3. a) `cmake ..`\n\n\tor\n\n\tb) `cmake -DCMAKE_INSTALL_PREFIX=<install_drive>:/<install_directory> ..` (eg: `cmake -DCMAKE_INSTALL_PREFIX=C:/Io ..`)\n4. `make`\n5. `make install`\n\nNote: If you also have CMake 2.8 for Windows installed (apart from CMake for Cygwin) check your `PATH` environment variable so you won't be running CMake for Windows instead of Cygwin version.\n\n\nRunning Tests\n===\n\nYou should be inside your out-of-source build dir. The vm tests can be run with the command:\n\n\tio ../libs/iovm/tests/correctness/run.io\n\nInstalling Addons\n===\n\nMany of the common features provided by the Io language aren't prepackaged in the Io core. Instead, these features are contained in addons that get loaded when launching the Io VM. In the past, these addons were automatically installed by the build process, but now they must be installed through [Eerie](https://github.com/IoLanguage/eerie), the Io package manager.\n\nMost of these addons are housed under the IoLanguage group on GitHub: https://github.com/IoLanguage.\n\nTo install an addon, ensure both Io and Eerie are installed correctly, then run:\n\n```\neerie install <link to the git repository>\n```\n\nFor example, to build and install the `Range` addon, run the command:\n\n```\neerie install https://github.com/IoLanguage/Range.git\n```\n\nTo ensure that an addon installed correctly, pull up an Io interpreter and type the name of the object provided by the addon. It should load dynamically and automatically into the interpreter session, populating a slot in `Lobby Protos Addons`. [Here is an example recording of how to install an addon into Io](https://asciinema.org/a/knHDJhBJwvXC2MkW43bAfFgtE).\n"""
https://github.com/anildigital/getfake,null
https://github.com/technicalpickles/feedbarn,""""""
https://github.com/pontus/punktfiler,null
https://github.com/collectiveidea/awesome_nested_set,"""# Awesome Nested Set\n\n[![Build Status](https://travis-ci.org/collectiveidea/awesome_nested_set.svg?branch=master)](https://travis-ci.org/collectiveidea/awesome_nested_set) [![Code Climate](https://codeclimate.com/github/collectiveidea/awesome_nested_set.svg)](https://codeclimate.com/github/collectiveidea/awesome_nested_set) [![Security](https://hakiri.io/github/collectiveidea/awesome_nested_set/master.svg)](https://hakiri.io/github/collectiveidea/awesome_nested_set/master)\n\n\nAwesome Nested Set is an implementation of the nested set pattern for ActiveRecord models.\nIt is a replacement for acts_as_nested_set and BetterNestedSet, but more awesome.\n\nVersion 3.1 supports Rails 5 & 4. Version 2 supports Rails 3. Gem versions prior to 2.0 support Rails 2.\n\n## What makes this so awesome?\n\nThis is a new implementation of nested set based off of BetterNestedSet that fixes some bugs, removes tons of duplication, adds a few useful methods, and adds STI support.\n\n\n## Installation\n\nAdd to your Gemfile:\n\n```ruby\ngem 'awesome_nested_set'\n```\n\n## Usage\n\nTo make use of `awesome_nested_set` your model needs to have 3 fields:\n`lft`, `rgt`, and `parent_id`. The names of these fields are configurable.\nYou can also have optional fields: `depth` and `children_count`. These fields are configurable.\nNote that the `children_count` column must have `null: false` and `default: 0` to\nfunction properly.\n\n```ruby\nclass CreateCategories < ActiveRecord::Migration\n  def self.up\n    create_table :categories do |t|\n      t.string :name\n      t.integer :parent_id, :null => true, :index => true\n      t.integer :lft, :null => false, :index => true\n      t.integer :rgt, :null => false, :index => true\n\n      # optional fields\n      t.integer :depth, :null => false, :default => 0\n      t.integer :children_count, :null => false, :default => 0\n    end\n  end\n\n  def self.down\n    drop_table :categories\n  end\nend\n```\n\nEnable the nested set functionality by declaring `acts_as_nested_set` on your model\n\n```ruby\nclass Category < ActiveRecord::Base\n  acts_as_nested_set\nend\n```\n\nRun `rake rdoc` to generate the API docs and see [CollectiveIdea::Acts::NestedSet](lib/awesome_nested_set/awesome_nested_set.rb) for more information.\n\n## Options\n\nYou can pass various options to `acts_as_nested_set` macro. Configuration options are:\n\n* `parent_column`: specifies the column name to use for keeping the position integer (default: parent_id)\n* `left_column`: column name for left boundary data (default: lft)\n* `right_column`: column name for right boundary data (default: rgt)\n* `depth_column`: column name for the depth data default (default: depth)\n* `scope`: restricts what is to be considered a list. Given a symbol, it'll attach `_id` (if it hasn't been already) and use that as the foreign key restriction. You can also pass an array to scope by multiple attributes. Example: `acts_as_nested_set :scope => [:notable_id, :notable_type]`\n* `dependent`: behavior for cascading destroy. If set to :destroy, all the child objects are destroyed alongside this object by calling their destroy method. If set to :delete_all (default), all the child objects are deleted without calling their destroy method. If set to :nullify, all child objects will become orphaned and become roots themselves.\n* `counter_cache`: adds a counter cache for the number of children. defaults to false. Example: `acts_as_nested_set :counter_cache => :children_count`\n* `order_column`: on which column to do sorting, by default it is the left_column_name. Example: `acts_as_nested_set :order_column => :position`\n* `touch`: If set to `true`, then the updated_at timestamp on the ancestors will be set to the current time whenever this object is saved or destroyed (default: false)\n\nSee [CollectiveIdea::Acts::NestedSet::Model::ClassMethods](/lib/awesome_nested_set/model.rb#L26) for a list of class methods and [CollectiveIdea::Acts::NestedSet::Model](lib/awesome_nested_set/model.rb#L13) for a list of instance methods added to acts_as_nested_set models\n\n## Indexes\n\nIt is highly recommended that you add an index to the `rgt` column on your models. Every insertion requires finding the next `rgt` value to use and this can be slow for large tables without an index. It is probably best to index the other fields as well (`parent_id`, `lft`, `depth`).\n\n## Callbacks\n\nThere are three callbacks called when moving a node:\n`before_move`, `after_move` and `around_move`.\n\n```ruby\nclass Category < ActiveRecord::Base\n  acts_as_nested_set\n\n  after_move :rebuild_slug\n  around_move :da_fancy_things_around\n\n  private\n\n  def rebuild_slug\n    # do whatever\n  end\n\n  def da_fancy_things_around\n    # do something...\n    yield # actually moves\n    # do something else...\n  end\nend\n```\n\nBeside this there are also hooks to act on the newly added or removed children.\n\n```ruby\nclass Category < ActiveRecord::Base\n  acts_as_nested_set  :before_add     => :do_before_add_stuff,\n                      :after_add      => :do_after_add_stuff,\n                      :before_remove  => :do_before_remove_stuff,\n                      :after_remove   => :do_after_remove_stuff\n\n  private\n\n  def do_before_add_stuff(child_node)\n    # do whatever with the child\n  end\n\n  def do_after_add_stuff(child_node)\n    # do whatever with the child\n  end\n\n  def do_before_remove_stuff(child_node)\n    # do whatever with the child\n  end\n\n  def do_after_remove_stuff(child_node)\n    # do whatever with the child\n  end\nend\n```\n\n## Protecting attributes from mass assignment (for Rails < 4)\n\nIt's generally best to \""whitelist\"" the attributes that can be used in mass assignment:\n\n```ruby\nclass Category < ActiveRecord::Base\n  acts_as_nested_set\n  attr_accessible :name, :parent_id\nend\n```\n\nIf for some reason that is not possible, you will probably want to protect the `lft` and `rgt` attributes:\n\n```ruby\nclass Category < ActiveRecord::Base\n  acts_as_nested_set\n  attr_protected :lft, :rgt\nend\n```\n\n\n## Add to your existing project\n\nTo make use of `awesome_nested_set`, your model needs to have 3 fields:\n`lft`, `rgt`, and `parent_id`. The names of these fields are configurable.\nYou can also have optional fields, `depth` and `children_count`.\n\nCreate a migration to add fields:\n\n```ruby\nclass AddNestedToCategories < ActiveRecord::Migration\n\n  def self.up\n    add_column :categories, :parent_id, :integer # Comment this line if your project already has this column\n    # Category.where(parent_id: 0).update_all(parent_id: nil) # Uncomment this line if your project already has :parent_id\n    add_column :categories, :lft,       :integer\n    add_column :categories, :rgt,       :integer\n\n    # optional fields\n    add_column :categories, :depth,          :integer\n    add_column :categories, :children_count, :integer\n\n    # This is necessary to update :lft and :rgt columns\n    Category.reset_column_information\n    Category.rebuild!\n  end\n\n  def self.down\n    remove_column :categories, :parent_id\n    remove_column :categories, :lft\n    remove_column :categories, :rgt\n\n    # optional fields\n    remove_column :categories, :depth\n    remove_column :categories, :children_count\n  end\n\nend\n```\n\nEnable the nested set functionality by declaring `acts_as_nested_set` on your model\n\n```ruby\nclass Category < ActiveRecord::Base\n  acts_as_nested_set\nend\n```\n\nYour project is now ready to run with the `awesome_nested_set` gem!\n\n\n## Conversion from other trees\n\nComing from acts_as_tree or another system where you only have a parent_id? No problem. Simply add the lft & rgt fields as above, and then run:\n\n```ruby\nCategory.rebuild!\n```\n\nYour tree will be converted to a valid nested set. Awesome!\n\nNote: You can use `Category.rebuild!(false)` to skip model validations when performing the rebuild.\n\n## View Helper\n\nThe view helper is called #nested_set_options.\n\nExample usage:\n\n```erb\n<%= f.select :parent_id, nested_set_options(Category, @category) {|i| \""#{'-' * i.level} #{i.name}\"" } %>\n\n<%= select_tag 'parent_id', options_for_select(nested_set_options(Category) {|i| \""#{'-' * i.level} #{i.name}\"" } ) %>\n```\n\nSee [CollectiveIdea::Acts::NestedSet::Helper](lib/awesome_nested_set/helper.rb) for more information about the helpers.\n\n## How to contribute\n\nPlease see the ['Contributing' document](CONTRIBUTING.md).\n\nCopyright \u00a9 2008\u20132015 [Collective Idea](http://collectiveidea.com), released under the MIT license.\n"""
https://github.com/nkallen/effen,"""# Effen #\n\n*Effen* is a jQuery plugin that supports Concrete Javascript. Concrete Javascript is a pattern in which the state and behavior of your domain are attached directly to DOM elements. This differs from MVC, where domain behavior is isolated from the view. Concrete Javascript is draws inspiration from Self's Morphic UI framework.\n\n## Use ##\n\nTo attach behaviors (methods) to DOM nodes, pass a hash to the `fn` function:\n\n    $('div').fn({\n      method1: function(...) {...},\n      method2: function(...) {...}\n    })\n    \nTo invoke a method, pass a string naming the method and any arguments to the `fn` function:\n\n    $('div').fn('method1', some, arguments, here);\n    \nThat's all there is to it. But there are some subtle details to bear in mind:\n\n* While `$('div').fn({...})` will bind the behavior to all divs, calling `$('div').fn('foo')` will only invoke `foo` on the first `div`. This may be changed in future releases.\n\n* Binding is order-dependent. So, for example, to provide specialized behavior:\n\n    $('div').fn({ foo: function() {} });\n    $('div.special').fn({ foo: function() {} });\n    \n The latter takes precedence because it appears last--NOT because the selector is more specific. This may be changed in future releases.\n\n## An in-depth example of Concrete Programming ##\n\nSuppose we have the following HTML code, representing a Script that has many Scenes. A Scene has a Video description and many lines of Dialog.\n\n    <div class=\""script\"" url=\""/scripts/1\"">\n      <ol class=\""scenes\"" url=\""/scripts/1/scenes\"">\n        <li class=\""scene\"" url=\""/scripts/1/scenes/1\"">\n          <textarea name=\""video\"">Interior of Pivotal Labs, Day.</textarea>\n          <ol class=\""dialogs\"" url=\""/scripts/1/scenes/1/dialogs\"">\n            <li class=\""dialog\"" url=\""/scripts/1/scenes/1/dialogs/1\"">\n              <input type=\""text\"" name=\""character\"" value=\""Nick\"" />\n              <input type=\""text\"" name=\""text\"" value=\""I like Concrete Programming\"" />\n            </li>\n            <li class=\""dialog\"" url=\""/scripts/1/scenes/1/dialogs/2\"">\n              <input type=\""text\"" name=\""character\"" value=\""Nathan\"" />\n              <input type=\""text\"" name=\""text\"" value=\""Me too\"" />\n            </li>\n          </ol>\n        </li>\n      </ol>\n    </div>\n\n### Let's start with some simple CRUD operations. To *create* a scene, we POST to the url: ###\n\n    $('.scenes').fn({\n      create: function() {\n        $.post($(this).attr('url'), ...);\n      }\n    });\n\nWe'd like to also create a scene any time someone hits &lt;Ctrl+Enter&gt; within the video textarea.\n\n    $('.scene textarea.video').bind('keypress[ctrl+enter]', function() {\n      ...\n    });\n\nIn order to invoke the `create` function on the scene containing the textarea, we'll need a reference from the textarea to the scene:\n\n    $('.scene').each(function(i, scene) {\n      $(scene).find('*').fn('scene', $(this));\n    });\n\nNow, binding <Ctrl+Enter> on the textarea to invoke create is as simple as:\n\n    $('.scenes textarea.video').bind('keypress[ctrl+enter]', function() {\n      $(this).fn('scenes').fn('create');\n    });\n\n### Let's perform a Delete now ###\n\nWe'd also like to bind the &lt;Backspace&gt; key from within the Dialog character to delete Dialog elements if both the character and text are blank. In other words:\n  \n    $('.dialog input[@name=character]').bind('keypress[backspace]', function() {\n      $(this).fn('dialog').fn('delete');\n    });\n    \n    $('.dialog').fn({\n      delete: function() {\n        if ($(this).fn('isBlank'))\n          $.delete($(this).attr('url'), $(this).remove);\n      },\n      isBlank: function() {\n        return $(this).find('input[@name=character]').val() == \""\"" &&\n               $(this).find('input[@name=text]').val() == \""\"";\n      },\n    });\n    \nUsing the technique shown in the previous section, the character input is given a reference to the dialog (omitted here).\n\n### Polymorphism in Concrete Javascript ###\n\nWe'd like to add a similar delete feature to Scenes. When the user hits &lt;Backspace&gt; while in the Video textarea it should delete the Scene--but only if the Video is blank and so are *each* of the Dialog elements within the Scene.\n\nFirst, let's define `isBlank` on Scene:\n\n    $('.scene').fn({\n      isBlank: function() {\n        return $(this).fn('video').fn('isBlank') &&\n               $.all($(this).find('.dialog'), function(dialog) {\n                 return $(dialog).fn('isBlank')\n               })\n      }\n    });\n    \nAt this point, we may notice that the definition of delete is the same for Scene as for Dialog. Thus,\n\n    $('.scene, .dialog').fn({\n      delete: function() {\n        if ($(this).fn('isBlank'))\n          $.delete($(this).attr('url'), $(this).remove);\n      }\n    });\n\nSo now we have achieved a kind of polymorphism: Both Scenes and Dialogs respond to `isBlank`, though each have differing implementations. Each has a different `url` attribute and each (given that they are DOM objects) can be `removed`. Given that they conform to the same interface, we can implement a generic `delete` method for both of them."""
https://github.com/lachie/logeye,"""Logeye - A Rubycocoa GUI for tailing Ruby on Rails log files\n\nReleases http://code.google.com/p/logeye\nCode at http://github.com/lachie/logeye\nClone from git://github.com/lachie/logeye.git\n\n\nStatus: buggy as\n\n\nNote:\nFor development, Xcode and the Ringbarker gem are required\n\n$ sudo gem install ringbarker\n\nRingbarker only handles Rails 1.2.x log files at the moment.\n\n\n\nLachie Cox\nhttp://smartbomb.com.au\n\nYours under the MIT License (see LICENSE)"""
https://github.com/reinh/reinh-com,""""""
https://github.com/jaikoo/rvideo,"""RVideo\n\nRVideo allows you to inspect and process video files.\n\n\nInstallation is a little involved. First, install the gem:\n\n  sudo gem install rvideo\n  \nNext, install ffmpeg and (possibly) other related libraries. This is\ndocumented elsewhere on the web, and can be a headache. If you are on OS X,\nthe Darwinports build is reasonably good (though not perfect). Install with:\n\n  sudo port install ffmpeg\n\nOr, for a better build (recommended), add additional video- and audio-related\nlibraries, like this:\n\n  sudo port install ffmpeg +lame +libogg +vorbis +faac +faad +xvid +x264 +a52\n  \nMost package management systems include a build of ffmpeg, but many include a\npoor build. So you may need to compile from scratch.\n\nIf you want to create Flash Video files, also install flvtool2:\n\n  sudo gem install flvtool2\n\nOnce ffmpeg and RVideo are installed, you're set. \n\nTo inspect a file, initialize an RVideo file inspector object. See the \ndocumentation for details.\n\nA few examples:\n\n  file = RVideo::Inspector.new(:file => \""#{APP_ROOT}/files/input.mp4\"")\n  \n  file = RVideo::Inspector.new(:raw_response => @existing_response)\n  \n  file = RVideo::Inspector.new(:file => \""#{APP_ROOT}/files/input.mp4\"",\n                                :ffmpeg_binary => \""#{APP_ROOT}/bin/ffmpeg\"")\n\n  file.fps        # \""29.97\""\n  file.duration   # \""00:05:23.4\""\n\nTo transcode a video, initialize a Transcoder object.\n\n  transcoder = RVideo::Transcoder.new\n\nThen pass a command and valid options to the execute method\n\n  recipe = \""ffmpeg -i $input_file$ -ar 22050 -ab 64 -f flv -r 29.97 -s\""\n  recipe += \"" $resolution$ -y $output_file$\""\n  recipe += \""\\nflvtool2 -U $output_file$\""\n  begin\n    transcoder.execute(recipe, {:input_file => \""/path/to/input.mp4\"",\n      :output_file => \""/path/to/output.flv\"", :resolution => \""640x360\""})\n  rescue TranscoderError => e\n    puts \""Unable to transcode file: #{e.class} - #{e.message}\""\n  end\n\nIf the job succeeds, you can access the metadata of the input and output\nfiles with:\n\n  transcoder.original     # RVideo::Inspector object\n  transcoder.processed    # RVideo::Inspector object\n\nIf the transcoding succeeds, the file may still have problems. RVideo\nwill populate an errors array if the duration of the processed video\ndiffers from the duration of the original video, or if the processed\nfile is unreadable.\n\nThanks to Peter Boling for early work on RVideo.\n\nContribute to RVideo! If you want to help out, there are a few things you can \ndo.\n\n- Use, test, and submit bugs/patches\n- We need a RVideo::Tools::Mencoder class to add mencoder support.\n- Other tool classes would be great - On2, mp4box, Quicktime (?), etc.\n- Submit other fixes, features, optimizations, and refactorings\n\nIf RVideo is useful to you, you may also be interested in RMovie, another Ruby\nvideo library. See http://rmovie.rubyforge.org/ for more.\n\nFinally, watch for Spinoza, a commercial video transcoder built by Slantwise \nDesign. Spinoza uses RVideo for its video processing, but adds file queuing,  \ndistributed transcoding, a web-based transcoder dashboard, and more. See \nhttp://spinoza.tv or http://slantwisedesign.com for more.\n\nCopyright (c) 2007 Jonathan Dahl and Slantwise Design. Released under the MIT \nlicense."""
https://github.com/aussiegeek/braid,"""= README\n\nBraid is a simple tool for managing vendor branches across different SCMs.\n\nhttp://evil.che.lu/projects/braid\n\nYou'll need a rather recent version of git, most likely something after 1.5.4.\n\n= INSTALLING FORM RUBYGEMS\n\n# gem not published yet. please install from git\nsudo gem install braid\n\n= INSTALLING FROM GIT\n\n# install deps\nsudo gem install main\nsudo gem install open4\n\ngit clone git://github.com/evilchelu/braid.git\ncd braid\nrake install_gem\n\n= USAGE\n\n# create a git repo\ngit init moo\ncd moo\n\n# ideally you will also do these, but they are just good practices\ngit config --global mirror.summary true\ngit checkout -b localwork\n\n# adding mirrors\nbraid add git://blah\nbraid add svn://muh\ngitk braid/track\ngit merge braid/track\n\n# updating mirrors\nbraid update muh\nbraid update\ngit merge braid/track\n\n# removing mirrors\nbraid remove blah\nbraid remove muh\ngit merge braid/track\n\n= MORE USAGE\n\nBraid stores it's metadata in a file called \"".braids\"" located in the current directory where braid is run.\n\nFor full usage docs run:\n\nbraid help\nbraid help COMMANDNAME\n\n= POSSIBLE PROBLEMS\n\nIn a multiuser setup people won't have all the remote branches setup. But nothing is really lost, yet.\n\nTheoretically if you add the same remotes on other checkout and set the branches correctly things could be made to just work(TM).\n\n= ISSUES\n\nBraid barely works and you'll definitely encounter bugs. Help is appreciated :).\n\nFor now, known issues and feature requests are stored in the TODO.txt file in the root of the braid checkout.\n\n"""
https://github.com/sd/embedded-actions,"""The \""embedded actions\"" plugin \n=============================\n\nBASIC USAGE\n  Just like the traditional render :partial, embedded actions allow you to\n  refactor your views and extract presentation logic and templates into separate\n  files.\n\n  Unlike partials, embedded actions also let you define business logic to be\n  performed before the partial is included. That logic is encapsulated in the\n  already well understood metaphor of an action inside a controller.\n\n  So a simple call like\n\n  <%= embed_action :controller => \""songs\"", :action => \""top10\"" %>\n\n  lets you include an html fragment containing the top 10 songs into any of your\n  pages, regardless of which controller, action or view wants to do the including.\n\nCACHING\n  Embedded actions can provide caching of their results (allowing for different \n  parameters) just like page caching, but at the level of html fragments. \n  So your dynamic pages can still be rendered dynamically, but some of the embedded\n  actions can be cached (and expired) independently.\n\n  Just declare an action as 'cacheable' in a way similar to page caching, \n  by invoking \""caches_embedded\"" with the name of the action to cache.\n\n  class TestController < ApplicationController\n    caches_embedded :user_list\n\n    def user_list\n      ...\n    end\n  end\n\n  Cached fragments can be invalidated with calls to expires_embedded, but you must\n  remember to use the same set of parameters used to embed the cached action in\n  the first place.\n\n  Additionally, the underlying fragment caching mechanism can be passed \n  an options hash in the following manner:\n\n    caches_embedded :user_list, :ttl => 60.minutes\n\n  And you can specify additional arguments to be used when generating the cache name.\n  Which is better explained with an example:\n  \n    caches_embedded :user_list, :options_for_name => Proc.new do |controller| \n      {:is_admin => controller.current_user.is_admin?}\n    end\n\n  this way, there will be two separate cached versions, one for admin users and one \n  for regular users. The hash returned is merged with the actual hash passed on\n  the embed_action call, and is used to create an \""url-like\"" name for the cached\n  fragment. So in this case, a call like <%= embed_action :action => \""test\"" %> will\n  produce two different fragments: \""/mycontroller/test?is_admin=false\"" and \""...?is_admin=true\""\n  depending on the result of controller.current_user.is_admin? when embed_action \n  is called.\n  \n  Finally, cached fragments can be compressed before being stored:\n  \n    caches_embedded :user_list, :compress => true\n    \n  \nRESPONDS_TO\n  Actions can use Rails' responds_to to provide different behaviours when invoked \n  normally or embedded in another view.\n  \n  class TestController < ApplicationController\n    def user_list\n      responds_to do |format|\n        format.html     {render :layout => :application}\n        format.embedded {render :layout => false}\n      end\n    end\n  end\n\nSOURCE CODE\n  The official repository for embedded_actions is in GitHub:\n  \n  http://github.com/sd/embedded-actions/tree/master\n\n\n\n-------------------------------------------------------------------------------\nCopyright (c) 2007, 2008 Sebastian Delmont <sd@notso.net> \nCopyright (c) 2007, 2008 StreetEasy / NMD Interactive <http://www.streeteasy.com/> \nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this \nlist of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice, this\nlist of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.\n\n* Neither the name of Sebastian Delmont, nor StreetEasy nor NMD Interactive \nnor the names of their contributors may be used to endorse or promote products \nderived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \""AS IS\"" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n-------------------------------------------------------------------------------\n\nCONTRIBUTORS\n- Sebastian Delmont <sd@notso.net>\n- Jerret Taylor <jerrett@gmail.com>\n- Ryan Barber <rfb@skyscraper.nu>\n- Andreas Simon <asimon@med4you.de>\n- Jonathan Boler <galatians@gmail.com>\n- Roman Gonzalez <romanandreg@gmail.com>\n\nRELEASE HISTORY\n  1.2 - Apr 28 2011\n    Compression support\n  \n  1.1.3 - Mar 24 2009\n    Fixed issues with content-type leakage\n    Rails 2.3 compatibility\n  \n  1.1.2 - Dec 5 2008\n    Simplified responds_to behaviour\n    Rails 2.2 compatibility (Jonathan)\n  \n  1.1.1 - Feb 20 2008\n    Allow symbol names for controllers and actions (Andreas)\n    Fixed deprecated 'require_gem' in test environment (Andreas)\n  \n  1.1 - Dec 4 2007\n    Passthrough options for fragment caching (Ryan).\n    Support for namespaced controllers in caching (Jerret). \n    Minor bug fixes.\n  \n  1.0.2 - Nov 29 2007\n    Fixed bug (thanks Jerret) that caused caching settings to leak \n    to actions with the same name in other controllers.\n    \n  1.0.1 - Oct 30 2007 \n    Fixed bug that was causing a \""Content-encoding: identity\"" to leak \n    to all requests.\n    \n  1.0 - Oct 23 2007\n    First widespread release.\n\n"""
https://github.com/jparker/template,"""== Welcome to Rails\n\nRails is a web-application framework that includes everything needed to create \ndatabase-backed web applications according to the Model-View-Control pattern. \n\nThis pattern splits the view (also called the presentation) into \""dumb\"" templates\nthat are primarily responsible for inserting pre-built data in between HTML tags.\nThe model contains the \""smart\"" domain objects (such as Account, Product, Person,\nPost) that holds all the business logic and knows how to persist themselves to\na database. The controller handles the incoming requests (such as Save New Account,\nUpdate Product, Show Post) by manipulating the model and directing data to the view.\n\nIn Rails, the model is handled by what's called an object-relational mapping\nlayer entitled Active Record. This layer allows you to present the data from\ndatabase rows as objects and embellish these data objects with business logic\nmethods. You can read more about Active Record in\nlink:files/vendor/rails/activerecord/README.html.\n\nThe controller and view are handled by the Action Pack, which handles both\nlayers by its two parts: Action View and Action Controller. These two layers\nare bundled in a single package due to their heavy interdependence. This is\nunlike the relationship between the Active Record and Action Pack that is much\nmore separate. Each of these packages can be used independently outside of\nRails.  You can read more about Action Pack in\nlink:files/vendor/rails/actionpack/README.html.\n\n\n== Getting Started\n\n1. At the command prompt, start a new Rails application using the <tt>rails</tt> command\n   and your application name. Ex: rails myapp\n2. Change directory into myapp and start the web server: <tt>script/server</tt> (run with --help for options)\n3. Go to http://localhost:3000/ and get \""Welcome aboard: You're riding the Rails!\""\n4. Follow the guidelines to start developing your application\n\n\n== Web Servers\n\nBy default, Rails will try to use Mongrel and lighttpd if they are installed, otherwise\nRails will use WEBrick, the webserver that ships with Ruby. When you run script/server,\nRails will check if Mongrel exists, then lighttpd and finally fall back to WEBrick. This ensures\nthat you can always get up and running quickly.\n\nMongrel is a Ruby-based webserver with a C component (which requires compilation) that is\nsuitable for development and deployment of Rails applications. If you have Ruby Gems installed,\ngetting up and running with mongrel is as easy as: <tt>gem install mongrel</tt>.\nMore info at: http://mongrel.rubyforge.org\n\nIf Mongrel is not installed, Rails will look for lighttpd. It's considerably faster than\nMongrel and WEBrick and also suited for production use, but requires additional\ninstallation and currently only works well on OS X/Unix (Windows users are encouraged\nto start with Mongrel). We recommend version 1.4.11 and higher. You can download it from\nhttp://www.lighttpd.net.\n\nAnd finally, if neither Mongrel or lighttpd are installed, Rails will use the built-in Ruby\nweb server, WEBrick. WEBrick is a small Ruby web server suitable for development, but not\nfor production.\n\nBut of course its also possible to run Rails on any platform that supports FCGI.\nApache, LiteSpeed, IIS are just a few. For more information on FCGI,\nplease visit: http://wiki.rubyonrails.com/rails/pages/FastCGI\n\n\n== Apache .htaccess example\n\n# General Apache options\nAddHandler fastcgi-script .fcgi\nAddHandler cgi-script .cgi\nOptions +FollowSymLinks +ExecCGI\n\n# If you don't want Rails to look in certain directories,\n# use the following rewrite rules so that Apache won't rewrite certain requests\n# \n# Example:\n#   RewriteCond %{REQUEST_URI} ^/notrails.*\n#   RewriteRule .* - [L]\n\n# Redirect all requests not available on the filesystem to Rails\n# By default the cgi dispatcher is used which is very slow\n# \n# For better performance replace the dispatcher with the fastcgi one\n#\n# Example:\n#   RewriteRule ^(.*)$ dispatch.fcgi [QSA,L]\nRewriteEngine On\n\n# If your Rails application is accessed via an Alias directive,\n# then you MUST also set the RewriteBase in this htaccess file.\n#\n# Example:\n#   Alias /myrailsapp /path/to/myrailsapp/public\n#   RewriteBase /myrailsapp\n\nRewriteRule ^$ index.html [QSA]\nRewriteRule ^([^.]+)$ $1.html [QSA]\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^(.*)$ dispatch.cgi [QSA,L]\n\n# In case Rails experiences terminal errors\n# Instead of displaying this message you can supply a file here which will be rendered instead\n# \n# Example:\n#   ErrorDocument 500 /500.html\n\nErrorDocument 500 \""<h2>Application error</h2>Rails application failed to start properly\""\n\n\n== Debugging Rails\n\nSometimes your application goes wrong.  Fortunately there are a lot of tools that\nwill help you debug it and get it back on the rails.\n\nFirst area to check is the application log files.  Have \""tail -f\"" commands running\non the server.log and development.log. Rails will automatically display debugging\nand runtime information to these files. Debugging info will also be shown in the\nbrowser on requests from 127.0.0.1.\n\nYou can also log your own messages directly into the log file from your code using\nthe Ruby logger class from inside your controllers. Example:\n\n  class WeblogController < ActionController::Base\n    def destroy\n      @weblog = Weblog.find(params[:id])\n      @weblog.destroy\n      logger.info(\""#{Time.now} Destroyed Weblog ID ##{@weblog.id}!\"")\n    end\n  end\n\nThe result will be a message in your log file along the lines of:\n\n  Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1\n\nMore information on how to use the logger is at http://www.ruby-doc.org/core/\n\nAlso, Ruby documentation can be found at http://www.ruby-lang.org/ including:\n\n* The Learning Ruby (Pickaxe) Book: http://www.ruby-doc.org/docs/ProgrammingRuby/\n* Learn to Program: http://pine.fm/LearnToProgram/  (a beginners guide)\n\nThese two online (and free) books will bring you up to speed on the Ruby language\nand also on programming in general.\n\n\n== Debugger\n\nDebugger support is available through the debugger command when you start your Mongrel or\nWebrick server with --debugger. This means that you can break out of execution at any point\nin the code, investigate and change the model, AND then resume execution! \nYou need to install ruby-debug to run the server in debugging mode. With gems, use 'gem install ruby-debug'\nExample:\n\n  class WeblogController < ActionController::Base\n    def index\n      @posts = Post.find(:all)\n      debugger\n    end\n  end\n\nSo the controller will accept the action, run the first line, then present you\nwith a IRB prompt in the server window. Here you can do things like:\n\n  >> @posts.inspect\n  => \""[#<Post:0x14a6be8 @attributes={\\\""title\\\""=>nil, \\\""body\\\""=>nil, \\\""id\\\""=>\\\""1\\\""}>,\n       #<Post:0x14a6620 @attributes={\\\""title\\\""=>\\\""Rails you know!\\\"", \\\""body\\\""=>\\\""Only ten..\\\"", \\\""id\\\""=>\\\""2\\\""}>]\""\n  >> @posts.first.title = \""hello from a debugger\""\n  => \""hello from a debugger\""\n\n...and even better is that you can examine how your runtime objects actually work:\n\n  >> f = @posts.first\n  => #<Post:0x13630c4 @attributes={\""title\""=>nil, \""body\""=>nil, \""id\""=>\""1\""}>\n  >> f.\n  Display all 152 possibilities? (y or n)\n\nFinally, when you're ready to resume execution, you enter \""cont\""\n\n\n== Console\n\nYou can interact with the domain model by starting the console through <tt>script/console</tt>.\nHere you'll have all parts of the application configured, just like it is when the\napplication is running. You can inspect domain models, change values, and save to the\ndatabase. Starting the script without arguments will launch it in the development environment.\nPassing an argument will specify a different environment, like <tt>script/console production</tt>.\n\nTo reload your controllers and models after launching the console run <tt>reload!</tt>\n\n== dbconsole\n\nYou can go to the command line of your database directly through <tt>script/dbconsole</tt>.\nYou would be connected to the database with the credentials defined in database.yml.\nStarting the script without arguments will connect you to the development database. Passing an\nargument will connect you to a different database, like <tt>script/dbconsole production</tt>.\nCurrently works for mysql, postgresql and sqlite.\n\n== Description of Contents\n\napp\n  Holds all the code that's specific to this particular application.\n\napp/controllers\n  Holds controllers that should be named like weblogs_controller.rb for\n  automated URL mapping. All controllers should descend from ApplicationController\n  which itself descends from ActionController::Base.\n\napp/models\n  Holds models that should be named like post.rb.\n  Most models will descend from ActiveRecord::Base.\n\napp/views\n  Holds the template files for the view that should be named like\n  weblogs/index.html.erb for the WeblogsController#index action. All views use eRuby\n  syntax.\n\napp/views/layouts\n  Holds the template files for layouts to be used with views. This models the common\n  header/footer method of wrapping views. In your views, define a layout using the\n  <tt>layout :default</tt> and create a file named default.html.erb. Inside default.html.erb,\n  call <% yield %> to render the view using this layout.\n\napp/helpers\n  Holds view helpers that should be named like weblogs_helper.rb. These are generated\n  for you automatically when using script/generate for controllers. Helpers can be used to\n  wrap functionality for your views into methods.\n\nconfig\n  Configuration files for the Rails environment, the routing map, the database, and other dependencies.\n\ndb\n  Contains the database schema in schema.rb.  db/migrate contains all\n  the sequence of Migrations for your schema.\n\ndoc\n  This directory is where your application documentation will be stored when generated\n  using <tt>rake doc:app</tt>\n\nlib\n  Application specific libraries. Basically, any kind of custom code that doesn't\n  belong under controllers, models, or helpers. This directory is in the load path.\n\npublic\n  The directory available for the web server. Contains subdirectories for images, stylesheets,\n  and javascripts. Also contains the dispatchers and the default HTML files. This should be\n  set as the DOCUMENT_ROOT of your web server.\n\nscript\n  Helper scripts for automation and generation.\n\ntest\n  Unit and functional tests along with fixtures. When using the script/generate scripts, template\n  test files will be generated for you and placed in this directory.\n\nvendor\n  External libraries that the application depends on. Also includes the plugins subdirectory.\n  If the app has frozen rails, those gems also go here, under vendor/rails/.\n  This directory is in the load path.\n"""
https://github.com/igouss/cudgel,"""GPL 3.0\n"""
https://github.com/piclez/merb-core,"""merb-core is a new branch of Merb (also referred to as merb-next or the 0.9 series) which aims to provide a stable, stripped down API for a future Merb 1.0 release.\n\nThis branch is based off the 0.5 release series but with significant rewrites.\n\nGoals of this release:\n\n  * Stabilize the @public interface methods to provide for a more consistent application development experience.\n  * Remove features until nothing except a central application API is left\n  * Improve comments on methods using a standard documentation methodology as described in DOCUMENTATION_STANDARDS\n  * Separate the tests into two sections... \""private\"" and \""public\""\n    * Public methods are methods tagged with @public that will be part of the standard, stable Merb API\n    * Private methods are implementation methods that might \n  * Implement a new render API\n  * Build more extensions to regain selected features when needed\n  \nTo familiarize yourself with how a merb-core application might look,\nuse merb-gen (from merb-more) to generate a few apps:\n$ merb-gen myapp                   # a \""normal\"" merb app\n$ merb-gen myapp --flat            # a flattened app\n$ merb-gen myapp --very-flat       # a single-file app\n\n"""
https://github.com/jackdempsey/attachmerb_fu,"""attachmerb-fu\n=====================\n\nattachmerb_fu is a port of Rick Olson's famous attachment_fu Rails plugin to merb. It tries to be as orm-agnostic as merb while having the same functionalities as the original plugin.\n\nThis plugin is still in a very alpha state and was only tested with Datamapper ORM, mini_magick image processor and filesystem storage. It may or may not work for your application\n\n** This fork has been modified to work with ActiveRecord 2.1+ but not Datamapper\n\nNote: attachmerb_fu requires Merb >= 0.9.3\n\nTo use this:\n\nUnpack into lib/attachmerb_fu\n\nThen add to your config/init.rb:\n\nMerb::BootLoader.after_app_loads do\n  require Merb.root / 'lib/attachmerb_fu/datamapper-bindings'\nend\n\nor\n\nMerb::BootLoader.after_app_loads do\n   require Merb.root / 'lib/attachmerb_fu/activerecord_bindings' \nend\n\n\nIn the future, this should be automatically detected.\n\nattachmerb_fu functionality\n===========================\n\nattachmerb_fu facilitates file uploads in Merb.  There are a few storage options for the actual file data, but the plugin always at a minimum stores metadata for each file in the database.\n\nThere are three storage options for files uploaded through attachmerb_fu:\n  File system\n  Database file (currently not tested)\n  Amazon S3 (currently not tested)\n\nEach method of storage many options associated with it that will be covered in the following section.  Something to note, however, is that the Amazon S3 storage requires you to modify config/amazon_s3.yml and the Database file storage requires an extra table.\n\n\nattachmerb_fu models\n====================\n\nFor all three of these storage options a table of metadata is required.  This table will contain information about the file (hence the 'meta') and its location.  This table has no restrictions on naming, unlike the extra table required for database storage, which must have a table name of db_files (and by convention a model of DbFile).\n  \nIn the model there are two methods made available by this plugins: has_attachment and validates_as_attachment.\n\nhas_attachment(options = {})\n  This method accepts the options in a hash:\n    :content_type     # Allowed content types.\n                      # Allows all by default.  Use :image to allow all standard image types.\n    :min_size         # Minimum size allowed.\n                      # 1 byte is the default.\n    :max_size         # Maximum size allowed.\n                      # 1.megabyte is the default.\n    :size             # Range of sizes allowed.\n                      # (1..1.megabyte) is the default.  This overrides the :min_size and :max_size options.\n    :resize_to        # Used by RMagick to resize images.\n                      # Pass either an array of width/height, or a geometry string.\n    :thumbnails       # Specifies a set of thumbnails to generate.\n                      # This accepts a hash of filename suffixes and RMagick resizing options.\n                      # This option need only be included if you want thumbnailing.\n    :thumbnail_class  # Set which model class to use for thumbnails.\n                      # This current attachment class is used by default.\n    :path_prefix      # path to store the uploaded files.\n                      # Uses public/#{table_name} by default for the filesystem, and just #{table_name} for the S3 backend.  \n                      # Setting this sets the :storage to :file_system.\n    :storage          # Specifies the storage system to use..\n                      # Defaults to :db_file.  Options are :file_system, :db_file, and :s3.\n    :processor        # Sets the image processor to use for resizing of the attached image.\n                      # Options include ImageScience, Rmagick, and MiniMagick.  Default is whatever is installed.\n    \n\n  Examples:\n    has_attachment :max_size => 1.kilobyte\n    has_attachment :size => 1.megabyte..2.megabytes\n    has_attachment :content_type => 'application/pdf'\n    has_attachment :content_type => ['application/pdf', 'application/msword', 'text/plain']\n    has_attachment :content_type => :image, :resize_to => [50,50]\n    has_attachment :content_type => ['application/pdf', :image], :resize_to => 'x50'\n    has_attachment :thumbnails => { :thumb => [50, 50], :geometry => 'x50' }\n    has_attachment :storage => :file_system, :path_prefix => 'public/files'\n    has_attachment :storage => :file_system, :path_prefix => 'public/files', \n                   :content_type => :image, :resize_to => [50,50]\n    has_attachment :storage => :file_system, :path_prefix => 'public/files',\n                   :thumbnails => { :thumb => [50, 50], :geometry => 'x50' }\n    has_attachment :storage => :s3\n\nvalidates_as_attachment\n  This method prevents files outside of the valid range (:min_size to :max_size, or the :size range) from being saved.  It does not however, halt the upload of such files.  They will be uploaded into memory regardless of size before validation.\n  \n  Example:\n    validates_as_attachment\n\n\nattachmerb_fu migrations\n========================\n\nFields for attachmerb_fu metadata tables...\n  in general:\n    size,         :integer  # file size in bytes\n    content_type, :string   # mime type, ex: application/mp3\n    filename,     :string   # sanitized filename\n  that reference images:\n    height,       :integer  # in pixels\n    width,        :integer  # in pixels\n  that reference images that will be thumbnailed:\n    parent_id,    :integer  # id of parent image (on the same table, a self-referencing foreign-key).\n                            # Only populated if the current object is a thumbnail.\n    thumbnail,    :string   # the 'type' of thumbnail this attachment record describes.  \n                            # Only populated if the current object is a thumbnail.\n                            # Usage:\n                            # [ In Model 'Avatar' ]\n                            #   has_attachment :content_type => :image, \n                            #                  :storage => :file_system, \n                            #                  :max_size => 500.kilobytes,\n                            #                  :resize_to => '320x200>',\n                            #                  :thumbnails => { :small => '10x10>',\n                            #                                   :thumb => '100x100>' }\n                            # [ Elsewhere ]\n                            # @user.avatar.thumbnails.first.thumbnail #=> 'small'\n  that reference files stored in the database (:db_file):\n    db_file_id,   :integer  # id of the file in the database (foreign key)\n    \nField for attachmerb_fu db_files table:\n  data, :binary # binary file data, for use in database file storage\n\n\nattachmerb_fu views\n===================\n\nThere are two main views tasks that will be directly affected by attachmerb_fu: upload forms and displaying uploaded images.\n\nThere are two parts of the upload form that differ from typical usage.\n  1. Include ':multipart => true' in the html options of the form_for tag.\n    Example:\n      <% form_for(:attachment_metadata, :url => { :action => \""create\"" }, :html => { :multipart => true }) do |form| %>\n      \n  2. Use the file_field helper with :uploaded_data as the field name.\n    Example:\n      <%= form.file_field :uploaded_data %>\n\nDisplaying uploaded images is made easy by the public_filename method of the ActiveRecord attachment objects using file system and s3 storage.\n\npublic_filename(thumbnail = nil)\n  Returns the public path to the file.  If a thumbnail prefix is specified it will return the public file path to the corresponding thumbnail.\n  Examples:\n    attachment_obj.public_filename          #=> /attachments/2/file.jpg\n    attachment_obj.public_filename(:thumb)  #=> /attachments/2/file_thumb.jpg\n    attachment_obj.public_filename(:small)  #=> /attachments/2/file_small.jpg\n\nWhen serving files from database storage, doing more than simply downloading the file is beyond the scope of this document.\n\n\nattachmerb_fu controllers\n=========================\n\nThere are two considerations to take into account when using attachmerb_fu in controllers.\n\nThe first is when the files have no publicly accessible path and need to be downloaded through an action.\n\nExample:\n  def readme\n    send_file '/path/to/readme.txt', :type => 'plain/text', :disposition => 'inline'\n  end\n  \nSee the possible values for send_file for reference.\n\n\nThe second is when saving the file when submitted from a form.\nExample in view:\n <%= form.file_field :attachable, :uploaded_data %>\n\nExample in controller:\n  def create\n    @attachable_file = AttachmentMetadataModel.new(params[:attachable])\n    if @attachable_file.save\n      flash[:notice] = 'Attachment was successfully created.'\n      redirect_to attachable_url(@attachable_file)     \n    else\n      render :action => :new\n    end\n  end\n"""
https://github.com/rtomayko/date-performance,"""Date::Performance\n=================\n\nThis package adds some semblance of performance to Ruby 1.8's core Date class \nusing a combination of different techniques:\n\n1. Implements various core *Date* methods in C. This is nowhere near a\n   complete rewrite of all *Date* features but many of the hot spots have\n   been replaced with machine code.\n \n2. Provide alternate implementations of `strftime` and `strptime` in C.  The stock\n   date formatting and parsing methods are extremely slow compared to their\n   libc counterparts. *Date#sys_strftime* and *Date::sys_strptime* are light\n   facades on top of the system's `strftime(2)` and `strptime(2)`. The system \n   methods run 10x and 50x (yes, _fifty-ecks_) faster than their Ruby based counterparts, \n   respectively.  Unfortunately, `strftime(2)` and `strptime(2)` implementations vary from\n   system to system and have various limitations not found in the core Date\n   implementation so can not safely be used as replacements for the core methods.\n\n3. Memoization. The *Date::Memoize* module can be used to speed certain\n   types of repetitive date processing significantly. This file must be \n   required separately.\n\nStatus\n------\n\n*This repository is no longer actively maintained by @rtomayko as of 2017-11-08. Issues and PRs documenting current issues have been intentionally left open for informational purposes.*\n\nSynopsis\n--------\n\nThis package is mostly transparent after an initial require:\n\n    require 'date/performance'\n    Date.new 1912, 6, 23\n    # Wow! That was fast!\n\n*Date::Performance* is not used directly but automatically replaces core *Date*\nmethods when required.\n\nIn addition to the C extension, the *Date::Memoization* module can be used to\nspeed things up even further in some cases by making a trade off between space \nand time:\n\n    require 'date/memoize'\n    Date.new 1912, 6, 23\n    Date.parse '1912-06-23'\n\nRequiring the file automatically replaces *Date::new* / *Date::civil*, *Date::parse*, \nand *Date::jd* methods with memoized versions.\n\nInstallation / Hacking\n----------------------\n\nThis package has been tested on the following platforms:\n\n  * FreeBSD 5.4 (x86) and 6.1 (AMD64)\n  * Linux / Fedora Core 6 (x86)\n  * MacOS X (Intel)\n\nThe easiest way to install the package is to use RubyGems:\n\n    $ gem install date-performance\n\nA git repository is also available:\n\n    $ git clone git://github.com/rtomayko/date-performance.git\n\nBackground\n----------\n\nThe *Date* class is often the cause of poor performance in Ruby programs. A frequent\nsuggestion is to use the *Time* class, which is much faster, but that solution has \ncorrectness problems in a wide range of data typing cases. It is often the case that \nyou want separate *Date*, *Time*, and *DateTime* types.\n\nThere are a couple of reasons why *Date* runs slowly when compared with\n*Time*. The common assumption is that this is mostly due to *Time* being\nwritten in C and *Date* being written in Ruby. While that clearly has an\nimpact, I would argue that the reason *Date* is slow is because it's not\ndesigned to be fast. The code opts for readability over performance in almost\nevery case. _This is a feature_.\n\nHave you read the *date.rb* documentation [1]? The implementation is pretty\nhard core; it can handle a lot of weird cases that *Time* [2] does not and\nwould appear to be a correct implementation of date handling, which has the\nusual side-effect of being slow.\n\nThe *Date* implementation uses a single Astronomical Julian Day (AJD) number\nto represent dates internally. In fact, *Date#initialize* takes a\nsingle `ajd` argument, which means that all date forms that are commonly used \n(UNIX timestamp, Civil, etc.) must be converted to an AJD before we can even\ninstantiate the thing. \n\nThe real performance hit seems to come from the various rational number\noperations performed on the way from a civil, ordinal, and julian date to \nan AJD.\n\nWhen I began writing *Date::Performance*, I was getting pretty big (3x - 4x)\nperformance boosts in many places simply by optimizing the Ruby code a bit.\nThese boosts came at the expense of readability, however, and so the decision\nwas made to go for _maximum unreadability_ and implement the boosts in C.\n\nThere's a nice balance here: the Ruby implementation reads like a spec,\nwhile the C version implements it for quickness.\n\nMemoization\n-----------\n\nIn addition to the C extension, this package includes a separate *Date::Memoize*\nmodule that can further speed up date processing in situations where the range\nof dates being manipulated is fairly dense and the same dates are being\ncreated repeatedly. Working with databases and flat files are two examples\nwhere memoization may help significantly.\n\nThe *Date::Memoize* module replaces various Date constructor methods (`new`,\n`civil`, and `parse`) with memoized[http://en.wikipedia.org/wiki/Memoization] \nversions (see *Date::Memoization* for details). The best way to determine \nwhether memoization is right for you is to add it to your project and see \nwhat happens.\n\nLicense\n-------\n\nMIT. See the COPYING file included in the distribution for more \ninformation.\n\nSee Also\n--------\n\n * [1] Ruby *Date* Implementation Notes and Documentation:\n   http://www.ruby-doc.org/docs/rdoc/1.9/files/_/lib/date_rb.html\n\n * [2] Ruby *Time* documentation \n   http://www.ruby-doc.org/docs/rdoc/1.9/classes/Time.html\n"""
https://github.com/rmanalan/socialgraph-viewer,""""""
https://github.com/labria/rails-ssl-authentication,"""== Welcome to Rails\n\nRails is a web-application and persistence framework that includes everything\nneeded to create database-backed web-applications according to the\nModel-View-Control pattern of separation. This pattern splits the view (also\ncalled the presentation) into \""dumb\"" templates that are primarily responsible\nfor inserting pre-built data in between HTML tags. The model contains the\n\""smart\"" domain objects (such as Account, Product, Person, Post) that holds all\nthe business logic and knows how to persist themselves to a database. The\ncontroller handles the incoming requests (such as Save New Account, Update\nProduct, Show Post) by manipulating the model and directing data to the view.\n\nIn Rails, the model is handled by what's called an object-relational mapping\nlayer entitled Active Record. This layer allows you to present the data from\ndatabase rows as objects and embellish these data objects with business logic\nmethods. You can read more about Active Record in\nlink:files/vendor/rails/activerecord/README.html.\n\nThe controller and view are handled by the Action Pack, which handles both\nlayers by its two parts: Action View and Action Controller. These two layers\nare bundled in a single package due to their heavy interdependence. This is\nunlike the relationship between the Active Record and Action Pack that is much\nmore separate. Each of these packages can be used independently outside of\nRails.  You can read more about Action Pack in\nlink:files/vendor/rails/actionpack/README.html.\n\n\n== Getting Started\n\n1. At the command prompt, start a new Rails application using the <tt>rails</tt> command\n   and your application name. Ex: rails myapp\n   (If you've downloaded Rails in a complete tgz or zip, this step is already done)\n2. Change directory into myapp and start the web server: <tt>script/server</tt> (run with --help for options)\n3. Go to http://localhost:3000/ and get \""Welcome aboard: You\u2019re riding the Rails!\""\n4. Follow the guidelines to start developing your application\n\n\n== Web Servers\n\nBy default, Rails will try to use Mongrel and lighttpd if they are installed, otherwise\nRails will use WEBrick, the webserver that ships with Ruby. When you run script/server,\nRails will check if Mongrel exists, then lighttpd and finally fall back to WEBrick. This ensures\nthat you can always get up and running quickly.\n\nMongrel is a Ruby-based webserver with a C component (which requires compilation) that is\nsuitable for development and deployment of Rails applications. If you have Ruby Gems installed,\ngetting up and running with mongrel is as easy as: <tt>gem install mongrel</tt>.\nMore info at: http://mongrel.rubyforge.org\n\nIf Mongrel is not installed, Rails will look for lighttpd. It's considerably faster than\nMongrel and WEBrick and also suited for production use, but requires additional\ninstallation and currently only works well on OS X/Unix (Windows users are encouraged\nto start with Mongrel). We recommend version 1.4.11 and higher. You can download it from\nhttp://www.lighttpd.net.\n\nAnd finally, if neither Mongrel or lighttpd are installed, Rails will use the built-in Ruby\nweb server, WEBrick. WEBrick is a small Ruby web server suitable for development, but not\nfor production.\n\nBut of course its also possible to run Rails on any platform that supports FCGI.\nApache, LiteSpeed, IIS are just a few. For more information on FCGI,\nplease visit: http://wiki.rubyonrails.com/rails/pages/FastCGI\n\n\n== Debugging Rails\n\nSometimes your application goes wrong.  Fortunately there are a lot of tools that\nwill help you debug it and get it back on the rails.\n\nFirst area to check is the application log files.  Have \""tail -f\"" commands running\non the server.log and development.log. Rails will automatically display debugging\nand runtime information to these files. Debugging info will also be shown in the\nbrowser on requests from 127.0.0.1.\n\nYou can also log your own messages directly into the log file from your code using\nthe Ruby logger class from inside your controllers. Example:\n\n  class WeblogController < ActionController::Base\n    def destroy\n      @weblog = Weblog.find(params[:id])\n      @weblog.destroy\n      logger.info(\""#{Time.now} Destroyed Weblog ID ##{@weblog.id}!\"")\n    end\n  end\n\nThe result will be a message in your log file along the lines of:\n\n  Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1\n\nMore information on how to use the logger is at http://www.ruby-doc.org/core/\n\nAlso, Ruby documentation can be found at http://www.ruby-lang.org/ including:\n\n* The Learning Ruby (Pickaxe) Book: http://www.ruby-doc.org/docs/ProgrammingRuby/\n* Learn to Program: http://pine.fm/LearnToProgram/  (a beginners guide)\n\nThese two online (and free) books will bring you up to speed on the Ruby language\nand also on programming in general.\n\n\n== Debugger\n\nDebugger support is available through the debugger command when you start your Mongrel or\nWebrick server with --debugger. This means that you can break out of execution at any point\nin the code, investigate and change the model, AND then resume execution! Example:\n\n  class WeblogController < ActionController::Base\n    def index\n      @posts = Post.find(:all)\n      debugger\n    end\n  end\n\nSo the controller will accept the action, run the first line, then present you\nwith a IRB prompt in the server window. Here you can do things like:\n\n  >> @posts.inspect\n  => \""[#<Post:0x14a6be8 @attributes={\\\""title\\\""=>nil, \\\""body\\\""=>nil, \\\""id\\\""=>\\\""1\\\""}>,\n       #<Post:0x14a6620 @attributes={\\\""title\\\""=>\\\""Rails you know!\\\"", \\\""body\\\""=>\\\""Only ten..\\\"", \\\""id\\\""=>\\\""2\\\""}>]\""\n  >> @posts.first.title = \""hello from a debugger\""\n  => \""hello from a debugger\""\n\n...and even better is that you can examine how your runtime objects actually work:\n\n  >> f = @posts.first\n  => #<Post:0x13630c4 @attributes={\""title\""=>nil, \""body\""=>nil, \""id\""=>\""1\""}>\n  >> f.\n  Display all 152 possibilities? (y or n)\n\nFinally, when you're ready to resume execution, you enter \""cont\""\n\n\n== Console\n\nYou can interact with the domain model by starting the console through <tt>script/console</tt>.\nHere you'll have all parts of the application configured, just like it is when the\napplication is running. You can inspect domain models, change values, and save to the\ndatabase. Starting the script without arguments will launch it in the development environment.\nPassing an argument will specify a different environment, like <tt>script/console production</tt>.\n\nTo reload your controllers and models after launching the console run <tt>reload!</tt>\n\n\n== Description of Contents\n\napp\n  Holds all the code that's specific to this particular application.\n\napp/controllers\n  Holds controllers that should be named like weblogs_controller.rb for\n  automated URL mapping. All controllers should descend from ApplicationController\n  which itself descends from ActionController::Base.\n\napp/models\n  Holds models that should be named like post.rb.\n  Most models will descend from ActiveRecord::Base.\n\napp/views\n  Holds the template files for the view that should be named like\n  weblogs/index.erb for the WeblogsController#index action. All views use eRuby\n  syntax.\n\napp/views/layouts\n  Holds the template files for layouts to be used with views. This models the common\n  header/footer method of wrapping views. In your views, define a layout using the\n  <tt>layout :default</tt> and create a file named default.erb. Inside default.erb,\n  call <% yield %> to render the view using this layout.\n\napp/helpers\n  Holds view helpers that should be named like weblogs_helper.rb. These are generated\n  for you automatically when using script/generate for controllers. Helpers can be used to\n  wrap functionality for your views into methods.\n\nconfig\n  Configuration files for the Rails environment, the routing map, the database, and other dependencies.\n\ndb\n  Contains the database schema in schema.rb.  db/migrate contains all\n  the sequence of Migrations for your schema.\n\ndoc\n  This directory is where your application documentation will be stored when generated\n  using <tt>rake doc:app</tt>\n\nlib\n  Application specific libraries. Basically, any kind of custom code that doesn't\n  belong under controllers, models, or helpers. This directory is in the load path.\n\npublic\n  The directory available for the web server. Contains subdirectories for images, stylesheets,\n  and javascripts. Also contains the dispatchers and the default HTML files. This should be\n  set as the DOCUMENT_ROOT of your web server.\n\nscript\n  Helper scripts for automation and generation.\n\ntest\n  Unit and functional tests along with fixtures. When using the script/generate scripts, template\n  test files will be generated for you and placed in this directory.\n\nvendor\n  External libraries that the application depends on. Also includes the plugins subdirectory.\n  This directory is in the load path.\n"""
https://github.com/rmanalan/facebox,"""Please visit http://famspam.com/facebox/ or open index.html in your favorite browser.\n"""
https://github.com/TekNoLogic/TourGuide,null
https://github.com/lypanov/ruvi,"""to install this package from these sources rubygems or rpa is currently required.\nfor rubygems install:\n   cd ruvi\n   gem build ruvi.gemspec\nfor rpa:\n   wget http://rpa-base.rubyforge.org/ports/ports.info -O ports.info\n   (in directory above ruvi)\n   rpa-buildport ruvi ports.info\nknown problems:\n   gnome-terminal interacts *horribly* with the curses frontend\n"""
https://github.com/gjnoonan/configuration-files,""""""
https://github.com/churchio/onebody,"""![screnshot](https://farm8.staticflickr.com/7508/15498980049_3527e0817e_b.jpg)\n\n# OneBody\n\n[![Install now](https://img.shields.io/badge/install-now-479de4.svg)](https://github.com/churchio/onebody/wiki/Installation)\n[![Chat with us](https://img.shields.io/badge/chat-slack-e01563.svg)](http://chat.church.io)\n\nOneBody is open-source, web-based social networking, email list, online directory, and lightweight document management software for churches.\n\nThis software has been in production use at churches for over ten years. Every feature is built by actual church members to meet the need of their own church.\n\nVisit our website at [church.io](http://church.io) to learn more.\n\n## Contributing to the Project\n\n[![Build Status](https://circleci.com/gh/churchio/onebody.svg?style=svg&circle-token=efe08e5b7d161351e276a8dcf9bcb303b953c0dd)](https://circleci.com/gh/churchio/onebody)\n\n[![Stories Ready](https://badge.waffle.io/churchio/onebody.svg?label=ready&title=stories+ready)](http://waffle.io/churchio/onebody)\n[![Stories in Progress](https://badge.waffle.io/churchio/onebody.svg?label=in+progress&title=stories+in+progress)](http://waffle.io/churchio/onebody)\n\nWe \u2764\ufe0f contributors! Just check out [all these people](https://github.com/orgs/churchio/people) who have helped make OneBody awesome!\n\nTo help fix a bug, first make sure it has a logged [issue](https://github.com/churchio/onebody/issues) (if not, create one), then:\n\n1. Fork this repo on GitHub and clone your fork to your computer.\n1. Set up the software on your computer by following the directions in the next section.\n1. Fix the bug!\n1. Submit a Pull Request to get your bug fix merged!\n\nIf you'd like to add an awesome new feature, please join our [Slack chat](https://slackin-churchio.herokuapp.com/) to talk about what you want to do. We'd like to give you some guidance on approach, coding style, tests, etc.\n\n[FAQs for Contributors](https://github.com/churchio/onebody/wiki/FAQs-for-Contributors) \u00b7\n[Code of Conduct](https://github.com/churchio/onebody/blob/master/CONDUCT.md)\n\n### Development Setup Using Vagrant\n\nIf you're a developer and want to get everything running locally, this is the easiest way.\n\nOperating System: Windows, Mac, or Linux\n\n1. Install [VirtualBox](https://www.virtualbox.org/wiki/Downloads). It's free and it runs on Windows, Mac, and Linux.\n1. Install [Vagrant](http://www.vagrantup.com/downloads) on your host machine.\n1. Install [Git](http://git-scm.com/downloads).\n   * If you're on Mac, you can use [GitHub for Mac](https://mac.github.com/).\n   * If you're on Windows, you can use [GitHub for Windows](https://windows.github.com/).\n1. Clone the repository to your host machine: `git clone git://github.com/churchio/onebody.git` (If you forked the project, clone from your own fork.)\n1. In your terminal, change to the project directory: `cd onebody`\n1. Run vagrant: `vagrant up`\n\nNow visit the site running in development mode at http://localhost:8080.\n\nYou can use your favorite text editor to make changes inside the `onebody` directory. Changes should show in your browser after refreshing.\n\nCheck out [Using Vagrant](https://github.com/churchio/onebody/wiki/Using-Vagrant) on the wiki for further help and tips.\n\n### Manual Development Setup on Mac or Linux\n\n1. Install Ruby 2.3.3 (we recommend you use [rbenv](https://github.com/sstephenson/rbenv) or [RVM](https://rvm.io/)).\n1. Install MySQL.\n1. Install Git.\n1. Install ImageMagick.\n1. Install Node.js.\n1. `git clone git://github.com/churchio/onebody.git && cd onebody`\n1. `mysql -uroot -e \""grant all on onebody_dev.* to onebody@localhost identified by 'onebody';\""`\n1. `mysql -uroot -e \""grant all on onebody_test.* to onebody@localhost identified by 'onebody';\""`\n1. `cp config/database.yml{.mysql-example,}`\n1. `gem install bundler`\n1. `bundle install` (If you get an error installing eventmachine, you might need to do [this](http://stackoverflow.com/a/31516586/197498))\n1. `cp config/secrets.yml{.example,} && vim config/secrets.yml` and add a random secret token to both the \""development\"" and \""test\"" sections (you can use `rake secret` to generate a new random secret).\n1. `rake db:create db:schema:load db:seed`\n1. `rails server`\n\nNow visit the site running in development mode at http://localhost:3000.\n\n### Manual Development Setup on Windows\n\n1. Download the Ruby 2.3 package from http://railsinstaller.org and install.\n1. Download MariaDB stable from https://downloads.mariadb.org and install. Take note of what you enter for the root password.\n1. Download Git from https://git-scm.com/download/win and install.\n1. Download ImageMagick from http://imagemagick.org/script/binary-releases.php#windows and install.\n1. Download Node.js from https://nodejs.org/en/download/ and install.\n1. Open the \""Git Bash\"" program, then run...\n1. `git clone git://github.com/churchio/onebody.git && cd onebody`\n1. `mysql -uroot -pROOT_PASSWORD -e \""grant all on onebody_dev.* to onebody@localhost identified by 'onebody';\""`\n1. `mysql -uroot -pROOT_PASSWORD -e \""grant all on onebody_test.* to onebody@localhost identified by 'onebody';\""`\n1. `cp config/database.yml{.mysql-example,}`\n1. `gem install bundler`\n1. `bundle install`\n1. `cp config/secrets.yml{.example,} && vim config/secrets.yml` and add a random secret token to both the \""development\"" and \""test\"" sections (you can use `rake secret` to generate a new random secret).\n1. `rake db:create db:schema:load db:seed`\n1. `rails server`\n\nNow visit the site running in development mode at http://localhost:3000.\n\n### Tests\n\nTo run tests:\n\n```\nrspec\n```\n\nIf you don't have a test database yet, create it like you did the dev database:\n\n```\nRAILS_ENV=test rake db:create db:schema:load\n```\n\n## Get Help\n\n* [Slack Chat](https://slackin-churchio.herokuapp.com/)\n* [Wiki](http://wiki.github.com/churchio/onebody)\n* [Google Group](http://groups.google.com/group/churchio)\n* [Help Guides](http://church.io/onebody/help)\n\n## Copyright\n\nCopyright (c) [Tim Morgan](http://timmorgan.org)\n\nTHERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \""AS IS\"" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\nIN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\nThis software is license under the GNU Affero General Public License, version 3. See LICENSE provided with this program for the entire text.\n\n\""Church.IO\"" is a trademark of our federation of developers and cannot be used for promotional purposes without express written permission.\n\n### Design\n\nDesign is a derivative of AdminLTE, copyright (c) almasaeed2010, available [here](https://github.com/almasaeed2010/AdminLTE), licensed under MIT license. See [LICENSE](https://github.com/almasaeed2010/AdminLTE/blob/master/LICENSE).\n"""
https://github.com/lypanov/icaltodoscheduler,null
https://github.com/seaofclouds/micro,null
https://github.com/weepy/test,null
https://github.com/tobi/cacheable,""""""
https://github.com/seaofclouds/micro-theme,"""micro is an clean, minimalist theme for mephisto and blogger. \n\nhttp://micro.seaofclouds.com/\n\n-- LICENSE --\n\n(The MIT License)\n\nCopyright (c) 2008 seaofclouds\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."""
https://github.com/lsegal/yard,"""# YARD: Yay! A Ruby Documentation Tool\n\n[![Homepage](http://img.shields.io/badge/home-yardoc.org-blue.svg)](http://yardoc.org)\n[![GitHub](http://img.shields.io/badge/github-lsegal/yard-blue.svg)](http://github.com/lsegal/yard)\n[![Documentation](http://img.shields.io/badge/docs-rdoc.info-blue.svg)](http://rubydoc.org/gems/yard/frames)\n\n[![Gem Version](https://badge.fury.io/rb/yard.svg)](http://github.com/lsegal/yard/releases)\n[![Build Status](https://travis-ci.org/lsegal/yard.svg?branch=master)](https://travis-ci.org/lsegal/yard)\n[![Coverage Status](https://coveralls.io/repos/github/lsegal/yard/badge.svg)](https://coveralls.io/github/lsegal/yard)\n[![License](http://img.shields.io/badge/license-MIT-yellowgreen.svg)](#license)\n\n## Synopsis\n\nYARD is a documentation generation tool for the Ruby programming language.\nIt enables the user to generate consistent, usable documentation that can be\nexported to a number of formats very easily, and also supports extending for\ncustom Ruby constructs such as custom class level definitions. Below is a\nsummary of some of YARD's notable features.\n\n\n## Feature List\n\n**1. RDoc/SimpleMarkup Formatting Compatibility**: YARD is made to be compatible\nwith RDoc formatting. In fact, YARD does no processing on RDoc documentation\nstrings, and leaves this up to the output generation tool to decide how to\nrender the documentation.\n\n**2. Yardoc Meta-tag Formatting Like Python, Java, Objective-C and other languages**:\nYARD uses a '@tag' style definition syntax for meta tags alongside  regular code\ndocumentation. These tags should be able to happily sit side by side RDoc formatted\ndocumentation, but provide a much more consistent and usable way to describe\nimportant information about objects, such as what parameters they take and what types\nthey are expected to be, what type a method should return, what exceptions it can\nraise, if it is deprecated, etc.. It also allows information to be better (and more\nconsistently) organized during the output generation phase. You can find a list\nof tags in the {file:docs/Tags.md#taglist Tags.md} file.\n\nYARD also supports an optional \""types\"" declarations for certain tags.\nThis allows the developer to document type signatures for ruby methods and\nparameters in a non intrusive but helpful and consistent manner. Instead of\ndescribing this data in the body of the description, a developer may formally\ndeclare the parameter or return type(s) in a single line. Consider the\nfollowing method documented with YARD formatting:\n\n```ruby\n# Reverses the contents of a String or IO object.\n#\n# @param [String, #read] contents the contents to reverse\n# @return [String] the contents reversed lexically\ndef reverse(contents)\n  contents = contents.read if contents.respond_to? :read\n  contents.reverse\nend\n```\n\nWith the above @param tag, we learn that the contents parameter can either be\na String or any object that responds to the 'read' method, which is more\npowerful than the textual description, which says it should be an IO object.\nThis also informs the developer that they should expect to receive a String\nobject returned by the method, and although this may be obvious for a\n'reverse' method, it becomes very useful when the method name may not be as\ndescriptive.\n\n**3. Custom Constructs and Extensibility of YARD**: YARD is designed to be\nextended and customized by plugins. Take for instance the scenario where you\nneed to document the following code:\n\n```ruby\nclass List\n # Sets the publisher name for the list.\n cattr_accessor :publisher\nend\n```\n\nThis custom declaration provides dynamically generated code that is hard for a\ndocumentation tool to properly document without help from the developer. To\nease the pains of manually documenting the procedure, YARD can be extended by\nthe developer to handle the `cattr_accessor` construct and automatically create\nan attribute on the class with the associated documentation. This makes\ndocumenting external API's, especially dynamic ones, a lot more consistent for\nconsumption by the users.\n\nYARD is also designed for extensibility everywhere else, allowing you to add\nsupport for new programming languages, new data structures and even where/how\ndata is stored.\n\n**4. Raw Data Output**: YARD also outputs documented objects as raw data (the\ndumped Namespace) which can be reloaded to do generation at a later date, or\neven auditing on code. This means that any developer can use the raw data to\nperform output generation for any custom format, such as YAML, for instance.\nWhile YARD plans to support XHTML style documentation output as well as\ncommand line (text based) and possibly XML, this may still be useful for those\nwho would like to reap the benefits of YARD's processing in other forms, such\nas throwing all the documentation into a database. Another useful way of\nexploiting this raw data format would be to write tools that can auto generate\ntest cases, for example, or show possible unhandled exceptions in code.\n\n**5. Local Documentation Server**: YARD can serve documentation for projects\nor installed gems (similar to `gem server`) with the added benefit of dynamic\nsearching, as well as live reloading. Using the live reload feature, you can\ndocument your code and immediately preview the results by refreshing the page;\nYARD will do all the work in re-generating the HTML. This makes writing\ndocumentation a much faster process.\n\n\n## Installing\n\nTo install YARD, use the following command:\n\n```sh\n$ gem install yard\n```\n\n(Add `sudo` if you're installing under a POSIX system as root)\n\nAlternatively, if you've checked the source out directly, you can call\n`rake install` from the root project directory.\n\n**Important Note for Debian/Ubuntu users:** there's a possible chance your Ruby\ninstall lacks RDoc, which is occasionally used by YARD to convert markup to HTML.\nIf running `which rdoc` turns up empty, install RDoc by issuing:\n\n```sh\n$ sudo apt-get install rdoc\n```\n\n\n## Usage\n\nThere are a couple of ways to use YARD. The first is via command-line, and the\nsecond is the Rake task.\n\n**1. yard Command-line Tool**\n\nYARD comes packaged with a executable named `yard` which can control the many\nfunctions of YARD, including generating documentation, graphs running the\nYARD server, and so on. To view a list of available YARD commands, type:\n\n```sh\n$ yard --help\n```\n\nPlugins can also add commands to the `yard` executable to provide extra\nfunctionality.\n\n### Generating Documentation\n\n<span class=\""note\"">The `yardoc` executable is a shortcut for `yard doc`.</span>\n\nThe most common command you will probably use is `yard doc`, or `yardoc`. You\ncan type `yardoc --help` to see the options that YARD provides, but the\neasiest way to generate docs for your code is to simply type `yardoc` in your\nproject root. This will assume your files are\nlocated in the `lib/` directory. If they are located elsewhere, you can specify\npaths and globs from the commandline via:\n\n```sh\n$ yardoc 'lib/**/*.rb' 'app/**/*.rb' ...etc...\n```\n\nThe tool will generate a `.yardoc` file which will store the cached database\nof your source code and documentation. If you want to re-generate your docs\nwith another template you can simply use the `--use-cache` (or -c)\noption to speed up the generation process by skipping source parsing.\n\nYARD will by default only document code in your public visibility. You can\ndocument your protected and private code by adding `--protected` or\n`--private` to the option switches. In addition, you can add `--no-private`\nto also ignore any object that has the `@private` meta-tag. This is similar\nto RDoc's \"":nodoc:\"" behaviour, though the distinction is important. RDoc\nimplies that the object with :nodoc: would not be documented, whereas\nYARD still recommends documenting private objects for the private API (for\nmaintainer/developer consumption).\n\nYou can also add extra informative files (README, LICENSE) by separating\nthe globs and the filenames with '-'.\n\n```sh\n$ yardoc 'app/**/*.rb' - README LICENSE FAQ\n```\n\nIf no globs precede the '-' argument, the default glob (`lib/**/*.rb`) is\nused:\n\n```sh\n$ yardoc - README LICENSE FAQ\n```\n\nNote that the README file can be specified with its own `--readme` switch.\n\nYou can also add a `.yardopts` file to your project directory which lists\nthe switches separated by whitespace (newlines or space) to pass to yardoc\nwhenever it is run. A full overview of the `.yardopts` file can be found in\n{YARD::CLI::Yardoc}.\n\n### Queries\n\nThe `yardoc` tool also supports a `--query` argument to only include objects\nthat match a certain data or meta-data query. The query syntax is Ruby, though\na few shortcuts are available. For instance, to document only objects that have\nan \""@api\"" tag with the value \""public\"", all of the following syntaxes would give\nthe same result:\n\n```sh\n--query '@api.text == \""public\""'\n--query 'object.has_tag?(:api) && object.tag(:api).text == \""public\""'\n--query 'has_tag?(:api) && tag(:api).text == \""public\""'\n```\n\nNote that the \""@tag\"" syntax returns the first tag named \""tag\"" on the object.\nTo return the array of all tags named \""tag\"", use \""@@tag\"".\n\nMultiple `--query` arguments are allowed in the command line parameters. The\nfollowing two lines both check for the existence of a return and param tag:\n\n```sh\n--query '@return' --query '@param'\n--query '@return && @param'\n```\n\nFor more information about the query syntax, see the {YARD::Verifier} class.\n\n**2. Rake Task**\n\nThe second most obvious is to generate docs via a Rake task. You can do this by\nadding the following to your `Rakefile`:\n\n```ruby\nYARD::Rake::YardocTask.new do |t|\n t.files   = ['lib/**/*.rb', OTHER_PATHS]   # optional\n t.options = ['--any', '--extra', '--opts'] # optional\n t.stats_options = ['--list-undoc']         # optional\nend\n```\n\nAll the settings: `files`, `options` and `stats_options` are optional. `files` will default to\n`lib/**/*.rb`, `options` will represents any options you might want\nto add and `stats_options` will pass extra options to the stats command.\nAgain, a full list of options is available by typing `yardoc --help`\nin a shell. You can also override the options at the Rake command-line with the\nOPTS environment variable:\n\n```sh\n$ rake yard OPTS='--any --extra --opts'\n```\n\n**3. `yri` RI Implementation**\n\nThe yri binary will use the cached .yardoc database to give you quick ri-style\naccess to your documentation. It's way faster than ri but currently does not\nwork with the stdlib or core Ruby libraries, only the active project. Example:\n\n```sh\n$ yri YARD::Handlers::Base#register\n$ yri File.relative_path\n```\n\nNote that class methods must not be referred to with the \""::\"" namespace\nseparator. Only modules, classes and constants should use \""::\"".\n\nYou can also do lookups on any installed gems. Just make sure to build the\n.yardoc databases for installed gems with:\n\n```sh\n$ yard gems\n```\n\nIf you don't have sudo access, it will write these files to your `~/.yard`\ndirectory. `yri` will also cache lookups there.\n\n**4. `yard server` Documentation Server**\n\nThe `yard server` command serves documentation for a local project or all installed\nRubyGems. To serve documentation for a project you are working on, simply run:\n\n```sh\n$ yard server\n```\n\nAnd the project inside the current directory will be parsed (if the source has\nnot yet been scanned by YARD) and served at [http://localhost:8808](http://localhost:8808).\n\n### Live Reloading\n\nIf you want to serve documentation on a project while you document it so that\nyou can preview the results, simply pass `--reload` (`-r`) to the above command\nand YARD will reload any changed files on each request. This will allow you to\nchange any documentation in the source and refresh to see the new contents.\n\n### Serving Gems\n\nTo serve documentation for all installed gems, call:\n\n```sh\n$ yard server --gems\n```\n\nThis will also automatically build documentation for any gems that have not\nbeen previously scanned. Note that in this case there will be a slight delay\nbetween the first request of a newly parsed gem.\n\n\n**5. `yard graph` Graphviz Generator**\n\nYou can use `yard graph` to generate dot graphs of your code. This, of course,\nrequires [Graphviz](http://www.graphviz.org) and the `dot` binary. By default\nthis will generate a graph of the classes and modules in the best UML2 notation\nthat Graphviz can support, but without any methods listed. With the `--full`\noption, methods and attributes will be listed. There is also a `--dependencies`\noption to show mixin inclusions. You can output to stdout or a file, or pipe directly\nto `dot`. The same public, protected and private visibility rules apply to `yard graph`.\nMore options can be seen by typing `yard graph --help`, but here is an example:\n\n```sh\n$ yard graph --protected --full --dependencies\n```\n\n\n## Changelog\n\nSee {file:CHANGELOG.md} for a list of changes.\n\n## License\n\nYARD &copy; 2007-2018 by [Loren Segal](mailto:lsegal@soen.ca). YARD is\nlicensed under the MIT license except for some files which come from the\nRDoc/Ruby distributions. Please see the {file:LICENSE} and {file:LEGAL}\ndocuments for more information.\n"""
https://github.com/caius/soco,"""# Motivation\n\nNormally when I create a new website with code on it, I write it as static files.  I'd take all the stuff that stayed the same on each page (header, footer, sidebar generally) and shove it into external files, which can then be included into each page manually.\n\nOf course you end up forgetting to add an `include()` here and there, and the website breaks until you fix it.  So I got fed up and started looking at full blown CMS's.\n\nAfter testing a couple out, I realised why I'd hate them.  They are all *(generally)* database based.  Its a good idea for multiple people editing, etc, but its a pain in the arse to backup.  You have to export your data from the database & then backup that file.  Then you have to either remember to do that every so often, or when data is updated.\n\nPlus when you are testing you have to keep messing around with databases in setting them up and deleting them.  And I thought, \""Why can't a website be file based, but not have to be so dependent on includes?\""\n\nThen I started to realise something.  All web based CMS's that use a database work inherently different at a basic level to static file inclusion systems.  They pull the content **into** the layout, rather than the layout into the content.\n\nFor example, wordpress pulls the content straight out of the database in the form of posts & pages, and inserts it into the theme (layout) before rendering it to the browser.\n\nWith the including system, I am requesting the layout (header.php, footer.php, etc) from within the content (about.php, etc), so I am sucking the layout *into* the content.\n\nBut what, I thought, if there was a system that used files, but still pulled the content into the layout, so each file *only* contained the content for that page.\n\nAnd thus I wrote Soco.\n\n# Usage\n\n* Clone the git repo by running `git clone git://github.com/caius/soco.git`\n\n* Edit the content files in */content*\n"""
https://github.com/codahale/ruby-gsl,"""This is a port of the GNU Scientific Library to the Ruby programming language.\n\nThe GNU Scientific Library is a collection of routines for numerical computing.\nTo find out more about GSL, please go to http://sources.redhat.com/gsl/\nThis version of ruby-gsl requires GSL 1.5.\n\nRuby is an interpreted scripting language for quick and easy object-oriented \nprogramming. \nTo find out more about Ruby, please go to http://www.ruby-lang.org/\n\nThings from GSL you can use in ruby-gsl:\n- some error handling (ch. 3 in the GSL documentation)\n- basic mathematical functions (ch. 4)\n- complex numbers (ch. 5)\n- functions for polynomial evaluation/roots (ch. 6)\n- most \""special functions\"" (ch. 7)\n- vectors and matrices (ch. 8)\n- permutations (ch. 9)\n- combinations (ch. 10)\n- BLAS support (ch. 12)\n- linear algebra (ch. 13)\n- eigensystems (ch. 14)\n- numerical integration (ch. 16)\n- random number generation (ch. 17)\n- quasi-random sequences (ch. 18)\n- most random number distributions (ch. 19)\n- most statistical functions (ch. 20)\n- histograms (ch. 21)\n- Monte Carlo integration (ch. 23)\n- Simulated Annealing (not reliable) (ch. 24)\n- interpolation (ch. 26)\n- numerical differentiation (ch. 27)\n- Chebyshev approximation (ch. 28)\n- series acceleration (ch. 29)\n- Discrete Hankel Transforms (ch. 30)\n- 1-dimensional root-finding (ch. 31)\n- 1-dimensional minimization (ch. 32)\n- some functions for least-squares fitting (ch. 35)\n- physical constants (ch. 37)\n\nWe tried to keep the names/arguments/etc. as close to the original\nGSL functions so that reading the GSL documentation should suffice\nto use ruby-gsl. However in some places it might be more appropriate\nto convert some functions to a more rubyesque way.\n\nAs of version 0.1.2 we included some source code from Yoshiki Tsunesada's\nRuby/GSL. This way we will have some nice and complete GSL wrapper some day.\n\nIf you have any questions or spot errors please feel free to contact us.\nTesting and development is with Ruby 1.8.1 and GSL 1.5.\n"""
https://github.com/gilesbowkett/utility-belt,"""== Utility Belt\n\nby Giles Bowkett (and many others)\n\nhttp://utilitybelt.rubyforge.org\n\n== DESCRIPTION\n  \nUtility Belt is a grab-bag of tricks, tools, techniques, trifles, and toys for IRB, including convenience methods, language patches, and useful extensions. It also includes a couple command-line widgets. Its primary inspirations were an awesome gem called Wirble and a blog post by Amy Hoy called \""Secrets Of The Rails Console Ninjas\"".\n\n(http://slash7.com/articles/2006/12/21/secrets-of-the-rails-console-ninjas)\n\n== INSTALL\n\nsudo gem install utility_belt\n\n== FEATURES\n\n* Interactively edit IRB code in your preferred text editor\n* Read from and write to OS X clipboard\n* Post your code to Pastie with one command (OS X only)\n* Kick-ass Unix-style history buffer\n* Write command history to file or vi\n* Grep classes and methods for strings\n* Verbosity controls for regular IRB and Rails console\n* Finder shortcuts for Rails console\n* Upload shortcut for Amazon S3\n* Command-line Amazon S3 upload script\n* Command-line Google shortcut (OS X only)\n* Auto-indentation\n* _ special variable (like Unix shell var !!)\n* Extremely basic themes for Wirble syntax coloring\n* Pascal/JavaScript-style \""with\"" statement\n* String#to_proc\n* Add and subtract Hashes with + and -\n* Grammatically-correct is_an? method - no more \""is_a? Array\"" statements\n* One-character exit command\n\n== COMMUNITY EFFORT\n\nThe majority of this code was written by other people and compiled, nicked, nabbed, herded, gathered, copied, or pilfered by me (Giles Bowkett). See copyright notice for the credits. A lot of this code comes from blogs. Check out the source code for numerous links to the original posts the code came from. Thanks also to Bob Hutchison, Avdi Grimm, Marcus Derencius, Markus Prinz, Ben Bleything, Reginald Braithwaite-Lee, and Robert Berger for bug fixes, new features, documentation, and bug reports.\n\n== SYNOPSIS\n\nUtility Belt gives you a ton of new options and techniques in IRB. (You may find yourself putting its language patches in actual projects as well.) The way to use Utility Belt is to edit, or create, your .irbrc file. This is analogous to a Unix .bashrc, .tcshrc, .profile, or similar file.\n\nWindows users have a couple options. The easiest is to define an environment variable called IRBRC and set it to the full path of your irbrc (e.g. \""C:\\Documents and Settings\\<username>\\_irbrc\""). Presto, .irbrc for Windows. You could also set your HOME-Variable to any directory you want and put your \"".irbrc\"" in there. (It needs to be called \"".irbrc\"", \""_irbrc\"" won't work). Since Windows Explorer won't let you create a file with a dot in the beginning, use any text editor (Notepad will do just fine) and \""Save As\"" to save it as \"".irbrc\"". (The quotation marks make the magic happen.) We don't recommend this if you're also using MSYS or Cygwin, as they use the same variable for their own purposes.\n\nAdding Utility Belt to your .irbrc is easy:\n\n  require 'rubygems'\n  require 'utility_belt'\n\nTo use the Amazon shortcuts, you also need to set some environment variables. See the section on S3 under \""Usage\"" for more. Also, if your terminal has a light background, you'll need to enable the light-background syntax coloring theme - see the section on themes under \""Usage\"" for more.\n\n== USAGE\n\nUsing each of Utility Belt's tools is different:\n\n== Interactively edit IRB code in your preferred text editor\n\nIf your preferred text editor is vi(m), emacs, or TextMate, there are built-in commands: vi, emacs, and mate, respectively. To use another editor, use this command:\n\n  edit_interactively(:the_name_of_my_editor)\n\nor\n\n  edit_interactively(\""the name of my editor\"")\n\nor\n\n  edit_interactively(\""/the/path/to/my/editor\"")\n\nIf you're wondering why the method name is so ridiculously long, there's a story there:\n\nhttp://gilesbowkett.blogspot.com/2007/12/utility-belt-vs-rails.html\n\n== Read from and write to OS X or Windows clipboard\n\nIn order to use Clipboard on Windows you must install the 'win32-clipboard' gem.\n\nTo read:\n\n  Clipboard.read\n\nTo write:\n\n  Clipboard.write(\""something\"")\n\n== Post your code to Pastie with one command (OS X and Windows only)\n\nYou must first equip the UtilityBelt with pastie in your .irbrc:\n\n  UtilityBelt.equip(:pastie)\n  \nThis line will also automatically equip the Clipboard, which is required to use pastie.\n\nFirst copy some code into your clipboard, or put it there with the Clipboard.write() class method. Then use the command:\n\n  pastie\n\nor the shortcut version:\n\n  pst\n\nNote that this method currently auto-formats all code as Ruby. Support for other languages is possible but not implemented yet. Also, this code is OS X and Windows only because it uses the Clipboard. (A platform-agnostic version without the clipboard aspect is certainly possible.)\n\n== Unix-style history buffer\n\nUse \""h\"" or \""history\"" to view your command history, and \""h! 123\"" to re-invoke command #123 in your buffer. \""h!\"" with no args will run the last command.\n\n== Write command history to file or vi\n\nTo write your history to a file, use \""history_write('/path/to/file')\"". To edit your history in vi, use \""history_to_vi\"" or its shortcut alias \""hvi\"".\n\n== Grep classes and methods for strings\n\nClasses:\n\n  >> grep_classes(\""ixnum\"")\n  #=> [\""Fixnum\""]\n\n  >> grep_classes(\""num\"")\n  #=> [\""Bignum\"", \""Fixnum\"", \""Numeric\"", \""REXML::SyncEnumerator\""]\n\nMethods:\n\n  >> \""any arbitrary string\"".grep_methods(\""pretty\"")\n  #=> [\""pretty_inspect\"", \""pretty_print_instance_variables\"", \""pretty_print_inspect\"", \""pretty_print\"", \""pretty_print_cycle\""]\n\n  >> 32.grep_methods(\""*\"")\n  #=> [\""*\"", \""**\""]\n\nAt some point it'll probably be a good idea to add regex support for these methods.\n\n== Verbosity controls for regular IRB and Rails console\n\nregular IRB: \""verbose\"" or \""v\"" / \""quiet\"" or \""q\""\n\nRails: \""log\"" method turns verbosity on, there isn't actually any method for turning it off. (Might add one at some point.)\n\n== Finder shortcuts for Rails console\n\n  user(:all) / user(1)\n\ninstead of\n\n  User.find(:all) / User.find(1)\n\nSupports arbitrarily complex finds.\n\n== Upload shortcut for Amazon S3\n\nFirst, define your secret keys in your environment variables:\n\nexport AMAZON_ACCESS_KEY_ID='foofoofoofoofoo'\nexport AMAZON_SECRET_ACCESS_KEY='barbarbarbarbar'\n\n(Obviously, replace those with actual values.)\n\nThen, you can use\n\n  aws_upload(\""bucket_name\"",\""filename\"")\n\nTo easily upload public-access files. This method will automatically connect to Amazon S3 for you, if your keys are defined in your environment variables. It also writes the resulting Amazon URL to your clipboard, if you're on OS X, so you can easily share the file with others. Note that you have to create the initial buckets manually - see amazon.rubyforge.org for details on that.\n\nA good way to use this is actually to have a default bucket, and create a further method in your .irbrc file:\n\n  def my_bucket_name(filename)\n    aws_upload(\""my_default_bucket\"",filename)\n  end\n\n== Command-line Amazon S3 upload script\n\nUtility Belt also includes amazon, a simple command-line uploader for S3. It requires that you set your Amazon environment variables (see above). The usage is:\n\n  amazon -b my_bucket_name filename other_filename\n\n(For any arbitrary number of filenames.)\n\nAnytime you want to upload a file to your default bucket on S3, for example, the \""images\"" bucket for your blog - or the \""mp3\"" bucket if you're running a blog like Projectionist - all you have to do is\n\n  amazon -b blog_files some_file.name\n\nOr\n\n  amazon --bucket blog_files some_file.name\n\nAnd you're good to go. Of course, if that were too many characters to type, you could always take it one step further with a shell script. For instance, in bash:\n\n  alias b1=\""amazon --bucket my_main_bucket $1\""\n  alias b2=\""amazon --bucket my_other_bucket $1\""\n\nAnd then you would only have to type:\n\n  b1 file.name\n\nAnd of course tab completion will handle all the typing of the file name, assuming you choose your file names deliberately ahead of time to make tab completion effective, in which case all you have to type is \""b1 f[tab]\"" and bam.\n\n== Command-line Google shortcut (OS X only)\n\nTo pop open a new window in your default browser with Google search results for a given search term, do:\n\n  google \""any given term\""\n\nFor one-word terms, you can omit the quotes:\n\n  google term\n\nIf you already have the search term in your clipboard, you can just type:\n\n  google\n\n(The last approach is useful for unusual command-line error messages.)\n\n== Auto-indentation and tab completion\n\nJust type as normally. This just enables built-in but underused functionality in IRB. (The IRB default auto-indentation isn't perfect, but it clobbers the living hell out of no indentation at all.)\n\n== _ special variable (like Unix shell var !!)\n\nMore activation of built-in but underused functionality in IRB. _ functions like !! in Unix, with one subtle difference. Instead of re-issuing the previous command in your history, it gives you the last result of evaluating a command. This means when you start a new IRB session, _ won't go to your history, it'll just give you nil, and it means that some commands can't be repeated exactly. Nine out of ten times, however, it's pretty much the same thing.\n\nNote that when combined with the h! in the command history code, you basically have two synonyms for !! here. Neither one is an exact replica, but between the two of them, you should have what you need.\n\n== Extremely basic themes for Wirble syntax coloring\n\nUtility Belt incorporates Wirble as a dependency. Wirble provides syntax coloring. Utility Belt allows you to choose between two syntax coloring themes: Wirble's default, and an alternate color set for terminals with light backgrounds. The default theme is enabled by default (duh), but if you have a terminal with a light background, you can enable the light-background theme just by putting the following line of code in your .irbrc:\n\n  UtilityBelt::Themes.background(:light)\n\nTo revert back to the default, just use this:\n\n  UtilityBelt::Themes.background(:dark)\n\nTo specify an entirely new syntax color scheme, see the source code for this gem or for Wirble.\n\n== Pascal/JavaScript-style \""with\"" statement\n\nI use this with RSpec's spec_helper. Instead of:\n\n  Spec::Runner.configure do |config|\n    config.use_transactional_fixtures = true\n    config.use_instantiated_fixtures  = false\n    config.fixture_path = RAILS_ROOT + '/spec/fixtures'\n    config.mock_with :flexmock\n  end\n\nI do this:\n\n  Spec::Runner.configure do |config|\n    with(config) do\n      use_transactional_fixtures = true\n      use_instantiated_fixtures  = false\n      fixture_path = RAILS_ROOT + '/spec/fixtures'\n      mock_with :flexmock\n    end\n  end\n\nNote however that this blew up once and I have no idea why. Caveat emptor, et cetera.\n\n== String#to_proc\n\nSyntactic sugar for functional programming.\n\n  (1..3).map(&'*2') => [2, 4, 6]\n  (1..3).map(&'[-1, _, 0]') => [[-1, 1, 0], [-1, 2, 0], [-1, 3, 0]]\n  (1..3).map(&'x -> y -> x * y').map(&'[2]') => [2, 4, 6]\n  (1..5).select(&'>2') => [3, 4, 5]\n  (1..3).map(&'x -> y -> x * y').map(&'.call(2)') => [2, 4, 6]\n  [5].map(&\""(1.._).inject(&'*')\"") => [120]\n\nFor more detail see: http://weblog.raganwald.com/2007/10/stringtoproc.html\n\n== Add and subtract Hashes with + and -\n\n  {:a => :b} + {:c => :d} = {:a => :b, :c => :d}\n  {:a => :b, :c => :d} - {:c => :d} = {:a => :b}\n  {:a => :b, :c => :d} - :c = {:a => :b}\n\n  You could already do this with Arrays; now you can do it with Hashes as well. (I was kinda surprised the first time I tried to do this and realized I'd have to write it myself.)\n\n== Grammatically-correct is_an? method - no more \""is_a? Array\"" statements\n\n  >> [].is_an? Array\n  #=> true\n\nMost people don't care, but personally, \""is_a? Array\"" drives me completely insane.\n\n== Object#not\n\nReplace this:\n\n  if !response.incomplete? && !response.invalid? && response.total > 0\n\nWith this:\n\n  if response.not.incomplete? && response.not.invalid? && response.total > 0\n\nSyntactic sugar for boolean conditions.\n\nMore detail here:\n\nhttp://blog.jayfields.com/2007/08/ruby-adding-not-method-for-readability.html\n\n== One-character exit command\n\nx\n\nBecause life is too short to type whole words.\n\n== REQUIREMENTS\n\n* ReadLine\n* Wirble\n* Amazon S3\n* Platform\n* Some features require OS X\n\n== LICENSE\n\n  (The MIT License)\n\n  Copyright (c) 2006-2007 Giles Bowkett\n  Portions Copyright (c) 2006-2007 Ben Bleything\n  Portions Copyright (c) 2006-2007 Reginald Braithwaite\n  Portions Copyright (c) 2006-2007 Gregory Brown\n  Portions Copyright (c) 2006-2007 Jamis Buck\n  Portions Copyright (c) 2006-2007 Mike Clark\n  Portions Copyright (c) 2006-2007 Jay Fields\n  Portions Copyright (c) 2005 David Heinemeier Hansson\n  Portions Copyright (c) 2006-2007 Ara T. Howard\n  Portions Copyright (c) 2006-2007 Pat Maddox\n  Portions Copyright (c) 2006-2007 Marcel Molina, Jr.\n  Portions Copyright (c) 2006-2007 Rick DeNatale\n  Portions Copyright (c) 2006-2007 Projectionist (Marcel Molina? Chad Fowler?)\n  Portions Copyright (c) 2006-2007 Dan Yoder\n\n  Permission is hereby granted, free of charge, to any person obtaining\n  a copy of this software and associated documentation files (the\n  'Software'), to deal in the Software without restriction, including\n  without limitation the rights to use, copy, modify, merge, publish,\n  distribute, sublicense, and/or sell copies of the Software, and to\n  permit persons to whom the Software is furnished to do so, subject to\n  the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"""
https://github.com/jney/catface,null
https://github.com/ELLIOTTCABLE/fora,null
https://github.com/olivM/hydrate,null
https://github.com/labria/restful-authentication,"""by labria:\n\nThis is a fork of the restful_authentication plugin including client certificate logon.\nIt's still totally raw, has too much hardcoded stuff and lacks some things, but you know,\n\""release early, release often\"" =)\nIt add a new option, --use-certificates\n\nFirst of all, create a dir named \""cert\"" in your rails root. I frankly don't know how to do\nit from the generator, I'll fix this later.\n\nSecond, after installing the plugin, edit the config/initializers/cert_config.rb with some\nof your data. Please, don't change the paths just yet. Actually, you can leave the defaults,\nexcept for domainname and hostname, you better hadrcode those to the server where you'll be\nusing this. Now, run \""rake cert:create_ca\"", this will create theCA needed to sign your user \ncertficates. If you don't have a server certificate for your domain, you can create a self-\nsigned one using \""rake cert:server_cert\"", using the options from the bottom of cert_config.rb\n\nNow, you have to configure your server. This is the tricky part. I'm using nginx, and here's\nwhat i did:\nIf the user comes with https without a cert, redirect him back to http. If he does have a\ncert, pass its subject string as the HTTP_X_SSL_CLIENT_S_DN header. You can see the config\nin one of my posts on the subject at http://blog.startika.com\nSo what you have to do, is to make your server pass the certificate string as X_SSL_CLIENT_S_DN\nto the app. I'm not sure how it's done with other servers, please send me instructions =)\n\nSo, now you have a UsersController#get_cert action, which gives the user his certificate in\na p12 file, and the https://youserver.com/session/new page which auto-logons the user if he\npresents his certificate. Not much, but it's still nice to provide such things.\n\nIf you have any questions, comments, suggestions or correction please contact me any way \nyou please, by email at labria@startika.com, for example.\n\n\nOriginal readme follows.\nRestful Authentication Generator\n====\n\nThis is a basic restful authentication generator for rails, taken \nfrom acts as authenticated.  Currently it requires Rails 1.2.6 or above.\n\nTo use:\n\n  ./script/generate authenticated user sessions \\\n\t\t--include-activation \\\n\t\t--stateful\n\nThe first parameter specifies the model that gets created in signup\n(typically a user or account model).  A model with migration is \ncreated, as well as a basic controller with the create method.\n\nThe second parameter specifies the sessions controller name.  This is\nthe controller that handles the actual login/logout function on the \nsite.\n\nThe third parameter (--include-activation) generates the code for a \nActionMailer and its respective Activation Code through email.\n\nThe fourth (--stateful) builds in support for acts_as_state_machine\nand generates activation code.  This was taken from:\n\nhttp://www.vaporbase.com/postings/stateful_authentication\n\nYou can pass --skip-migration to skip the user migration.\n\nIf you're using acts_as_state_machine, define your users resource like this:\n\n\tmap.resources :users, :member => { :suspend   => :put,\n                                     :unsuspend => :put,\n                                     :purge     => :delete }\n\nAlso, add an observer to config/environment.rb if you chose the \n--include-activation option\n\n  config.active_record.observers = :user_observer # or whatever you \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t# named your model\n\nSecurity Alert\n====\n\nI introduced a change to the model controller that's been tripping \nfolks up on Rails 2.0.  The change was added as a suggestion to help\ncombat session fixation attacks.  However, this resets the Form \nAuthentication token used by Request Forgery Protection.  I've left\nit out now, since Rails 1.2.6 and Rails 2.0 will both stop session\nfixation attacks anyway."""
https://github.com/alex/pyelection,"""PyElection is a python program for following the 2008 US presidential primaries.\n\nYou can run it by executing the pyelection.py file.\n\nIt requires several external python libraries:\n    * PyGTK\n    * BeautifulSoup\n    * gobject\nYou also need to have GTK itself installed.\n"""
https://github.com/dpetersen/ruby-screen,"""The documentation is in Readme.textile, but you're better off reading it here: http://ruby-screen.rubyforge.org/\n"""
https://github.com/kballard/dcbot,null
https://github.com/noin/orb,null
https://github.com/sintaxi/pmpknpi,null
https://github.com/lydgate/git-todo-py,null
https://github.com/bart-xx/ikhebhonger,"""== Welcome to Rails\n\nRails is a web-application and persistence framework that includes everything\nneeded to create database-backed web-applications according to the\nModel-View-Control pattern of separation. This pattern splits the view (also\ncalled the presentation) into \""dumb\"" templates that are primarily responsible\nfor inserting pre-built data in between HTML tags. The model contains the\n\""smart\"" domain objects (such as Account, Product, Person, Post) that holds all\nthe business logic and knows how to persist themselves to a database. The\ncontroller handles the incoming requests (such as Save New Account, Update\nProduct, Show Post) by manipulating the model and directing data to the view.\n\nIn Rails, the model is handled by what's called an object-relational mapping\nlayer entitled Active Record. This layer allows you to present the data from\ndatabase rows as objects and embellish these data objects with business logic\nmethods. You can read more about Active Record in\nlink:files/vendor/rails/activerecord/README.html.\n\nThe controller and view are handled by the Action Pack, which handles both\nlayers by its two parts: Action View and Action Controller. These two layers\nare bundled in a single package due to their heavy interdependence. This is\nunlike the relationship between the Active Record and Action Pack that is much\nmore separate. Each of these packages can be used independently outside of\nRails.  You can read more about Action Pack in\nlink:files/vendor/rails/actionpack/README.html.\n\n\n== Getting Started\n\n1. At the command prompt, start a new Rails application using the <tt>rails</tt> command\n   and your application name. Ex: rails myapp\n   (If you've downloaded Rails in a complete tgz or zip, this step is already done)\n2. Change directory into myapp and start the web server: <tt>script/server</tt> (run with --help for options)\n3. Go to http://localhost:3000/ and get \""Welcome aboard: You\u2019re riding the Rails!\""\n4. Follow the guidelines to start developing your application\n\n\n== Web Servers\n\nBy default, Rails will try to use Mongrel and lighttpd if they are installed, otherwise\nRails will use WEBrick, the webserver that ships with Ruby. When you run script/server,\nRails will check if Mongrel exists, then lighttpd and finally fall back to WEBrick. This ensures\nthat you can always get up and running quickly.\n\nMongrel is a Ruby-based webserver with a C component (which requires compilation) that is\nsuitable for development and deployment of Rails applications. If you have Ruby Gems installed,\ngetting up and running with mongrel is as easy as: <tt>gem install mongrel</tt>.\nMore info at: http://mongrel.rubyforge.org\n\nIf Mongrel is not installed, Rails will look for lighttpd. It's considerably faster than\nMongrel and WEBrick and also suited for production use, but requires additional\ninstallation and currently only works well on OS X/Unix (Windows users are encouraged\nto start with Mongrel). We recommend version 1.4.11 and higher. You can download it from\nhttp://www.lighttpd.net.\n\nAnd finally, if neither Mongrel or lighttpd are installed, Rails will use the built-in Ruby\nweb server, WEBrick. WEBrick is a small Ruby web server suitable for development, but not\nfor production.\n\nBut of course its also possible to run Rails on any platform that supports FCGI.\nApache, LiteSpeed, IIS are just a few. For more information on FCGI,\nplease visit: http://wiki.rubyonrails.com/rails/pages/FastCGI\n\n\n== Debugging Rails\n\nSometimes your application goes wrong.  Fortunately there are a lot of tools that\nwill help you debug it and get it back on the rails.\n\nFirst area to check is the application log files.  Have \""tail -f\"" commands running\non the server.log and development.log. Rails will automatically display debugging\nand runtime information to these files. Debugging info will also be shown in the\nbrowser on requests from 127.0.0.1.\n\nYou can also log your own messages directly into the log file from your code using\nthe Ruby logger class from inside your controllers. Example:\n\n  class WeblogController < ActionController::Base\n    def destroy\n      @weblog = Weblog.find(params[:id])\n      @weblog.destroy\n      logger.info(\""#{Time.now} Destroyed Weblog ID ##{@weblog.id}!\"")\n    end\n  end\n\nThe result will be a message in your log file along the lines of:\n\n  Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1\n\nMore information on how to use the logger is at http://www.ruby-doc.org/core/\n\nAlso, Ruby documentation can be found at http://www.ruby-lang.org/ including:\n\n* The Learning Ruby (Pickaxe) Book: http://www.ruby-doc.org/docs/ProgrammingRuby/\n* Learn to Program: http://pine.fm/LearnToProgram/  (a beginners guide)\n\nThese two online (and free) books will bring you up to speed on the Ruby language\nand also on programming in general.\n\n\n== Debugger\n\nDebugger support is available through the debugger command when you start your Mongrel or\nWebrick server with --debugger. This means that you can break out of execution at any point\nin the code, investigate and change the model, AND then resume execution! Example:\n\n  class WeblogController < ActionController::Base\n    def index\n      @posts = Post.find(:all)\n      debugger\n    end\n  end\n\nSo the controller will accept the action, run the first line, then present you\nwith a IRB prompt in the server window. Here you can do things like:\n\n  >> @posts.inspect\n  => \""[#<Post:0x14a6be8 @attributes={\\\""title\\\""=>nil, \\\""body\\\""=>nil, \\\""id\\\""=>\\\""1\\\""}>,\n       #<Post:0x14a6620 @attributes={\\\""title\\\""=>\\\""Rails you know!\\\"", \\\""body\\\""=>\\\""Only ten..\\\"", \\\""id\\\""=>\\\""2\\\""}>]\""\n  >> @posts.first.title = \""hello from a debugger\""\n  => \""hello from a debugger\""\n\n...and even better is that you can examine how your runtime objects actually work:\n\n  >> f = @posts.first\n  => #<Post:0x13630c4 @attributes={\""title\""=>nil, \""body\""=>nil, \""id\""=>\""1\""}>\n  >> f.\n  Display all 152 possibilities? (y or n)\n\nFinally, when you're ready to resume execution, you enter \""cont\""\n\n\n== Console\n\nYou can interact with the domain model by starting the console through <tt>script/console</tt>.\nHere you'll have all parts of the application configured, just like it is when the\napplication is running. You can inspect domain models, change values, and save to the\ndatabase. Starting the script without arguments will launch it in the development environment.\nPassing an argument will specify a different environment, like <tt>script/console production</tt>.\n\nTo reload your controllers and models after launching the console run <tt>reload!</tt>\n\n\n== Description of Contents\n\napp\n  Holds all the code that's specific to this particular application.\n\napp/controllers\n  Holds controllers that should be named like weblogs_controller.rb for\n  automated URL mapping. All controllers should descend from ApplicationController\n  which itself descends from ActionController::Base.\n\napp/models\n  Holds models that should be named like post.rb.\n  Most models will descend from ActiveRecord::Base.\n\napp/views\n  Holds the template files for the view that should be named like\n  weblogs/index.erb for the WeblogsController#index action. All views use eRuby\n  syntax.\n\napp/views/layouts\n  Holds the template files for layouts to be used with views. This models the common\n  header/footer method of wrapping views. In your views, define a layout using the\n  <tt>layout :default</tt> and create a file named default.erb. Inside default.erb,\n  call <% yield %> to render the view using this layout.\n\napp/helpers\n  Holds view helpers that should be named like weblogs_helper.rb. These are generated\n  for you automatically when using script/generate for controllers. Helpers can be used to\n  wrap functionality for your views into methods.\n\nconfig\n  Configuration files for the Rails environment, the routing map, the database, and other dependencies.\n\ndb\n  Contains the database schema in schema.rb.  db/migrate contains all\n  the sequence of Migrations for your schema.\n\ndoc\n  This directory is where your application documentation will be stored when generated\n  using <tt>rake doc:app</tt>\n\nlib\n  Application specific libraries. Basically, any kind of custom code that doesn't\n  belong under controllers, models, or helpers. This directory is in the load path.\n\npublic\n  The directory available for the web server. Contains subdirectories for images, stylesheets,\n  and javascripts. Also contains the dispatchers and the default HTML files. This should be\n  set as the DOCUMENT_ROOT of your web server.\n\nscript\n  Helper scripts for automation and generation.\n\ntest\n  Unit and functional tests along with fixtures. When using the script/generate scripts, template\n  test files will be generated for you and placed in this directory.\n\nvendor\n  External libraries that the application depends on. Also includes the plugins subdirectory.\n  This directory is in the load path.\n"""
https://github.com/aharper/eatingsafe,null
https://github.com/rmanalan/restful-authentication,"""Restful Authentication Generator\n====\n\nThis is a basic restful authentication generator for rails, taken \nfrom acts as authenticated.  Currently it requires Rails 1.2.6 or above.\n\nTo use:\n\n  ./script/generate authenticated user sessions \\\n\t\t--include-activation \\\n\t\t--stateful\n\nThe first parameter specifies the model that gets created in signup\n(typically a user or account model).  A model with migration is \ncreated, as well as a basic controller with the create method.\n\nThe second parameter specifies the sessions controller name.  This is\nthe controller that handles the actual login/logout function on the \nsite.\n\nThe third parameter (--include-activation) generates the code for a \nActionMailer and its respective Activation Code through email.\n\nThe fourth (--stateful) builds in support for acts_as_state_machine\nand generates activation code.  This was taken from:\n\nhttp://www.vaporbase.com/postings/stateful_authentication\n\nYou can pass --skip-migration to skip the user migration.\n\nIf you're using acts_as_state_machine, define your users resource like this:\n\n\tmap.resources :users, :member => { :suspend   => :put,\n                                     :unsuspend => :put,\n                                     :purge     => :delete }\n\nAlso, add an observer to config/environment.rb if you chose the \n--include-activation option\n\n  config.active_record.observers = :user_observer # or whatever you \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t# named your model\n\nSecurity Alert\n====\n\nI introduced a change to the model controller that's been tripping \nfolks up on Rails 2.0.  The change was added as a suggestion to help\ncombat session fixation attacks.  However, this resets the Form \nAuthentication token used by Request Forgery Protection.  I've left\nit out now, since Rails 1.2.6 and Rails 2.0 will both stop session\nfixation attacks anyway."""
https://github.com/bricooke/name_parser,"""= name_parser\n\nhttp://github.com/bricooke/name_parser\n\n== DESCRIPTION:\n\nProvides a NameParser class that takes a single string and provides .first_name, .last_name, .initial functions for the parsed name\n\n== FEATURES/PROBLEMS:\n\n== SYNOPSIS:\n\n== REQUIREMENTS:\n\n== INSTALL:\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) 2008 Brian Cooke\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"""
https://github.com/mascarenhas/luaclr,"""README for LuaCLR 0.1 Alpha\n\n1. What is LuaCLR\n\nLuaCLR is a compiler for the Lua 5.1 language that targets the Microsoft\nCommon Language Runtime (CLR). Right now it also works on Mono, but\nthis is not guaranteed in the future. Also, the compiler is not self-hosting,\nwhich means it depends on the Lua interpreter, but as it's implemented in\na mix of Lua and C# it will be completely self-hosted when complete.\n\nThe compiler aims for completeness (implementing as much of Lua 5.1, including\nthe standard library, as possible) and speed (being faster than the Lua VM, and\napproaching LuaJIT). Also it should provide transparent interfacing between\nLua and the rest of the CLR (at least as good as what LuaInterface provides).\n\nThe current version is incomplete, and lacks most of the Lua standard library,\nas well as integration with the rest of the CLR. The design is also not fixed, and\nwill probably change in the near future.\n\nLuaCLR is free software. The contents of this distribution are Copyright\n2007-2008 Fabio Mascarenhas, and released through the MIT license.\n\n2. Installation\n\nJust do \""make all\"" in Linux, or \""nmake -f Makefile.win all\"" in Windows.\n\n3. Running\n\nRun the compile shell script/bat file to compile a Lua file. You should\nrun it from the root path of LuaCLR:\n\ncompile myscript.lua\n\nThis will generate a myscript.dll file. You can run it with run.exe:\n\nrun.exe myscript\n\nYou will probably see an error message, as there is a lot of functionality\nis still missing. :-)\n\n4. Credits\n\nLuaCLR is designed by Fabio Mascarenhas. You can contact the author\nat mascarenhas@acm.org.\n\n"""
https://github.com/marcinpohl/vebiasoptimizer,""""""
https://github.com/drudru/ext_scaffold,"""ExtScaffold\n===========\n\nScaffolds an entire resource, from model and migration to controller and\nviews, along with a full test suite, just like the standard Rails scaffold\ngenerator. The ext_scaffold generator uses the Ext Javascript framwork to \nbuild the GUI elements (forms and tables).\n\nPass the name of the model, either CamelCased or under_scored, as the first\nargument, and an optional list of attribute pairs.\n\nAttribute pairs are column_name:sql_type arguments specifying the\nmodel's attributes. Timestamps are added by default, so you don't have to\nspecify them by hand as 'created_at:datetime updated_at:datetime'.\n\nFor example, `ext_scaffold post title:string body:text published:boolean`\ngives you a model with those three attributes, a controller that handles\nthe create/show/update/destroy, Ext forms to create and edit your posts, and\nan Ext Grid index that lists them all, as well as a map.resources :posts\ndeclaration in config/routes.rb.\n\n\nPrerequisites\n=============\n\nYou need to download the Ext Javascript framework from\n\n`http://extjs.com/download`,\n\nand unzip it into `#{RAILS_ROOT}/public/ext`. Ext_scaffold was tested\nagainst version 2.0.1 of the Ext framework.\n\n\nInstallation\n============\n\n`script/plugin install http://rug-b.rubyforge.org/svn/ext_scaffold`\n\n\nExample\n=======\n\n`./script/generate ext_scaffold post` # no attributes, view will be anemic\n`./script/generate ext_scaffold post title:string body:text published:boolean`\n`./script/generate ext_scaffold purchase order_id:integer amount:decimal`\n\n\nCopyright (c) 2008 martin.rehfeld@glnetworks.de, released under the MIT license"""
https://github.com/ckhsponge/spongewolf,"""=== Welcome to Spongewolf\nhttp://spongewolf.com\n\nThis is an example Rails application that uses the Spongecell API. It is intended to be as simple as possible. There is no database and javascript will be kept to a minimum.\n\nCurrently the primary function of Spongewolf is to create pretty calendar and event list widgets.\n\nThere are 3 widgets\n1. Flash List View\n2. Flash Social Network Widget (used by Shakira)\n3. HTML Boxed Calendar\n\n== Features\nCreating a Spongecell account\nViewing calendars\nViewing events\nCreating a pre-defined event\nCreating pre-defined widgets\n\n== Feature Requests\nCalendar CRUD\nEvent CRUD\nWidget CRUD\n\nDependencies\nhaml (must be included as a gem)\nRails 2.0 (inclued in vendor so it will run on Media Temple)\n\nReferences\nhttp://spongecell.com\nhttp://spongecell.com/api/help\n\nThe repository was created on February 26, 2008 git://github.com/ckhsponge/spongewolf.git\n\nFor questions, comments or answers contact spongewolf@spongecell.com\n\nThis product is *Beerware, if you like it buy yourself a beer.\n-Chris Hobbs, Spongecell\n\n*Beerware idea stolen from my BitTorrent client\n"""
https://github.com/dag/amazing,null
https://github.com/piclez/merb-more,""""""
https://github.com/shantanoo/bhandar,""""""
https://github.com/lukeredpath/clickatell,null
https://github.com/pdsphil/ruby-merlin,"""== Notes\n\nThis code has come straight from a production Rails app. It will soon be a Rails plugin, but for now, I suggest putting it in the lib/ directory of your Rails project.\n\nYou must have a valid Merlin account to test or use this code.\n\n== ID data via Merlin\n\nTo use the IDDetail classes, load irb or script/console. You must \""require 'id_detail'\"" to proceed. Once you have the libraries required, there are a few simple statements to call the Merlin API given a SSN:\n\nsub = API::IDDetail::Subject.new(\""your SSN\"")\nsub.locate\n\nAfter calling the locate() method, the sub object will have a parsed set of data in its identity attribute - 'sub.identity' to access.\n\n== Configuration\n\nThe id_detail directory must contain a file called 'config.yml' using the following format:\n\n# Merlin API username and password\nusername: your_api_username\npassword: your_api_password\n\nIt is recommended that you symlink this file to the directory after deploy for security reasons. This file is also required for development mode - just fill with dummy data.\n\n== Tests\n\nTo run the rspec tests, make sure you are in the id_detail directory and type 'spec -cfs spec/' - these tests do not hit the API directly, they use fixtures."""
https://github.com/piclez/merb-plugins,""""""
https://github.com/sprinkle-tool/sprinkle,"""# Sprinkle\n\nSprinkle is a software provisioning tool you can use to build remote servers with, after the base operating\nsystem has been installed. For example, to install a Rails or Merb stack on a brand new slice directly after\nits been created.\n\n[![Build Status](https://travis-ci.org/sprinkle-tool/sprinkle.png?branch=master)](https://travis-ci.org/sprinkle-tool/sprinkle) [![Code Climate](https://codeclimate.com/github/sprinkle-tool/sprinkle.png)](https://codeclimate.com/github/sprinkle-tool/sprinkle/)\n\n  * `#sprinkle` channel on the Freenode IRC Network\n  * <http://redartisan.com/2008/5/27/sprinkle-intro>\n  * <http://github.com/sprinkle-tool/sprinkle>\n  * <http://github.com/benschwarz/passenger-stack>\n  * <http://github.com/trevorturk/sprinkle-packages>\n  * <http://www.vimeo.com/2888665>\n  * <http://maxim.github.com/sprinkle-cheatsheet>\n  * <http://github.com/mingalar/sprinkle-packages>\n  * <http://github.com/stuartellis/spritz>\n  * <http://engineering.gomiso.com/2011/08/26/forget-chef-or-puppet-automate-with-sprinkle/>\n\n### Installation\n\nInstall:\n\n```\n$ gem install sprinkle\n```\n\n### Packages\n\nProperties of packages such as their name, type, dependencies, etc, and what packages apply to what machines\nis described via a domain specific language that Sprinkle executes (in fact one of the aims of Sprinkle is to\ndefine as concisely as possible a language for installing software).\n\nAn example:\n\n``` ruby\npackage :ruby do\n  description 'Ruby Virtual Machine'\n  version '1.8.6'\n  source \""ftp://ftp.ruby-lang.org/pub/ruby/1.8/ruby-#{version}-p111.tar.gz\""\n  requires :ruby_dependencies\n\n  verify do\n    has_file '/usr/bin/ruby'\n  end\nend\n```\n\nThis defines a package called `ruby`, that uses the source based installer to build Ruby 1.8.6 from source,\ninstalling the package `ruby_dependencies` beforehand. The package verifies it was installed correctly by verifying the file `/usr/bin/ruby` exists after installation. If this verification fails, the sprinkle script will gracefully stop.\n\nReasonable defaults are set by sprinkle, such as the install prefix, download area, etc, but can be customized\nglobally or per package (see below for an example).\n\nSince packages come in many forms (eg. gems, pre-compiled debs, compressed source tar.gz, etc), Sprinkle supports\nmany different installer types, giving you the most amount of flexibility of how you'd like software installed.\nNew installer types can be added into the system easily.\n\nFor example, you could install Rails via gems, nginx via source, and mysql via APT, while retaining the flexibility\nof changing installer types as software is updated upstream.\n\nSprinkle also supports dependencies between packages, allowing you specify pre-requisites that need to be\ninstalled in order.\n\n### Policies\n\nPackages can be grouped into polices to define several packages that should be installed together.  An example:\n\n``` ruby\npolicy :rails, :roles => :app do\n  requires :rails, :version => \""3.2\""\n  requires :appserver\n  requires :database\n  requires :webserver\nend\n```\n\nThis defines a policy called Rails, that applies to machines of role `:app`. The policy includes the packages\nrails (version 3.2), appserver, database and webserver.\n\nThe appserver, database and webserver packages can also be virtual, prompting the user for selection if multiple choices for the virtual package exist.\n\nSprinkle is architected to be extendable in many ways, one of those areas is in its deployment of commands to\nremote hosts. Currently Sprinkle supports the use of Capistrano, Vlad, or a direct net/ssh connection to\nissue commands on remote hosts via ssh, but could also be extended to use any other command transport mechanism\ndesired. Sprinkle can also be configured to simply issue installation commands to provision the local system.\n\nSprinkle is a work in progress and I'm excited to hear if anyone finds it useful - please feel free to\ncomment, ask any questions, or send in any ideas, patches, bugs. All most welcome.\n\nMarcus Crafter - <crafterm@redartisan.com>\n\n----\n\n## APPENDIX \n\n### A full example deployment\n\nA full example Sprinkle deployment script for deploying Rails (via gems), MySQL (via APT), Apache (via source)\nand Git (via source with dependencies from APT):\n\n``` ruby\n# Sprinkle Rails deployment script\n#\n# This is an example Sprinkle script, configured to install Rails from gems, Apache, Ruby and Git from source,\n# and mysql and Git dependencies from apt on an Ubuntu system. Installation is configured to run via\n# Capistrano (and an accompanying deploy.rb recipe script). Source based packages are downloaded and built into\n# /usr/local on the remote system.\n#\n# A sprinkle script is separated into 3 different sections. Packages, policies and deployment.\n#\n# Packages\n#\n#  Defines the world of packages as we know it. Each package has a name and\n#  set of metadata including its installer type (eg. apt, source, gem, etc). Packages can have\n#  relationships to each other via dependencies\n#\n# Policies\n#\n#  Names a group of packages (optionally with versions) that apply to a particular set of roles.\n#\n# Deployment\n#\n#  Defines script wide settings such as a delivery mechanism for executing commands on the target\n#  system (eg. capistrano), and installer defaults (eg. build locations, etc).\n\n# Packages\n\npackage :ruby do\n  description 'Ruby Virtual Machine'\n  version '1.8.6'\n  source \""ftp://ftp.ruby-lang.org/pub/ruby/1.8/ruby-#{version}-p111.tar.gz\""\n  requires :ruby_dependencies\nend\n\npackage :ruby_dependencies do\n  description 'Ruby Virtual Machine Build Dependencies'\n  apt %w( bison zlib1g-dev libssl-dev libreadline5-dev libncurses5-dev file )\nend\n\npackage :mysql, :provides => :database do\n  description 'MySQL Database'\n  apt %w( mysql-server mysql-client )\nend\n\npackage :apache, :provides => :webserver do\n  description 'Apache 2 HTTP Server'\n  version '2.2.9'\n  source \""http://apache.wildit.net.au/httpd/httpd-#{version}.tar.bz2\"" do\n    enable %w( mods-shared=all proxy proxy-balancer proxy-http rewrite cache headers ssl deflate so )\n    prefix \""/opt/local/apache2-#{version}\""\n    post :install, 'install -m 755 support/apachectl /etc/init.d/apache2', 'update-rc.d -f apache2 defaults'\n  end\n  requires :apache_dependencies\nend\n\npackage :apache_dependencies do\n  description 'Apache 2 HTTP Server Build Dependencies'\n  apt %w( openssl libtool mawk zlib1g-dev libssl-dev )\nend\n\npackage :rubygems do\n  description 'Ruby Gems Package Management System'\n  version '1.2.0'\n  source \""http://rubyforge.org/frs/download.php/38646/rubygems-#{version}.tgz\"" do\n    custom_install 'ruby setup.rb'\n  end\n  requires :ruby\nend\n\npackage :rails do\n  description 'Ruby on Rails'\n  gem 'rails'\n  version '3.2'\nend\n\npackage :mongrel do\n  description 'Mongrel Application Server'\n  gem 'mongrel'\n  version '1.1.5'\nend\n\npackage :mongrel_cluster, :provides => :appserver do\n  description 'Cluster Management for Mongrel'\n  gem 'mongrel_cluster' # :source => 'http://gems.github.com/' for alternate gem server\n  version '1.0.5'\n  requires :mongrel\nend\n\npackage :git, :provides => :scm do\n  description 'Git Distributed Version Control'\n  version '1.5.6.3'\n  source \""http://kernel.org/pub/software/scm/git/git-#{version}.tar.gz\""\n  requires :git_dependencies\nend\n\npackage :git_dependencies do\n  description 'Git Build Dependencies'\n  apt 'git', :dependencies_only => true\nend\n\n# Policies\n\n# Associates the rails policy to the application servers. Contains rails, and surrounding\n# packages. Note, appserver, database and webserver are all virtual packages defined above. If\n# there's only one implementation of a virtual package, it's selected automatically, otherwise\n# the user is requested to select which one to use.\n\npolicy :rails, :roles => :app do\n  requires :rails, :version => \""3.2\""\n  requires :appserver\n  requires :database\n  requires :webserver\n  requires :scm\nend\n\n# Deployment\n\n# Configures sprinkle to use capistrano for delivery of commands to the remote machines (via\n# the named 'deploy' recipe). Also configures 'source' installer defaults to put package gear\n# in /usr/local\n\ndeployment do\n\n  # mechanism for deployment\n  delivery :capistrano do\n    recipes 'deploy'\n  end\n\n  # source based package installer defaults\n  source do\n    prefix   '/usr/local'           # where all source packages will be configured to install\n    archives '/usr/local/sources'   # where all source packages will be downloaded to\n    builds   '/usr/local/build'     # where all source packages will be built\n  end\n\nend\n```\n\nPlease see the examples directory for more complete examples of Sprinkle deployment scripts, and \nalso the [Passenger Stack github page](http://github.com/benschwarz/passenger-stack) and [video by \nBen Schwarz](http://www.vimeo.com/2888665)."""
https://github.com/vanpelt/stat,null
https://github.com/aanand/do_notation,"""Haskell-style monad do-notation for Ruby\n========================================\n\nExample:\n\n    require 'do_notation'\n\n    class Array\n      include Monad\n\n      def self.unit x\n        [x]\n      end\n\n      def bind &f\n        map(&f).inject([], &:+)\n      end\n    end\n\n    Array.run do\n      x <- [\""first\"", \""second\""]\n      y <- [\""once\"", \""twice\""]\n\n      unit(\""#{x} cousin #{y} removed\"")\n    end\n\nThe above code returns the array:\n\n    [\""first cousin once removed\"",\n     \""first cousin twice removed\"",\n     \""second cousin once removed\"",\n     \""second cousin twice removed\""]\n\nFor more examples, see the test suite.\n\nInstallation\n============\n\n    gem install do_notation\n\nBy Aanand Prasad (aanand.prasad@gmail.com)\n"""
https://github.com/jasonm/bricklet-core,null
https://github.com/halorgium/gcbot,null
https://github.com/Norgg/rubynomic,"""This is a nomic, written in camping.\n\nrunnomic is an altered version of the camping server using mongrel only,\nrequiring everything necessary and then chrooting and setuiding to hopefully\nstop people messing with your system too much.\n\nTo run:\nInstall camping.\nMake sure you have diff and patch in your path.\nRun camping nomic.rb\n\nTo run semi-securely:\nSet up a chroot environment in which diff and patch can be run.\n\nldd /usr/bin/diff\nldd /usr/bin/patch\n\nmkdir lib\nmkdir bin\ncopy diff and patch into bin\ncopy the libs required for them into lib\nmake sure permissions are right\n\nedit runnomic to change to the right uid for the user you want to run as\n\nsudo ruby runnomic -d nomic.db nomic.rb\n\npoke some stuff 'til it works, probably involving copying more libs or just\ngiving up and copying the whole of /lib.\n\n\n"""
https://github.com/shingara/pictrails,"""h1. Pictrails\n\nA Web Photo Gallery, written with Rails 2.1. Pictrails can manage several photo galleries.\n\nh2. Features\n\n * Create several Galleries\n * Create Galleries like child of another Gallery\n * Add several pictures in a Gallery\n * Create a gallery with define a directory in same server of pictrails if the\n   directory has several directories into, all of this directory are child of\n   master Gallery\n * Admin interface with login to add/edit/delete Galleries and Pictures\n * Define the thumbnails and pictures size in settings interface\n * Delete the cache page in settings interface\n * Define the number of pictures by pagination Gallery\n * Define the number of gallery by pagination of Gallery's list\n * Define a list of tag for pictures\n * View a sidebar with all gallery in it tree\n * Navigate with a breadcrumb\n * View a cloud tag of all gallery\n * Navigate by tag\n * Comments on each pictures\n\nh2. Requirements\n\nCurrently you need all of those things to get Pictrails to run:\n\n * Ruby On Rails 2.1.x\n * Ruby of 1.8.6 or greater\n * A database supported by Rails ActiveRecord (MySQL, DB2, SQLite3, ...)\n * Ruby drivers for your database (obviously out of the box with Rails)\n * Redcloth gem\n * A gem of an image-handling API like :\n ** ImageScience\n ** RMagick\n ** Mini-magick\n\nh2. Installing\n\nWith the tar.gz or any other archive:\n\n * Extract sources to a folder\n * Create a database.yml file in the config directory. You can copy the database.yml.example\n * Create your databases: <kbd>rake db:create:all</kbd>\n * Migrate your database: <kbd>rake db:migrate</kbd>\n * Start the server in production mode : <kbd>ruby script/server -e production</kbd>\n\nh2. Updating\n\nWith the tar.gz or any other archive:\n\n * Extract sources and replace all in the old folder\n * Stop the server\n * Migrate your database: <kbd>rake db:migrate</kbd>\n * Start the server in production mode : <kbd>ruby script/server -e production</kbd>\n\nh2. Demo Website\n\nA demo website of Pictrails is available to the \""demo of pictrails\"":http://pictrails.shingara.fr\n\nThe \""admin part\"":http://pictrails.shingara.fr/admin has like login/pass : admin/pictrails\n\nh2. Information about this project\n\nPictrails is actually consider like an Beta version, and is under development.\n\nAll contributions are welcome. \n\nI suck in design, I know it and I am sorry but I will really be happy if anyone could\nhelp me.\n\nIf you want to contribute, all work is made under a git repository. You can clone the \nsource with the following command :\n\n<kbd>git clone git://github.com/shingara/pictrails.git</kbd>\n\nAfter a clone you need update the submodule :\n\n<kbd>git submodule init && git submodule update</kbd>\n\nA \""redmine development platform\"":http://dev.shingara.fr/projects/show/3 is\nused. Feel free to post your feature requests and defects report.\n\nh2. License\n\nThis code is free to use under the terms of the MIT license (provided with sources).\n"""
https://github.com/jicksta/ami-ragel,null
https://github.com/tekkub/tekkonfig,null
https://github.com/gensym/bookeater,""""""
https://github.com/bscofield/depth-charge,"""README"""
https://github.com/julesss/wlwdeezerplayer,null
https://github.com/pdsphil/ruby-idology,"""== Notes\n\nThis code has come straight from a production Rails app. It will soon be a Rails plugin, but for now, I suggest putting it in the lib/ directory of your Rails project.\n\nYou must have a valid IDology account to test or use this API library.\n\n== ID Verification via IDology\n\nAssuming you have a local proxy setup to the development server - and the development server's IP is authorized to access the IDology API - here is a curl command to test whether or not the API is working correctly. In this example, the socks v5 proxy is using 'ssh -D localhost:1080' to setup a temporary proxy between the development machine and the development server. Note that the username / password must be correct.\n\nThis curl command will perform a search for 'Mickey Mouse' - a valid test record in the IDology system\n\ncurl -v --socks http://127.0.0.1:1080 -d username=test -d password=test -d firstName=mickey -d lastName=mouse -d address='15 MIDLAND AVE APT' -d city=paramus -d state=NJ -d zip=07652 https://the.idology.api.url\n\n\n== Configuration\n\nThe id_verification directory must contain a file called 'config.yml' using the following format:\n\n# IDology API username and password\nusername: your_api_username\npassword: your_api_password\n\nIt is recommended that you symlink this file to the directory after deploy for security reasons. This file is also required for development mode - just fill with dummy data.\n\n== Tests\n\nTo run the rspec tests, make sure you are in the lib/api/id_verification directory and type 'spec -cfs spec/' - these tests do not hit the API directly, they use fixtures.\n"""
https://github.com/mislav/will_paginate,"""# will_paginate\n\nwill_paginate is a pagination library that integrates with Ruby on Rails, Sinatra, Merb, DataMapper and Sequel.\n\nInstallation:\n\n``` ruby\n## Gemfile for Rails 3+, Sinatra, and Merb\ngem 'will_paginate', '~> 3.1.0'\n```\n\nSee [installation instructions][install] on the wiki for more info.\n\n\n## Basic will_paginate use\n\n``` ruby\n## perform a paginated query:\n@posts = Post.paginate(:page => params[:page])\n\n# or, use an explicit \""per page\"" limit:\nPost.paginate(:page => params[:page], :per_page => 30)\n\n## render page links in the view:\n<%= will_paginate @posts %>\n```\n\nAnd that's it! You're done. You just need to add some CSS styles to [make those pagination links prettier][css].\n\nYou can customize the default \""per_page\"" value:\n\n``` ruby\n# for the Post model\nclass Post\n  self.per_page = 10\nend\n\n# set per_page globally\nWillPaginate.per_page = 10\n```\n\nNew in Active Record 3:\n\n``` ruby\n# paginate in Active Record now returns a Relation\nPost.where(:published => true).paginate(:page => params[:page]).order('id DESC')\n\n# the new, shorter page() method\nPost.page(params[:page]).order('created_at DESC')\n```\n\nSee [the wiki][wiki] for more documentation. [Report bugs][issues] on GitHub.\n\nHappy paginating.\n\n\n[wiki]: https://github.com/mislav/will_paginate/wiki\n[install]: https://github.com/mislav/will_paginate/wiki/Installation \""will_paginate installation\""\n[issues]: https://github.com/mislav/will_paginate/issues\n[css]: http://mislav.github.io/will_paginate/\n"""
https://github.com/myabc/portfolio,"""== Welcome to Rails\n\nRails is a web-application and persistence framework that includes everything\nneeded to create database-backed web-applications according to the\nModel-View-Control pattern of separation. This pattern splits the view (also\ncalled the presentation) into \""dumb\"" templates that are primarily responsible\nfor inserting pre-built data in between HTML tags. The model contains the\n\""smart\"" domain objects (such as Account, Product, Person, Post) that holds all\nthe business logic and knows how to persist themselves to a database. The\ncontroller handles the incoming requests (such as Save New Account, Update\nProduct, Show Post) by manipulating the model and directing data to the view.\n\nIn Rails, the model is handled by what's called an object-relational mapping\nlayer entitled Active Record. This layer allows you to present the data from\ndatabase rows as objects and embellish these data objects with business logic\nmethods. You can read more about Active Record in\nlink:files/vendor/rails/activerecord/README.html.\n\nThe controller and view are handled by the Action Pack, which handles both\nlayers by its two parts: Action View and Action Controller. These two layers\nare bundled in a single package due to their heavy interdependence. This is\nunlike the relationship between the Active Record and Action Pack that is much\nmore separate. Each of these packages can be used independently outside of\nRails.  You can read more about Action Pack in\nlink:files/vendor/rails/actionpack/README.html.\n\n\n== Getting Started\n\n1. At the command prompt, start a new Rails application using the <tt>rails</tt> command\n   and your application name. Ex: rails myapp\n   (If you've downloaded Rails in a complete tgz or zip, this step is already done)\n2. Change directory into myapp and start the web server: <tt>script/server</tt> (run with --help for options)\n3. Go to http://localhost:3000/ and get \""Welcome aboard: You\u2019re riding the Rails!\""\n4. Follow the guidelines to start developing your application\n\n\n== Web Servers\n\nBy default, Rails will try to use Mongrel and lighttpd if they are installed, otherwise\nRails will use WEBrick, the webserver that ships with Ruby. When you run script/server,\nRails will check if Mongrel exists, then lighttpd and finally fall back to WEBrick. This ensures\nthat you can always get up and running quickly.\n\nMongrel is a Ruby-based webserver with a C component (which requires compilation) that is\nsuitable for development and deployment of Rails applications. If you have Ruby Gems installed,\ngetting up and running with mongrel is as easy as: <tt>gem install mongrel</tt>.\nMore info at: http://mongrel.rubyforge.org\n\nIf Mongrel is not installed, Rails will look for lighttpd. It's considerably faster than\nMongrel and WEBrick and also suited for production use, but requires additional\ninstallation and currently only works well on OS X/Unix (Windows users are encouraged\nto start with Mongrel). We recommend version 1.4.11 and higher. You can download it from\nhttp://www.lighttpd.net.\n\nAnd finally, if neither Mongrel or lighttpd are installed, Rails will use the built-in Ruby\nweb server, WEBrick. WEBrick is a small Ruby web server suitable for development, but not\nfor production.\n\nBut of course its also possible to run Rails on any platform that supports FCGI.\nApache, LiteSpeed, IIS are just a few. For more information on FCGI,\nplease visit: http://wiki.rubyonrails.com/rails/pages/FastCGI\n\n\n== Debugging Rails\n\nSometimes your application goes wrong.  Fortunately there are a lot of tools that\nwill help you debug it and get it back on the rails.\n\nFirst area to check is the application log files.  Have \""tail -f\"" commands running\non the server.log and development.log. Rails will automatically display debugging\nand runtime information to these files. Debugging info will also be shown in the\nbrowser on requests from 127.0.0.1.\n\nYou can also log your own messages directly into the log file from your code using\nthe Ruby logger class from inside your controllers. Example:\n\n  class WeblogController < ActionController::Base\n    def destroy\n      @weblog = Weblog.find(params[:id])\n      @weblog.destroy\n      logger.info(\""#{Time.now} Destroyed Weblog ID ##{@weblog.id}!\"")\n    end\n  end\n\nThe result will be a message in your log file along the lines of:\n\n  Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1\n\nMore information on how to use the logger is at http://www.ruby-doc.org/core/\n\nAlso, Ruby documentation can be found at http://www.ruby-lang.org/ including:\n\n* The Learning Ruby (Pickaxe) Book: http://www.ruby-doc.org/docs/ProgrammingRuby/\n* Learn to Program: http://pine.fm/LearnToProgram/  (a beginners guide)\n\nThese two online (and free) books will bring you up to speed on the Ruby language\nand also on programming in general.\n\n\n== Debugger\n\nDebugger support is available through the debugger command when you start your Mongrel or\nWebrick server with --debugger. This means that you can break out of execution at any point\nin the code, investigate and change the model, AND then resume execution! Example:\n\n  class WeblogController < ActionController::Base\n    def index\n      @posts = Post.find(:all)\n      debugger\n    end\n  end\n\nSo the controller will accept the action, run the first line, then present you\nwith a IRB prompt in the server window. Here you can do things like:\n\n  >> @posts.inspect\n  => \""[#<Post:0x14a6be8 @attributes={\\\""title\\\""=>nil, \\\""body\\\""=>nil, \\\""id\\\""=>\\\""1\\\""}>,\n       #<Post:0x14a6620 @attributes={\\\""title\\\""=>\\\""Rails you know!\\\"", \\\""body\\\""=>\\\""Only ten..\\\"", \\\""id\\\""=>\\\""2\\\""}>]\""\n  >> @posts.first.title = \""hello from a debugger\""\n  => \""hello from a debugger\""\n\n...and even better is that you can examine how your runtime objects actually work:\n\n  >> f = @posts.first\n  => #<Post:0x13630c4 @attributes={\""title\""=>nil, \""body\""=>nil, \""id\""=>\""1\""}>\n  >> f.\n  Display all 152 possibilities? (y or n)\n\nFinally, when you're ready to resume execution, you enter \""cont\""\n\n\n== Console\n\nYou can interact with the domain model by starting the console through <tt>script/console</tt>.\nHere you'll have all parts of the application configured, just like it is when the\napplication is running. You can inspect domain models, change values, and save to the\ndatabase. Starting the script without arguments will launch it in the development environment.\nPassing an argument will specify a different environment, like <tt>script/console production</tt>.\n\nTo reload your controllers and models after launching the console run <tt>reload!</tt>\n\n\n== Description of Contents\n\napp\n  Holds all the code that's specific to this particular application.\n\napp/controllers\n  Holds controllers that should be named like weblogs_controller.rb for\n  automated URL mapping. All controllers should descend from ApplicationController\n  which itself descends from ActionController::Base.\n\napp/models\n  Holds models that should be named like post.rb.\n  Most models will descend from ActiveRecord::Base.\n\napp/views\n  Holds the template files for the view that should be named like\n  weblogs/index.erb for the WeblogsController#index action. All views use eRuby\n  syntax.\n\napp/views/layouts\n  Holds the template files for layouts to be used with views. This models the common\n  header/footer method of wrapping views. In your views, define a layout using the\n  <tt>layout :default</tt> and create a file named default.erb. Inside default.erb,\n  call <% yield %> to render the view using this layout.\n\napp/helpers\n  Holds view helpers that should be named like weblogs_helper.rb. These are generated\n  for you automatically when using script/generate for controllers. Helpers can be used to\n  wrap functionality for your views into methods.\n\nconfig\n  Configuration files for the Rails environment, the routing map, the database, and other dependencies.\n\ndb\n  Contains the database schema in schema.rb.  db/migrate contains all\n  the sequence of Migrations for your schema.\n\ndoc\n  This directory is where your application documentation will be stored when generated\n  using <tt>rake doc:app</tt>\n\nlib\n  Application specific libraries. Basically, any kind of custom code that doesn't\n  belong under controllers, models, or helpers. This directory is in the load path.\n\npublic\n  The directory available for the web server. Contains subdirectories for images, stylesheets,\n  and javascripts. Also contains the dispatchers and the default HTML files. This should be\n  set as the DOCUMENT_ROOT of your web server.\n\nscript\n  Helper scripts for automation and generation.\n\ntest\n  Unit and functional tests along with fixtures. When using the script/generate scripts, template\n  test files will be generated for you and placed in this directory.\n\nvendor\n  External libraries that the application depends on. Also includes the plugins subdirectory.\n  This directory is in the load path.\n"""
https://github.com/chuyeow/facon,"""Facon\n=====\n\nFacon is a mocking library in the spirit of the [Bacon](https://github.com/chneukirchen/bacon) spec library. Small, compact, and works with [Bacon](https://github.com/chneukirchen/bacon) and [MacBacon](https://github.com/alloy/MacBacon).\n\n[![Build Status](https://travis-ci.org/chuyeow/facon.png)](https://travis-ci.org/chuyeow/facon)\n\n[![Coverage Status](https://coveralls.io/repos/chuyeow/facon/badge.png)](https://coveralls.io/r/chuyeow/facon)\n\nSynopsis\n--------\n\nTo use Facon with [Bacon](https://github.com/chneukirchen/bacon), simply `require 'facon'` and you're done.\n\nYou can now write [Bacon](https://github.com/chneukirchen/bacon) specs like this (in RSpec-like style):\n\n```ruby\n  require 'bacon'\n  require 'facon'\n\n  describe 'PersonController' do\n    before do\n      @konata = mock('konata', :id => 1, :name => 'Konata Izumi')\n      @kagami = mock('kagami', :id => 2, :name => 'Kagami Hiiragi')\n    end\n\n    it \""should find all people on GET to 'index'\"" do\n      Person.should.receive(:find).with(:all).and_return([@konata, @kagami])\n\n      get('/people/index')\n    end\n\n    it \""should find the person with id of 1 on Get to 'show/1'\"" do\n      Person.should.receive(:find).with(1).and_return(@konata)\n\n      get('/people/show/1')\n    end\n\n    it \""knows how many times we call a method\"" do\n      Person.should.receive(:find).at_least(3)\n\n      Person.list\n    end\n\n    it \""can use at_most\"" do\n      Person.should.receive(:find).at_most(3)\n\n      Person.list\n    end\n  end\n```\n\nFor now, more examples can be found in the specs included with the Facon gem. I promise to get better examples into the documentation!\n\nSee Facon::Baconize for more documentation on using Facon with [Bacon](https://github.com/chneukirchen/bacon).\n\nRequirements\n------------\n\n* Ruby (check [Travis CI builds](https://travis-ci.org/chuyeow/facon) for which versions are supported)\n* [Bacon](https://github.com/chneukirchen/bacon) (optional, required for running specs)\n\nCompatibility with Bacon\n------------------------\n\nWhen used with Bacon, Facon uses some Bacon hooks, which unfortunately causes some compatibility issues with new versions of Bacon. Use this compatibility chart to find out which versions of Facon to install when running with Bacon.\n\n```\nFacon version -- Bacon version\n<= 0.3.x      -- 0.9 (only tested with 0.9 but might work with earlier versions of Bacon)\n0.4           -- 1.0, 1.1\n```\n\nInstallation\n------------\n\nSimply install the gem:\n  `gem install facon`\n\nOr add it to your Gemfile:\n  `gem 'facon'`\n\nThe Source Code\n---------------\n\nYou can get the latest trunk from the Git repository on Github:\n  <https://github.com/chuyeow/facon>\n\nTodos\n-----\n\n* test/unit and RSpec integration.\n* Remove the `$facon_mocks` global.\n* Throw away unnecessary code.\n* Implement `exactly` expectation.\n\nContributors\n------------\n\n* [James Tucker](https://github.com/raggi) for #times, #once, #never expectation matchers.\n* [Peter Kim](https://github.com/petejkim) for [MacBacon](https://github.com/alloy/MacBacon) support.\n* [Yossef Mendelssohn](https://github.com/ymendel) for Ruby 1.9.2 compatibility fixes.\n* [Ivan Acosta-Rubio](https://github.com/ivanacostarubio) for at_most and at_least expectations.\n\nThanks to\n---------\n\n* [RSpec](http://rspec.info/) for creating spec/mocks, from which a lot of the code for Facon is stolen.\n* [Christian Neukirchen]((https://github.com/chneukirchen) for creating Bacon.\n\nLicense\n-------\n\n(The MIT License)\n\nCopyright (c) 2008 Cheah Chu Yeow\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/chuyeow/facon/trend.png)](https://bitdeli.com/free \""Bitdeli Badge\"")\n[![Analytics](https://ga-beacon.appspot.com/UA-46828034-1/facon/readme)](https://github.com/igrigorik/ga-beacon)\n"""
