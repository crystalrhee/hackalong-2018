https://github.com/wycats/merb-core,"""merb-core and merb-more have been merged into http://github.com/wycats/merb"""
https://github.com/vanpelt/jsawesome,"""Jsawesome\n\nDescription:\n    JSAwesome provides a powerful JSON based DSL for creating interactive forms.\n\nExample:\n    new JSAwesome('rad', [['cool','neat'], ['^neat',true]], {'cool':{label:'Cool man', validation:'cool'}).to_html()\n    =>\n      <label for=\""rad_cool\"">Cool man</label>\n      <input type=\""text\"" name=\""rad_cool\"" value=\""neat\""/>\n      <label for=\""rad_neat\""><input type=\""checkbox\"" name=\""rad_neat\"" checked=\""checked\""/> Neat</label>\n    \n    A detailed overview of the library is now available at\n      http://vandev.com/2008/4/22/jsawesome\n      \n    Also see the functional tests for more examples of what is possible\n\nMore information:\n    http://github.com/vanpelt/jsawesome/tree/master\n    \nAuthor:\n    Chris Van Pelt, vanpelt@doloreslabs.com"""
https://github.com/rubinius/rubinius,"""1. The Rubinius Language Platform\n\nRubinius is a modern language platform that supports a number of programming\nlanguages.\n\nRubinius includes a bytecode virtual machine, generational garbage collector,\nand just-in-time (JIT) native machine code compiler. Rubinius provides\nconcurrency support via native OS threads with no global interpreter lock.\n\nRubinius runs on Mac OS X and many Unix/Linux operating systems. Microsoft\nWindows is not yet supported.\n\n\n2. Code of Conduct\n\nParticipation in the Rubinius project is governed by the Rubinius Code of\nConduct. See https://rubinius.com/code-of-conduct/\n\n3. The Ruby Programming Language\n\nMany popular Ruby applications, like Rails, run on Rubinius, which aims to be\ncompatible with Ruby version 2.3.1.\n\nRubinius includes a Ruby parser, Ruby bytecode compiler, Ruby core library,\nand C-API compatibility for native C extensions. The Ruby core library is\nwritten almost entirely in Ruby. The Ruby bytecode compiler and other tools,\nsuch as the debugger, are also written in Ruby.  Rubinius provides the\nstandard Ruby libraries, with the following exceptions:\n\n* Continuation\n* Ripper\n* TracePoint\n* Tracer\n\nThe following Ruby features are not supported on Rubinius:\n\n* Refinements\n* $SAFE levels\n\n\n4. License\n\nAll source code in this repository is subject to the terms of the Mozilla Public\nLicense, version 2.0 unless stated otherwise. A copy of this license can be\nfound the file \""LICENSE\"" or at https://www.mozilla.org/MPL/2.0/.\n\nContributions made prior to January 3rd, 2016 are licensed under the old BSD\n3-clause license. A copy of this license can be found in the file \""BSD_LICENSE\"".\n\nIn the event a directory contains a \""LICENSE\"", \""LICENSE.txt\"" or \""COPYING\"" file\nthe license specified in said file applies to the contents of said directory and\nall sub directories, overwriting the licenses specified above.\n\n5. Installing Rubinius from Source\n\nPlease see https://book.rubinius.com/manuscript/getting_rubinius.html\nfor a more complete guide to installing Rubinius from source.\n\nTo install Rubinius, use the following steps:\n\n  1. Ensure that MRI 2.0+, rubygems, rake, git and LLVM are installed\n  2. git clone git://github.com/rubinius/rubinius.git\n  3. cd rubinius\n  4. ./build.sh --prefix=/path/to/install/dir\n\nWhen the install process finishes, follow the directions printed to the\nterminal to add the Rubinius executable (bin) directory to your PATH.\n\n\n6. Using RubyGems\n\nRubinius comes with RubyGems built-in. To install a gem, run the following:\n\n  $ rbx -S gem install <gem_name>\n\n\n7. Documentation\n\nThe Rubinius documentation is the Rubinius book:\n\n  https://rubinius.com/book/\n\n\n8. Issues & Support\n\nPlease file tickets for bugs or problems. The issue tracker is:\n\n  https://github.com/rubinius/rubinius/issues\n\nFor additional help, visit the Rubinius Gitter chat room:\n\n  https://gitter.im/rubinius/rubinius\n\n\n9. Contributing\n\nThe Rubinius team welcomes contributions. For more information, read the\n.github/contributing.md file.\n"""
https://github.com/technoweenie/duplikate,"""duplikate\n=========\n\n# process the differences between the two directories:\n\ndupe = Duplikate.process 'my-git-repo', 'my-svn-repo'\ndupe.added_files         #=> [..., ...]\ndupe.added_directories   #=> [..., ...]\ndupe.deleted_files       #=> [..., ...]\ndupe.deleted_directories #=> [..., ...]\ndupe.existing_files      #=> [..., ...]\n\ndupe.report\n\n# Or actually make the changes and commit in svn:\n\nDuplikate.execute 'my-git-repo', 'my-svn-repo'\n\nTODO: Actual real-world usage!\n"""
https://github.com/defunkt/ambition,"""= Ambition\n\n\n== Get it\n\n\n\n$ git clone git://github.com/defunkt/ambition.git\n\n== Resources\n\n * http://ambition.rubyforge.org/\n * http://groups.google.com/group/ambition-rb/\n * http://errtheblog.com/posts/63-full-of-ambition\n * http://errtheblog.com/posts/82-adapting-ambitiously\n * http://errtheblog.com/posts/86-sugary-adapters\n * http://errtheblog.com/posts/64-even-more-ambitious\n\n\n\n== Author\n\nChris Wanstrath\nchris@ozmm.org\n"""
https://github.com/jnewland/lazy_record,"""LazyRecord\n==========\n\nProof of concept Lazy-Loading for ActiveRecord. Inspired by the 'kickers' of Ambition.\n  \n  >> b = Buzz.lazy_find(:first)\n  => #<ActiveRecord::Lazy::Promise computation=#<Proc:0x025d1e50@...>>\n  -------------No SQL query is run until a method is called on this 'Promise' \n  >> b.to_s\n  -------------Buzz Load (0.000578)   SELECT * FROM buzz LIMIT 1\n  => \""Inaugural Buzz\""\n  \nUse the +lazy_record+ class method to make this the default for a certain class:\n  \n  class Buzz << ActiveRecord::Base\n    lazy_record\n  end\n  \n  >> b = Buzz.find(:first)\n  => #<ActiveRecord::Lazy::Promise computation=#<Proc:0x025d1e50@...>>\n  -------------No SQL query is run until a method is called on this 'Promise' \n  >> b.to_s\n  -------------Buzz Load (0.000578)   SELECT * FROM buzz LIMIT 1\n  => \""Inaugural Buzz\""\n\n\nWhy you might want to use this\n===========\n\nSay you've got some kick-ass cache_fu going on in your views - huge blocks of HTML being cached with a TTL of 30 mins or so.\nBut, each hit on your controller still fires off the 'spensive DB queries to fetch your tag cloud. With lazy loading, these\nqueries aren't run until absolutely necessary - giving your DB a rest til your cache expires, and boosting your reqs/sec.\n\n\nWhy you might not want to use this\n===========\n\n  >> b = Buzz.lazy_find(123023424)\n  => #<ActiveRecord::Lazy::Promise computation=#<Proc:0x025d1e50@...>>\n  >> puts \""booleans are screwed\"" if b\n  booleans are screwed\n\n\nPromise code from here: http://moonbase.rydia.net/software/lazy.rb/\n\nContact\n=======\nJesse Newland\njnewland@gmail.com"""
https://github.com/jnewland/votigoto,"""README for votigoto\n===================\n\n>> require 'votigoto'\n=> true\n>> tivo = Votigoto::Base.new(\""10.0.0.148\"",\""SEKRET_MEDIA_ACCESS_KEY\"")\n=> #<Votigoto::Base:0x14095d8 @mak=\""SEKRET_MEDIA_ACCESS_KEY\"", @ip=\""10.0.0.148\"">\n>> tivo.shows.first.to_s\n=> \""The Daily Show With Jon Stewart - Senator Joe Biden (D-Del.).\"""""
https://github.com/ruby-git/ruby-git,"""# Git Library for Ruby\n\nLibrary for using Git in Ruby.\n\n## Homepage\n\nGit public hosting of the project source code is at:\n\nhttp://github.com/ruby-git/ruby-git\n\n## Install\n\nYou can install Ruby/Git like this:\n\n    $ sudo gem install git\n\n## Code Status\n\n* [![Build Status](https://travis-ci.org/ruby-git/ruby-git.svg?branch=master)](https://travis-ci.org/ruby-git/ruby-git)\n* [![Code Climate](https://codeclimate.com/github/ruby-git/ruby-git.png)](https://codeclimate.com/github/ruby-git/ruby-git)\n* [![Gem Version](https://badge.fury.io/rb/git.png)](http://badge.fury.io/rb/git)\n\n## Major Objects\n\n**Git::Base** - The object returned from a `Git.open` or `Git.clone`. Most major actions are called from this object.\n\n**Git::Object** - The base object for your tree, blob and commit objects, returned from `@git.gtree` or `@git.object` calls.  the `Git::AbstractObject` will have most of the calls in common for all those objects.\n\n**Git::Diff** - returns from a `@git.diff` command.  It is an Enumerable that returns `Git::Diff:DiffFile` objects from which you can get per file patches and insertion/deletion statistics.  You can also get total statistics from the Git::Diff object directly.\n\n**Git::Status** - returns from a `@git.status` command.  It is an Enumerable that returns\n`Git:Status::StatusFile` objects for each object in git, which includes files in the working\ndirectory, in the index and in the repository.  Similar to running 'git status' on the command line to determine untracked and changed files.\n\n**Git::Branches** - Enumerable object that holds `Git::Branch objects`.  You can call .local or .remote on it to filter to just your local or remote branches.\n\n**Git::Remote**- A reference to a remote repository that is tracked by this repository.\n\n**Git::Log** - An Enumerable object that references all the `Git::Object::Commit` objects that encompass your log query, which can be constructed through methods on the `Git::Log object`,\nlike:\n\n `@git.log(20).object(\""some_file\"").since(\""2 weeks ago\"").between('v2.6', 'v2.7').each { |commit| [block] }`\n\n## Examples\n\nHere are a bunch of examples of how to use the Ruby/Git package.\n\nRuby < 1.9 will require rubygems to be loaded.\n\n```ruby\n    require 'rubygems'\n```\n\nRequire the 'git' gem.\n```ruby\n    require 'git'\n```\n\nGit env config\n\n```ruby\n  Git.configure do |config|\n    # If you want to use a custom git binary\n    config.binary_path = '/git/bin/path'\n\n    # If you need to use a custom SSH script\n    config.git_ssh = '/path/to/ssh/script'\n  end\n\n```\n\n\nHere are the operations that need read permission only.\n\n```ruby\n    g = Git.open(working_dir, :log => Logger.new(STDOUT))\n\n    g.index\n    g.index.readable?\n    g.index.writable?\n    g.repo\n    g.dir\n\n    g.log   # returns array of Git::Commit objects\n    g.log.since('2 weeks ago')\n    g.log.between('v2.5', 'v2.6')\n    g.log.each {|l| puts l.sha }\n    g.gblob('v2.5:Makefile').log.since('2 weeks ago')\n\n    g.object('HEAD^').to_s  # git show / git rev-parse\n    g.object('HEAD^').contents\n    g.object('v2.5:Makefile').size\n    g.object('v2.5:Makefile').sha\n\n    g.gtree(treeish)\n    g.gblob(treeish)\n    g.gcommit(treeish)\n\n\n    commit = g.gcommit('1cc8667014381')\n\n    commit.gtree\n    commit.parent.sha\n    commit.parents.size\n    commit.author.name\n    commit.author.email\n    commit.author.date.strftime(\""%m-%d-%y\"")\n    commit.committer.name\n    commit.date.strftime(\""%m-%d-%y\"")\n    commit.message\n\n    tree = g.gtree(\""HEAD^{tree}\"")\n\n    tree.blobs\n    tree.subtrees\n    tree.children # blobs and subtrees\n\n    g.revparse('v2.5:Makefile')\n\n    g.branches # returns Git::Branch objects\n    g.branches.local\n    g.branches.remote\n    g.branches[:master].gcommit\n    g.branches['origin/master'].gcommit\n\n    g.grep('hello')  # implies HEAD\n    g.blob('v2.5:Makefile').grep('hello')\n    g.tag('v2.5').grep('hello', 'docs/')\n    g.describe()\n    g.describe('0djf2aa')\n    g.describe('HEAD', {:all => true, :tags => true})\n\n    g.diff(commit1, commit2).size\n    g.diff(commit1, commit2).stats\n    g.diff(commit1, commit2).name_status\n    g.gtree('v2.5').diff('v2.6').insertions\n    g.diff('gitsearch1', 'v2.5').path('lib/')\n    g.diff('gitsearch1', @git.gtree('v2.5'))\n    g.diff('gitsearch1', 'v2.5').path('docs/').patch\n    g.gtree('v2.5').diff('v2.6').patch\n\n    g.gtree('v2.5').diff('v2.6').each do |file_diff|\n       puts file_diff.path\n       puts file_diff.patch\n       puts file_diff.blob(:src).contents\n    end\n\n    g.config('user.name')  # returns 'Scott Chacon'\n    g.config # returns whole config hash\n\n    g.tags # returns array of Git::Tag objects\n\n    g.show()\n    g.show('HEAD')\n    g.show('v2.8', 'README.md')\n\n    Git.ls_remote('https://github.com/ruby-git/ruby-git.git') # returns a hash containing the available references of the repo.\n    Git.ls_remote('/path/to/local/repo')\n    Git.ls_remote() # same as Git.ls_remote('.')\n\n```\n\nAnd here are the operations that will need to write to your git repository.\n\n```ruby\n      g = Git.init\n       Git.init('project')\n       Git.init('/home/schacon/proj',\n        { :repository => '/opt/git/proj.git',\n           :index => '/tmp/index'} )\n\n     g = Git.clone(URI, NAME, :path => '/tmp/checkout')\n     g.config('user.name', 'Scott Chacon')\n     g.config('user.email', 'email@email.com')\n\n     g.add                                   # git add -- \"".\""\n     g.add(:all=>true)                       # git add --all -- \"".\""\n     g.add('file_path')                      # git add -- \""file_path\""\n     g.add(['file_path_1', 'file_path_2'])   # git add -- \""file_path_1\"" \""file_path_2\""\n\n     g.remove()\t\t\t\t\t\t\t\t\t# git rm -f -- \"".\""\n     g.remove('file.txt')\t\t\t\t\t\t# git rm -f -- \""file.txt\""\n     g.remove(['file.txt', 'file2.txt'])\t\t# git rm -f -- \""file.txt\"" \""file2.txt\""\n     g.remove('file.txt', :recursive => true) \t# git rm -f -r -- \""file.txt\""\n     g.remove('file.txt', :cached => true)\t\t# git rm -f --cached -- \""file.txt\""\n\n     g.commit('message')\n     g.commit_all('message')\n\n     g = Git.clone(repo, 'myrepo')\n     g.chdir do\n      new_file('test-file', 'blahblahblah')\n      g.status.changed.each do |file|\n       puts file.blob(:index).contents\n      end\n     end\n\n     g.reset # defaults to HEAD\n     g.reset_hard(Git::Commit)\n\n     g.branch('new_branch') # creates new or fetches existing\n     g.branch('new_branch').checkout\n     g.branch('new_branch').delete\n     g.branch('existing_branch').checkout\n     g.branch('master').contains?('existing_branch')\n\n     g.checkout('new_branch')\n     g.checkout(g.branch('new_branch'))\n\n     g.branch(name).merge(branch2)\n     g.branch(branch2).merge  # merges HEAD with branch2\n\n     g.branch(name).in_branch(message) { # add files }  # auto-commits\n     g.merge('new_branch')\n     g.merge('origin/remote_branch')\n     g.merge(g.branch('master'))\n     g.merge([branch1, branch2])\n\n     r = g.add_remote(name, uri)  # Git::Remote\n     r = g.add_remote(name, Git::Base)  # Git::Remote\n\n     g.remotes  # array of Git::Remotes\n     g.remote(name).fetch\n     g.remote(name).remove\n     g.remote(name).merge\n     g.remote(name).merge(branch)\n\n     g.fetch\n     g.fetch(g.remotes.first)\n     g.fetch('origin', {:ref => 'some/ref/head'} )\n\n     g.pull\n     g.pull(Git::Repo, Git::Branch) # fetch and a merge\n\n     g.add_tag('tag_name') # returns Git::Tag\n     g.add_tag('tag_name', 'object_reference')\n     g.add_tag('tag_name', 'object_reference', {:options => 'here'})\n     g.add_tag('tag_name', {:options => 'here'})\n\n     Options:\n       :a | :annotate\n       :d\n       :f\n       :m | :message\n       :s\n\n     g.delete_tag('tag_name')\n\n     g.repack\n\n     g.push\n     g.push(g.remote('name'))\n```\n\nSome examples of more low-level index and tree operations\n\n```ruby\n     g.with_temp_index do\n\n       g.read_tree(tree3) # calls self.index.read_tree\n       g.read_tree(tree1, :prefix => 'hi/')\n\n       c = g.commit_tree('message')\n       # or #\n       t = g.write_tree\n       c = g.commit_tree(t, :message => 'message', :parents => [sha1, sha2])\n\n       g.branch('branch_name').update_ref(c)\n       g.update_ref(branch, c)\n\n       g.with_temp_working do # new blank working directory\n         g.checkout\n         g.checkout(another_index)\n         g.commit # commits to temp_index\n       end\n     end\n\n     g.set_index('/path/to/index')\n\n\n     g.with_index(path) do\n       # calls set_index, then switches back after\n     end\n\n     g.with_working(dir) do\n     # calls set_working, then switches back after\n     end\n\n     g.with_temp_working(dir) do\n       g.checkout_index(:prefix => dir, :path_limiter => path)\n       # do file work\n       g.commit # commits to index\n     end\n```\n\n## License\n\nlicensed under MIT License Copyright (c) 2008  Scott Chacon. See LICENSE for further details.\n"""
https://github.com/jnewland/gsa-feeds,"""GSA Feeds\n=========\n\nA Ruby wrapper for the Google Search Appliance Feeds Protocol. This protocol exists to push content and metadata to the search appliance for processing, indexing, and serving as search results. Feeds are available in GSA software versions 4.2 and later."""
https://github.com/ezmobius/bmhsearch,"""bmhsearch\n    by Zed Shaw\n\n== DESCRIPTION:\n  \nBMHSearch is a fast mime carver.\n\n== FEATURES/PROBLEMS:\n  \n* FIX (list of features or problems)\n\n== SYNOPSYS:\n\n  FIX (code sample of usage)\n\n== REQUIREMENTS:\n\n* FIX (list of requirements)\n\u00df\n== INSTALL:\n\n* FIX (sudo gem install, anything else)\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) 2007 FIX\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"""
https://github.com/defunkt/mofo,"""  mofo.          \n- a ruby microformat parser -\n                     engine\n                     dsl\n                     helper\n                     toy\n\n= First, a word\n\nHpricot, while still great, seems destined for deprecation.\n\nIf you're into Nokogiri try Prism for your Microformatic needs:\n\nhttp://github.com/mwunsch/prism\n\n= Get Started Immediately\n\n  $ irb -rubygems \n  >> require 'mofo'\n  => true\n\n  >> fireball = HCard.find 'http://flickr.com/people/gruber/'\n  => #<HCard:0x6db898 ... >\n\n  >> fireball.nickname\n  => \""gruber\""\n\n  >> fireball.url\n  => \""http://daringfireball.net/\""\n\n  >> fireball.n.family_name\n  => \""Gruber\""\n\n  >> fireball.title\n  => \""Raconteur\""\n\n  >> fireball.adr.locality\n  => \""Philadelphia\""\n\n  >> fireball.logo\n  => \""http://static.flickr.com/9/buddyicons/44621776@N00.jpg?1117572751\""\n\n= Grab It\n\n  $ git clone git://github.com/defunkt/mofo.git\n  $ open http://github.com/defunkt/mofo\n\n= Microwhozit?\n\n  Microformats are tiny little markup definitions built on top of, usually, \n  HTML or XHTML.  \n\n  You have a blog.  You have recent posts on your blog's index page.  You have\n  an Atom feed.  You have recent posts on your blog's Atom feed.  See where I'm\n  going with this?\n\n  The hAtom microformat (or uformat) can be embedded in your existing HTML by\n  setting CSS classes with semantic meaning inside of your posts.  A class to signify\n  a post is contained within this div, a class to signify the contents of this\n  h3 are the post's title, a class to signify the contents of this span is the\n  blog post's author, etc.\n\n  You can then use a microformat parser (like, say, mofo) to extract this information\n  as you would from an Atom feed.  Hell, you can even convert hAtom to Atom.  It's an\n  insta-feed!  No extra code required!\n\n  You're already doing the work, you see.  Microformats are everywhere.  We just need\n  to set them free.\n\n  Check it:\n\n    <div class=\""post\"">\n      <h3>Megadeth Show Last Night</h3>\n      <span class=\""subtitle\"">Posted by Chris on June 4th</span>\n      <div class=\""content\"">Went to a show last night.  Megadeth.  It was alright.</div>\n    </div>\n\n  Right?  Normal.  Here's the same post marked up with hAtom:\n\n    <div class=\""post hentry\"">\n      <h3 class=\""entry-title\"">Megadeth Show Last Night</h3>\n      <span class=\""subtitle\"">Posted by <span class=\""author vcard fn\"">Chris</span> on \n      <abbr class=\""updated\"" title=\""2006-06-04T10:32:10Z\"">June 4th</abbr></span>\n      <div class=\""content entry-content\"">Went to a show last night.  Megadeth.  It was alright.</div>\n    </div>\n\n  All I did was add the hentry, entry-title, and entry-content classes to existing containers.  Then I\n  went ahead and wrapped the date in an <abbr> tag giving it a title in the microformat-standard way.  Finally\n  I put a div around Chris signifying it as the author field of the hEntry and making it a valid hCard by\n  including the vcard and fn classes.  It's really not all that hard.  Did I mess it up?  Maybe, but I'm sure I got\n  close.  And I didn't even use a reference.  Practice.\n\n  How'd we parse this, tho?\n\n    $ irb -rubygems\n    >> require 'mofo'\n    => true\n\n    >> post = HEntry.find 'http://milesofstyle.org/posts/351-megadeth-show-last-night.html'\n    => #<HEntry:0x6db898 ... > \n\n    >> post.entry_title\n    => \""Megadeth Show Last Night\""\n\n    >> post.properties\n    => [\""entry_content\"", \""updated\"", \""author\"", \""entry_title\""]\n\n    >> post.updated\n    => Sun Jun 04 10:32:10 UTC 2006\n\n    >> post.updated.class\n    => Time\n\n    >> post.author\n    => #<HCard:0x6e7b98 @properties=[\""fn\""], @fn=\""Chris\"">\n\n    >> post.author.fn\n    => \""Chris\""\n\n    >> post.entry_content\n    => \""Went to a show last night.  Megadeth.  It was alright.\""\n\n  That's, like, stupid easy.  If HEntry.find gets back more than one hEntry, you'll get an array.\n\n= Mofo#find\n\n  Everything revolves around the #find method.  Sound familiar?  Yeah.\n\n    >> Microformat.find \""http://valid-url.com\""\n    >> Microformat.find \""/path/to/existing/file\""\n    >> Microformat.find :text => \""microformat text\""\n   \n  Also, #find can be told explicitly to find all (returning an array on failure) or only find\n  the first (returning nil on failure).\n\n    >> Microformat.find :all => \""/existing/file\""\n    => [ array of microformat objects ] \n\n    >> Microformat.find :first => \""/existing/file\""\n    => microformat object\n\n    >> Microformat.find \""/existing/file\""\n    => either an array of objects or just one object\n\n  :all and :first go outside of :text.\n\n    >> Microformat.find :all => { :text => 'mfin text' } \n\n  That's it.  Some microformats take specific options.\n\n= Microformats\n\n  Here are the currently implemented microformats, along with a site you\n  can use them on today.  We want more, better, faster, stat.\n\n  formats:\n  - hCard     [ flickr profiles    ]\n  - hCalendar [ upcoming.org       ]\n  - hReview   [ cork'd reviews     ] \n  - hEntry    [ err the blog posts ]\n  - hResume   [ linkedin.com       ]\n  - xoxo      [ chowhound.com      ]\n  - geo       [ upcoming.org       ]\n  - adr       [ upcoming.org       ]\n  - xfn       [ linkedin.com       ]\n\n  patterns:\n  - rel-tag \n  - rel-bookmark\n  - include-pattern\n\n= Ruby on Rails\n\nmofo doubles as a Rails plugin.  Just drop it into vendor/plugins and you are good to go, with all the \navailable microformat parsers loaded into your application.\n\nmofo classes are YAML and Marshal approved.  This means you can cache them with DRb or memcached, or store\nthem in a session.\n\n= More Info\n\n  >> http://microformats.org/ \n  => \""The homepage, check\""\n  >> http://microformats.org/wiki/\n  => \""The wiki, check\""\n  >> http://blog.labnotes.org/category/microformats/\n  => \""Assaf Arkin knows his MFin' stuff\""\n  >> http://allinthehead.com/\n  => \""Drew McClellan, Microformat wizard\""\n  >> http://mofo.rubyforge.org/\n  => \""mofo HQ\""\n\n= Other Parsers\n\n  >> Scrapi\n  => http://rubyforge.org/projects/scrapi/\n  >> uformats\n  => http://rubyforge.org/projects/uformats\n\n= Contributors\n\n  >> Steve Ivy\n  >> Olle Jonsson\n  >> Christian Carter\n  >> Grant Rodgers\n  >> Denis Defreyne\n  >> Andrew Turner\n  >> Mark Murphy\n\n= Author\n\n  >> Chris Wanstrath\n  => chris[at]ozmm[dot]org\n"""
https://github.com/mojombo/god,"""God: The Ruby Framework for Process Management\n==============================================\n\n* Authors: Tom Preston-Werner, Kevin Clark, Eric Lindvall\n* Website: http://godrb.com\n\nDescription\n-----------\n\nGod is an easy to configure, easy to extend monitoring framework written in\nRuby.\n\nKeeping your server processes and tasks running should be a simple part of\nyour deployment process. God aims to be the simplest, most powerful monitoring\napplication available.\n\nDocumentation\n-------------\n\nSee in-repo documentation at `REPO_ROOT/doc`.\nSee online documentation at http://godrb.com.\n\nCommunity\n---------\n\nSign up for the god mailing list at http://groups.google.com/group/god-rb\n\nLicense\n-------\n\nSee LICENSE file.\n"""
https://github.com/mmower/simply_versioned,"""SimplyVersioned\n===============\n\nRelease:\t1.0.0\nDate:\t\t\t28-01-2008\nAuthor:\t\tMatt Mower <self@mattmower.com>\n\nSimplyVersioned is a simple, non-invasive, approach to versioning ActiveRecord models.\n\nSimplyVersioned does not require any structural change to the models to be versioned and requires only one versions table to be created (a migration generator is supplied with the plugin) for the application, regardless of the number of models being versioned.\n\nThe plugin introduces a 'Version' ActiveRecord model (that reflects changes to model attributes) to which versioned models are polymorphically associated. Version records store the model information as a YAML hash.\n\t\nSimplyVersioned meets a simple need for model versioning. If your needs are more complex maybe try Rick Olsen's acts_as_versioned (http://svn.techno-weenie.net/projects/plugins/acts_as_versioned/).\n\t\nSimplyVersioned is (so far) actively tested with Rails 2.0.2 and Ruby 1.8.6\n\t\nUsage\n=====\n\n1. Install the plugin\n\n  ./script/plugin install http://rubymatt.rubyforge.org/svn/simply_versioned\n\n2. Generate the migration\n\n  ./script/generate simply_versioned_migration\n\n\tNote that the migration defaults to storing the version info in a TEXT field. On MySQL this will default to a\n\tlimit of 64K. If you are versioning particularly large models you will want to modify the migration to include\n\ta :limit => n condition to promote the yaml column to a MEDIUMTEXT or (god forbid) a LONGTEXT.\n\n3. Create the versions table\n\n  rake db:migrate\n\n4. Annotate the models you want to version specifying how many versions to keep\n\n\tclass Thing < ActiveRecord::Base\n\t  simply_versioned :keep => 10\n\tend\n\t\n\tIf you do not specify a limit then old versions are never automatically deleted. You can\n\tmanually delete them like this:\n\t\n\tthing.versions.purge( 10 )\n\t\n\twhich would delete all the but the last ten versions.\n\t\n\tIf you want fine-grained control over when versions are created you can use:\n\t\n\tclass Thing < ActiveRecord::Base\n\t\tsimply_versioned :automatic => false\n\tend\n\t\n\tand new versions will no longer be created by default. You will then need to use\n\tthe with_versioning method to create a version.\n\t\n\tLastly you can control which columns will be versioned by specifying an exclude parameter.\n\t\n\tclass Thing < ActiveRecord::Base\n\t\tsimply_versioned :exclude => :awkward_column\n\tend\n\t\t\n\tor\t\n\t\n\tclass Thing < ActiveRecord::Base\n\t\tsimply_versioned :exclude => [:first_awkward_column,:second_awkward_column,...]\n\tend\n\t\n\tThis may be helpful if you run into conflicts with other plugins which try to manage columns.\n\n5. Create versions\n\n\tthing = Thing.create!( :foo => bar ) # creates v1\n\tthing.foo = baz\n\tthing.save! # creates v2\n\t\n\tIf you need to control whether a version is created or not, use #with_versioning. For example:\n\t\n\tthing.with_versioning( false ) do |t|\n\t\tt.save!\n\tend\n\t\n\tor, using the \""magic pen\"" (http://dablog.rubypal.com/2007/2/18/the-magic-pens-of-ruby thanks hmj):\n\t\n\tthing.with_versioning( false, &:save! )\n\n6. Find versions\n\n\tthing.versions.each do |version| ... end\n\trender :partial => 'thing_version', :collection => thing.versions\n\tthing.versions.current\n\tthing.versions.first\n\tthing.versions.get( 3 )\n\t\n\tTo find a version number:\n\t\n\tthing.version_number\n\n7. Revert to a previous version\n\n\tthing.revert_to_version( 5 )\n\t\n\tIf a specific reversion needs to avoid overwriting some column values pass\n\tan :except option, e.g.\n\t\n\tthing.revert_to_version( 1, :except => [:name,:age] )\n\t\n\tThe revert_to_version method also takes an existing Version instance, e.g.\n\t\n\tversion = thing.versions.find( ... )\n\tthing.revert_to_version( version )\n\n8. Traverse versions\n\n\tthing.versions.current.previous\n\tthing.versions.first.next\n\n9. Obtain a copy of a previous versioned model\n\n\tthing.versions.first.model # => Instantiated Thing with versioned values\n\t\nThanks to:\n\n\tChris Wanstrath (http://ozmm.org/) for useful feedback and GitHub\n\tJosh Susser (http://blog.hasmanythrough.com/) for useful suggestions and feedback\n\tRick Olson (http://techno-weenie.net/) for all the many plugins whose code i've read\n\t\nCopyright (c) 2007 Matt Mower <self@mattmower.com> and released under the MIT license\n"""
https://github.com/uggedal/mofo,"""  mofo.          \n- a ruby microformat parser -\n                     engine\n                     dsl\n                     helper\n                     toy\n\n= Get Started Immediately\n\n  $ irb -rubygems \n  >> require 'mofo'\n  => true\n\n  >> fireball = HCard.find 'http://flickr.com/people/gruber/'\n  => #<HCard:0x6db898 ... >\n\n  >> fireball.nickname\n  => \""gruber\""\n\n  >> fireball.url\n  => \""http://daringfireball.net/\""\n\n  >> fireball.n.family_name\n  => \""Gruber\""\n\n  >> fireball.title\n  => \""Raconteur\""\n\n  >> fireball.adr.locality\n  => \""Philadelphia\""\n\n  >> fireball.logo\n  => \""http://static.flickr.com/9/buddyicons/44621776@N00.jpg?1117572751\""\n\n= Grab It\n\n  $ git clone git://github.com/defunkt/mofo.git\n  $ open http://github.com/defunkt/mofo\n\n= Microwhozit?\n\n  Microformats are tiny little markup definitions built on top of, usually, \n  HTML or XHTML.  \n\n  You have a blog.  You have recent posts on your blog's index page.  You have\n  an Atom feed.  You have recent posts on your blog's Atom feed.  See where I'm\n  going with this?\n\n  The hAtom microformat (or uformat) can be embedded in your existing HTML by\n  setting CSS classes with semantic meaning inside of your posts.  A class to signify\n  a post is contained within this div, a class to signify the contents of this\n  h3 are the post's title, a class to signify the contents of this span is the\n  blog post's author, etc.\n\n  You can then use a microformat parser (like, say, mofo) to extract this information\n  as you would from an Atom feed.  Hell, you can even convert hAtom to Atom.  It's an\n  insta-feed!  No extra code required!\n\n  You're already doing the work, you see.  Microformats are everywhere.  We just need\n  to set them free.\n\n  Check it:\n\n    <div class=\""post\"">\n      <h3>Megadeth Show Last Night</h3>\n      <span class=\""subtitle\"">Posted by Chris on June 4th</span>\n      <div class=\""content\"">Went to a show last night.  Megadeth.  It was alright.</div>\n    </div>\n\n  Right?  Normal.  Here's the same post marked up with hAtom:\n\n    <div class=\""post hentry\"">\n      <h3 class=\""entry-title\"">Megadeth Show Last Night</h3>\n      <span class=\""subtitle\"">Posted by <span class=\""author vcard fn\"">Chris</span> on \n      <abbr class=\""updated\"" title=\""2006-06-04T10:32:10Z\"">June 4th</abbr></span>\n      <div class=\""content entry-content\"">Went to a show last night.  Megadeth.  It was alright.</div>\n    </div>\n\n  All I did was add the hentry, entry-title, and entry-content classes to existing containers.  Then I\n  went ahead and wrapped the date in an <abbr> tag giving it a title in the microformat-standard way.  Finally\n  I put a div around Chris signifying it as the author field of the hEntry and making it a valid hCard by\n  including the vcard and fn classes.  It's really not all that hard.  Did I mess it up?  Maybe, but I'm sure I got\n  close.  And I didn't even use a reference.  Practice.\n\n  How'd we parse this, tho?\n\n    $ irb -rubygems\n    >> require 'mofo'\n    => true\n\n    >> post = HEntry.find 'http://milesofstyle.org/posts/351-megadeth-show-last-night.html'\n    => #<HEntry:0x6db898 ... > \n\n    >> post.entry_title\n    => \""Megadeth Show Last Night\""\n\n    >> post.properties\n    => [\""entry_content\"", \""updated\"", \""author\"", \""entry_title\""]\n\n    >> post.updated\n    => Sun Jun 04 10:32:10 UTC 2006\n\n    >> post.updated.class\n    => Time\n\n    >> post.author\n    => #<HCard:0x6e7b98 @properties=[\""fn\""], @fn=\""Chris\"">\n\n    >> post.author.fn\n    => \""Chris\""\n\n    >> post.entry_content\n    => \""Went to a show last night.  Megadeth.  It was alright.\""\n\n  That's, like, stupid easy.  If HEntry.find gets back more than one hEntry, you'll get an array.\n\n= Mofo#find\n\n  Everything revolves around the #find method.  Sound familiar?  Yeah.\n\n    >> Microformat.find \""http://valid-url.com\""\n    >> Microformat.find \""/path/to/existing/file\""\n    >> Microformat.find :text => \""microformat text\""\n   \n  Also, #find can be told explicitly to find all (returning an array on failure) or only find\n  the first (returning nil on failure).\n\n    >> Microformat.find :all => \""/existing/file\""\n    => [ array of microformat objects ] \n\n    >> Microformat.find :first => \""/existing/file\""\n    => microformat object\n\n    >> Microformat.find \""/existing/file\""\n    => either an array of objects or just one object\n\n  :all and :first go outside of :text.\n\n    >> Microformat.find :all => { :text => 'mfin text' } \n\n  That's it.  Some microformats take specific options.\n\n= Microformats\n\n  Here are the currently implemented microformats, along with a site you\n  can use them on today.  We want more, better, faster, stat.\n\n  formats:\n  - hCard     [ flickr profiles    ]\n  - hCalendar [ upcoming.org       ]\n  - hReview   [ cork'd reviews     ] \n  - hEntry    [ err the blog posts ]\n  - hResume   [ linkedin.com       ]\n  - xoxo      [ chowhound.com      ]\n  - geo       [ upcoming.org       ]\n  - adr       [ upcoming.org       ]\n  - xfn       [ linkedin.com       ]\n\n  patterns:\n  - rel-tag \n  - rel-bookmark\n  - include-pattern\n\n= Ruby on Rails\n\nmofo doubles as a Rails plugin.  Just drop it into vendor/plugins and you are good to go, with all the \navailable microformat parsers loaded into your application.\n\nmofo classes are YAML and Marshal approved.  This means you can cache them with DRb or memcached, or store\nthem in a session.\n\n= More Info\n\n  >> http://microformats.org/ \n  => \""The homepage, check\""\n  >> http://microformats.org/wiki/\n  => \""The wiki, check\""\n  >> http://blog.labnotes.org/category/microformats/\n  => \""Assaf Arkin knows his MFin' stuff\""\n  >> http://allinthehead.com/\n  => \""Drew McClellan, Microformat wizard\""\n  >> http://mofo.rubyforge.org/\n  => \""mofo HQ\""\n\n= Other Parsers\n\n  >> Scrapi\n  => http://rubyforge.org/projects/scrapi/\n  >> uformats\n  => http://rubyforge.org/projects/uformats\n\n= Contributors\n\n  >> Steve Ivy\n  >> Olle Jonsson\n  >> Christian Carter\n  >> Grant Rodgers\n  >> Denis Defreyne\n  >> Andrew Turner\n  >> Mark Murphy\n\n= Author\n\n  >> Chris Wanstrath\n  => chris[at]ozmm[dot]org\n"""
https://github.com/queso/signal-wiki,"""=====  Signal Wiki\n\nSignal Wiki is an easy to use wiki that was built with standards in mind.  It uses some of the more common rails plugins and practises to make sure it is easy to integrate this wiki into your suite of site offerings.  We wanted something we could tie into a shared user table so multiple apps (beast was the app at the time) could have the same login, so we used restful auth.  We had several clients asking for this, so we decided it must be a big need.  With our clients agreement, we extracted the basic wiki parts and cleaned it up and the result is this code.  \n\nEnjoy :)\n\n=====  Installation instructions\n\n#FIXME: Detail these instructions more\n1. Download app\n2. Copy config/database.yml.example to config/database.yml\n3. Run \""rake db:migrate\"" from the root of the app\n4. Start your rails app (using mongrel or fcgi, or whatever crazy method you use)\n5. Input your wiki stuffs\n\n=====  Required Gems\n\n* json\n* ruby-openid\n* ruby-yadis\n* RedCloth\n\n\n"""
https://github.com/jnewland/xhtmlize,"""xhtmlize\n==========\n\nRails helper to XHTML-ize chunks of user submitted HTML. For the standardista in all of us.\n\n>> html = \""<div><p>foo</p><a href='http://foo.com'>foo\""\n=> \""<div><p>foo</p><a href='http://foo.com'>foo\""\n>> xhtmlize(html)\n=> \""<div><p>foo</p><a href=\\\""http://foo.com\\\"">foo</a></div>\""\n\nAlso comes with an ActiveRecord class method to automatically xhtmlize attributes in an after_save callback.\n\nclass Comment < ActiveRecord::Base\n  xhtmlize :title, :content\nend"""
https://github.com/defunkt/zippy,"""Zippy!\n------\n\nhttp://github.com/defunkt/zippy\n\nBy Chris \""Zippy\"" Wanstrath\n"""
https://github.com/jamesgolick/markaby,"""= Markaby (Markup as Ruby)\n\nMarkaby is a very short bit of code for writing HTML pages in pure Ruby.\nIt is an alternative to ERb which weaves the two languages together.\nAlso a replacement for templating languages which use primitive languages\nthat blend with HTML.\n\n== Using Markaby as a Rails plugin\n\nWrite Rails templates in pure Ruby.  Example layout:\n\n  html do\n    head do\n      title 'Products: ' + action_name\n      stylesheet_link_tag 'scaffold'\n    end\n  \n    body do\n      p flash[:notice], :style => \""color: green\""\n  \n      self << content_for_layout\n    end\n  end\n\n== Using Markaby as a Ruby class\n\nMarkaby is flaming easy to call from your Ruby classes.\n\n  require 'markaby'\n\n  mab = Markaby::Builder.new\n  mab.html do\n    head { title \""Boats.com\"" }\n    body do\n      h1 \""Boats.com has great deals\""\n      ul do\n        li \""$49 for a canoe\""\n        li \""$39 for a raft\""\n        li \""$29 for a huge boot that floats and can fit 5 people\""\n      end\n    end\n  end\n  puts mab.to_s\n\nMarkaby::Builder.new does take two arguments for passing in variables and\na helper object.  You can also affix the block right on to the class.\n\nSee Markaby::Builder for all of that.\n\n= A Note About <tt>instance_eval</tt>\n\nThe Markaby::Builder class is different from the normal Builder class,\nsince it uses <tt>instance_eval</tt> when running blocks.  This cleans\nup the appearance of the Markaby code you write.  If <tt>instance_eval</tt>\nwas not used, the code would look like this:\n\n  mab = Markaby::Builder.new\n  mab.html do\n    mab.head { mab.title \""Boats.com\"" }\n    mab.body do\n      mab.h1 \""Boats.com has great deals\""\n    end\n  end\n  puts mab.to_s\n\nSo, the advantage is the cleanliness of your code.  The disadvantage is that\nthe block will run inside the Markaby::Builder object's scope.  This means\nthat inside these blocks, <tt>self</tt> will be your Markaby::Builder object.\nWhen you use instance variables in these blocks, they will be instance variables\nof the Markaby::Builder object.\n\nThis doesn't affect Rails users, but when used in regular Ruby code, it can\nbe a bit disorienting.  You are recommended to put your Markaby code in a\nmodule where it won't mix with anything.\n\n= The Six Steps of Markaby\n\nIf you dive right into Markaby, it'll probably make good sense, but you're\nlikely to run into a few kinks.  Why not review these six steps and commit\nthem memory so you can really *know* what you're doing?\n\n== 1. Element Classes\n\nElement classes may be added by hooking methods onto container elements:\n\n  div.entry do\n    h2.entryTitle 'Son of WebPage'\n    div.entrySection %{by Anthony}\n    div.entryContent 'Okay, once again, the idea here is ...'\n  end\n\nWhich results in:\n\n  <div class=\""entry\"">\n    <h2 class=\""entryTitle\"">Son of WebPage</h2>\n    <div class=\""entrySection\"">by Anthony</div>\n    <div class=\""entryContent\"">Okay, once again, the idea here is ...</div>\n  </div>\n\n== 2. Element IDs\n\nIDs may be added by the use of bang methods:\n\n  div.page! {\n    div.content! {\n      h1 \""A Short Short Saintly Dog\""\n    }\n  }\n\nWhich results in:\n\n  <div id=\""page\"">\n    <div id=\""content\"">\n      <h1>A Short Short Saintly Dog</h1>\n    </div>\n  </div>\n\n== 3. Validate Your XHTML 1.0 Output \n\nIf you'd like Markaby to help you assemble valid XHTML documents,\nyou can use the <tt>xhtml_transitional</tt> or <tt>xhtml_strict</tt>\nmethods in place of the normal <tt>html</tt> tag.\n\n  xhtml_strict do\n    head { ... }\n    body { ... }\n  end\n\nThis will add the XML instruction and the doctype tag to your document.\nAlso, a character set meta tag will be placed inside your <tt>head</tt>\ntag.\n\nNow, since Markaby knows which doctype you're using, it checks a big\nlist of valid tags and attributes before printing anything.\n\n  >> div :styl => \""padding: 10px\"" do\n  >>   img :src => \""samorost.jpg\""\n  >> end\n  InvalidHtmlError: no such attribute `styl'\n\nMarkaby will also make sure you don't use the same element ID twice!\n\n== 4. Escape or No Escape?\n\nMarkaby uses a simple convention for escaping stuff: if a string\nis an argument, it gets escaped.  If the string is in a block, it\ndoesn't.\n\nThis is handy if you're using something like RedCloth or\nRDoc inside an element.  Pass the string back through the block\nand it'll skip out of escaping.\n\n  div.comment { RedCloth.new(str).to_html }\n\nBut, if we have some raw text that needs escaping, pass it in\nas an argument:\n\n  div.comment raw_str\n\nOne caveat: if you have other tags inside a block, the string\npassed back will be ignored.\n\n  div.comment {\n    div.author \""_why\""\n    div.says \""Torpedoooooes!\""\n    \""<div>Silence.</div>\""\n  }\n\nThe final div above won't appear in the output.  You can't mix\ntag modes like that, friend.\n\n== 5. Auto-stringification\n\nIf you end up using any of your Markaby \""tags\"" as a string, the\ntag won't be output.  It'll be up to you to add the new string\nback into the HTML output.\n\nThis means if you call <tt>to_s</tt>, you'll get a string back.\n\n  div.title { \""Rock Bottom\"" + span(\"" by Robert Wyatt\"").to_s }\n\nBut, when you're adding strings in Ruby, <tt>to_s</tt> happens automatically.\n\n  div.title { \""Rock Bottom\"" + span(\"" by Robert Wyatt\"") }\n\nInterpolation works fine.\n\n  div.title { \""Rock Bottom #{span(\"" by Robert Wyatt\"")}\"" }\n\nAnd any other operation you might perform on a string.\n\n  div.menu! \\\n    ['5.gets', 'bits', 'cult', 'inspect', '-h'].map do |category|\n      link_to category\n    end.\n    join( \"" | \"" )\n\n== 6. The <tt>tag!</tt> Method\n\nIf you need to force a tag at any time, call <tt>tag!</tt> with the\ntag name followed by the possible arguments and block.  The CssProxy\nwon't work with this technique.\n\n  tag! :select, :id => \""country_list\"" do\n    countries.each do |country|\n      tag! :option, country\n    end\n  end\n\n= A Note About Rails Helpers\n\nWhen used in Rails templates, the Rails helper object is passed into \nMarkaby::Builder.  When you call helper methods inside Markaby, the output\nfrom those methods will be output to the stream.  This is incredibly\nhandy, since most Rails helpers output HTML tags.\n\n  head do\n    javascript_include_tag 'prototype'\n    autodiscovery_link_tag\n  end\n\nHowever, some methods are designed to give back a String which you can use\nelsewhere.  That's okay!  Every method returns a Fragment object, which can\nbe used as a string.\n\n  p { \""Total is: #{number_to_human_size @file_bytes}\"" }\n\nAlso see the Quick Tour above, specifically the stuff about auto-stringification.\n\nIf for any reason you have trouble with fragments, you can just\ncall the <tt>@helpers</tt> object with the method and you'll get\nthe String back and nothing will be output.\n\n  p { \""Total is: #{@helpers.number_to_human_size @file_bytes}\"" }\n\nConversely, you may call instance variables from your controller by using\na method and its value will be returned, nothing will be output.\n\n  # Inside imaginary ProductController\n  def list\n    @products = Product.find :all\n  end\n\n  # Inside app/views/product/list.mab\n  products.each do |product|\n    p product.title\n  end\n\n= Credits\n\nMarkaby is a work of immense hope by Tim Fletcher and why the lucky stiff.\nThankyou for giving it a whirl.\n\nMarkaby is inspired by the HTML library within cgi.rb.  Hopefully it will\nturn around and take some cues.\n\n"""
https://github.com/wycats/merb-more,"""merb-core and merb-more have been merged into http://github.com/wycats/merb"""
https://github.com/abhay/gchart,"""= GChart\n\n== DESCRIPTION\n  \nGChart exposes the Google Chart API (http://code.google.com/apis/chart) via\na friendly Ruby interface. It can generate the URL for a given chart\n(for webpage use), or download the generated PNG (for offline use).\n\n== PROBLEMS/TODO\n\n* Add support fills (area or background), grid lines, shape markers, range markers \n* Support shorthand colors and color names\n* Make venn data specification friendlier\n\nThere are lots of missing features. Until they're implemented, you can directly specify\nquery parameters using the :extras key, e.g.,\n\n  # provides a legend for each data set\n  g = GChart.line(:data => [[1, 2], [3, 4]], :extras => { \""chdl\"" => \""First|Second\""})\n\n== SYNOPSIS\n\n  # line chart\n  g = GChart.line(:data => [0, 10, 100])\n  \n  # bar chart\n  g = GChart.bar(:data => [100, 1000, 10000])\n  \n  # pie chart (pie3d for a fancier look)\n  g = GChart.pie(:data => [33, 33, 34])\n  \n  # venn diagram (asize, bsize, csize, ab%, bc%, ca%, abc%)\n  g = GChart.venn(:data => [100, 80, 60, 30, 30, 30, 10])\n  \n  # scatter plot (x coords, y coords [, sizes])\n  g = GChart.scatter(:data => [[1, 2, 3, 4, 5], [5, 4, 3, 2, 1], [1, 2, 3, 4, 5]])\n\n  # map chart\n  g = GChart.map(:area => 'usa', :data => {'NY'=>1,'VA'=>3,'CA'=>2})\n  \n  # meter\n  g = GChart.meter(:data => 70, :label => \""70%\"")\n  \n  # chart title\n  g = GChart.line(:title => \""Awesomeness over Time\"", :data => [0, 10, 100])\n\n  # data set legend\n  g = GChart.line(:data => [[1, 2], [3, 4]], :legend => [\""Monkeys\"", \""Ferrets\""])\n\n  # data set colors\n  g = GChart.line(:data => [[0, 10, 100], [100, 10, 0]], :colors => [\""ff0000\"", \""0000ff\""])\n  \n  g.to_url            # generate the chart's URL, or\n  g.fetch             # get the bytes, or\n  g.write(\""foo.png\"")  # write to a file (defaults to \""chart.png\"")\n  g.write(stream)     # write to anything that quacks like IO\n\n== LICENSE\n\n(The MIT License)\n\nCopyright 2007-2008 John Barnette (jbarnette@rubyforge.org)\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"""
https://github.com/defunkt/cache_fu,"""== cache_fu\n\nA rewrite of acts_as_cached.\n\n== Changes from acts_as_cached 1\n\n- You can no longer set a 'ttl' method on a class.  Instead,\n  pass :ttl to acts_as_cached:\n    >> acts_as_cached :ttl => 15.minutes\n\n- The is_cached? method is aliased as cached?\n\n- set_cache on an instance can take a ttl\n    >> @story.set_cache(15.days)\n\n\nChris Wanstrath [ chris[at]ozmm[dot]org ]\n"""
https://github.com/wayneeseguin/merb-core,"""merb-core is a new branch of Merb (also referred to as merb-next or the 0.9 series) which aims to provide a stable, stripped down API for a future Merb 1.0 release.\n\nThis branch is based off the 0.5 release series but with significant rewrites.\n\nGoals of this release:\n\n  * Stabilize the @public interface methods to provide for a more consistent application development experience.\n  * Remove features until nothing except a central application API is left\n  * Improve comments on methods using a standard documentation methodology as described in DOCUMENTATION_STANDARDS\n  * Separate the tests into two sections... \""private\"" and \""public\""\n    * Public methods are methods tagged with @public that will be part of the standard, stable Merb API\n    * Private methods are implementation methods that might \n  * Implement a new render API\n  * Build more extensions to regain selected features when needed\n  \nTo familiarize yourself with how a merb-core application might look, reference the /sample directory\n"""
https://github.com/sr/dst,"""dst is a KISS GTD manager for the command line lovers.\n\n== Licence\n\ndst is copyright 2008 Simon Rozet. It is licensed under the MIT licence.\nSee the included LICENSE file for details.\n\n== Install\n\n  sudo gem install ape\n\n== Usage\n\n  % dst @mail john@doe.org about foo\n  1 - `@mail john@doe.org about foo' created.\n  % dst @code :myproj fix bug 123\n  2 - `@code :myproj fix bug 123' created.\n  % dst @code :myproj do foo and bar\n  3 - `@code :myproj do foo and bar' created.\n  % dst\n  1 - @mail john@doe.org about foo\n  2 - @code :myproj fix bug\n  3 - @code :myproj do foo and bar\n  % dst @mail\n  1 - @mail john@doe.org about foo\n  % dst :myproj\n  2 - @code :myproj fix bug\n  3 - @code :myproj do foo and bar\n  % dst ^2\n  Ok, `2 - @code :myproj fix bug' marked as `completed'.\n  % dst\n  1 - @mail john@doe.org about foo\n  3 - @code :myproj do foo and bar\n\n== Contact\n\nSimon Rozet, simon@rozet.name\n"""
https://github.com/anotherjesse/s3,"""S3:// is a \""psuedo protocol\"" for Amazon's S3 service.\n\nInteract with S3 in the same way you do with HTTP, through your URL bar.\n\n* TODO:\n\n** 0.1 release [1/4]\n  - [ ] fix copyright/contributors info\n  - [ ] s3 logo\n  - [ ] help/about section\n  - [X] allow mixed case bucket names s3://\n\n* BUGS/IDEAS:\n\n** s3://twitter_production/profile_background_images/1001042/ -- cannot click the contained thing\n** s3://twitter_production/profile_background_images/ -- css breaks (the background stops) about 2/3 down\n** s3://what/ -- acts weird\n** setup credentials only works once due to blockUI\n\nFUTURE/IDEAS:\n\n** right click -> \""Save As\"" is broken\n** exception/feedback tool\n** setting ACL for a bucket\n** recursive deletion of a folder\n** setting ACL on a key\n** have a progress meter for uploads\n** Tools -> Page Info should have accurate information (s3 specific?)\n** cache the key listing info at the channel layer\n** support logging\n** right click handler for copy url/torrent\n** create time limited url for key\n** support renaming/copying keys\n** deal with undetected mime-types (ask user?)\n** linkify key directories/paths (ala initial designs for awesome bar)\n** a good date format on key list\n** support adding people to buckets via email addresses\n** specify if bucket should be created in US or Europe\n** transfer over SSL?\n** Handle uploading of folders via DND\n** emulate \""create folder\"" system that others use?\n"""
https://github.com/KirinDave/yaws,"""\nThis is yaws, a webserver for dynamic content written in Erlang.\n\n\nTo build and install\n\n\n1. Get and install an erlang system (http://www.erlang.org)\n\n2. ./configure --prefix=/usr/local\n   This will install everything under /usr/local including var files\n   in /usr/local/var/run/yaws and etc files in\n   /usr/local/etc/yaws.*\n\n  A plain ./configure will install executables under \n  /usr/local/bin and libs in /usr/local/lib/yaws etc and\n  var files will end up under /usr/local/etc and /usr/local/var\n\n\nNote: We can also change the target directory for etc and var \n      directories by using:\n\n  --localstatedir=DIR for files that should go in /var\n  --sysconfdir=DIR for files that should go in /etc\n  --disable-pam  If we for some reason do not want pam support\n  --with-extrainclude=DIR Will add DIR to the include path\n                      May be useful if e.g. pam is installed\n\t\t      somewhere where its usually not found\n  --with-defaultcharset=String  Will set the default charset used\n                        in generated page headers. Usually never needed.\n                        \nThis way you can precisely control where you install Yaws (This is\nusefull for computers where you do not have right access to the \nstandard systemdirs). \n\nFor example:\n./configure --prefix=/home/install/yaws --localstatedir=/home/install/yaws/var --sysconfdir=/home/install/etc\n\n\n2b. Note to packagers (rpm, deb ...) All install targets support the \n    DESTDIR variable.\n    Thus, if we do ./configure --prefix=/usr; make\n    we can subsequently do:\n    DESTDIR=/foo/bar make install\n    All yaws files will be installed under DESTDIR, but all \n    code will assume yaws should be installed under /usr\n\n\n3. make\n     This will build the system\n\n  make docs \n     (Optionnal) You can issue this command if you want to build Yaws\n     documentation.\n\n  make local_install\n     and perform something we call a\n     local install. It will create an executable script in the $HOMe/bin \n     directory and a config file in $HOME/yaws.conf. This is for developers\n     only\n\n4.   To test the build, Start as bin/yaws -i \n     This will start a webserver at http://0.0.0.0:8000\n     Terminate through ^C or > init:stop()\n\n5. as root make install\n\n6. as root Start as /usr/local/bin/yaws -i \n   (this starts an interactive system)\n\n7. This will create a webserver at http://${host} and one at https://${host}\n\n8. as root Edit /etc/yaws.conf \n\n9. Create content in /var/yaws\n\n10a. Start as /usr/local/bin/yaws --daemon --heart\n     This will start a daemon (--daemon) which will be autorestarted when/if\n     it crashes or hangs (--heart)\n\n10b. Or start interactive system as /usr/local/bin/yaws -i\n\n"""
https://github.com/benburkert/schemr,"""Github for the win!\n"""
https://github.com/defunkt/exception_logger,"""ExceptionLogger\n===============\n\nThe Exception Logger (forgive the horrible name) logs your Rails exceptions in the database and provides a funky web interface to manage them.\n\nFirst you need to generate the migration:\n\n  ./script/generate exception_migration\n\nNext, you'll need to include the ExceptionLoggable module into ApplicationController.  Once that's done you might want to modify key methods to customize the logging:\n\n  render_404(exception) - Shows the 404 template.\n  \n  render_500(exception) - Shows the 500 template.\n  \n  log_exception(exception) - Logs the actual exception in the database.\n  \n  rescue_action_in_public(exception) - Does not log these exceptions: ActiveRecord::RecordNotFound, ActionController::UnknownController, ActionController::UnknownAction\n\nNow add a new route to your routes.rb:\n\n  map.connect \""logged_exceptions/:action/:id\"", :controller => \""logged_exceptions\""\n\nAfter that, visit /logged_exceptions in your application to manage the exceptions.\n\nOnce you have done that, open up the vendor/plugins/init.rb file and choose your pagination,\nsupported options are will_paginate, paginating_find, and simple mysql based pagination (Uses LIMIT)\nThe current default is none. To use the other options you need to uncomment the $PAGINATION_TYPE line\nand the require for that pagination, you should comment out what you won't use etc...\n\nIt's understandable that you may want to require authentication.  Add this to your config/environments/production.rb:\n\n  # config/environments/production.rb\n  config.after_initialize do\n    require 'application' unless Object.const_defined?(:ApplicationController)\n    LoggedExceptionsController.class_eval do\n      # set the same session key as the app\n      session :session_key => '_beast_session_id'\n      \n      # include any custom auth modules you need\n      include AuthenticationSystem\n      \n      before_filter :login_required\n      \n      # optional, sets the application name for the rss feeds\n      self.application_name = \""Beast\""\n      \n      protected\n        # only allow admins\n        # this obviously depends on how your auth system works\n        def authorized?\n          current_user.is_a?(Admin)\n        end\n        \n        # assume app's login required doesn't use http basic\n        def login_required_with_basic\n          respond_to do |accepts|\n            # alias_method_chain will alias the app's login_required to login_required_without_basic\n            accepts.html { login_required_without_basic }\n            \n            # access_denied_with_basic_auth is defined in LoggedExceptionsController\n            # get_auth_data returns back the user/password pair\n            accepts.rss do\n              access_denied_with_basic_auth unless self.current_user = User.authenticate(*get_auth_data)\n            end\n          end\n        end\n        \n        alias_method_chain :login_required, :basic\n    end\n  end\n\nThe exact code of course depends on the specific needs of your application.\n\nCREDITS\n\nJamis Buck  - original exception_notification plugin\nRick Olson  - model/controller code\nJosh Goebel - design\nJason Knight - Pagination support, built on/inspired by Ryanb's willpaginate support.\n"""
https://github.com/jnewland/gsa-prototype,"""gsa-prototype\n=============\n\nPrototype/Javascript wrapper for the Google Search Appliance Search Protocol. Fancy cross-domain JSON support included.\n\nInstall\n=======\n\ngsa-prototype requires a custom XSL be installed on your Google Search Appliance\n\n* Login to the GSA Admin Console\n* Click 'Serving' on the sidebar\n* Create a new frontend named 'json'\n* Click 'Edit' beside the newly created frontend\n* Click 'Edit underlying XSLT code'\n* Select 'Import Stylesheet'\n* Import the template at xsl/json.xsl\n* Done!\n\nUsage\n=====\n\n>>> var gsa = new Gsa('foo.com')\n>>> gsa.search('jesse newland')\ntrue\n>>> gsa.results.first().get('title')\n\""LexBlog IT Director talks about today&#39;s platform upgrade : Real <b>...</b>\""\n>>> gsa.results.first().get('url')\n\""http://kevin.lexblog.com/2007/07/articles/cool-stuff/lexblog-it-director-talks-about-todays-platform-upgrade/\""\n\nSee inline documentation in gsa.js for more details."""
https://github.com/drnic/ruby-on-rails-tmbundle,"""# TextMate Bundle for Ruby on Rails Development\n\nTo install with Git:\n\n    mkdir -p ~/Library/Application\\ Support/TextMate/Bundles\n    cd ~/Library/Application\\ Support/TextMate/Bundles\n    git clone git://github.com/drnic/ruby-on-rails-tmbundle.git \""Ruby on Rails.tmbundle\""\n    osascript -e 'tell app \""TextMate\"" to reload bundles'\n\n\nTo install without Git:\n\n    mkdir -p ~/Library/Application\\ Support/TextMate/Bundles\n    cd ~/Library/Application\\ Support/TextMate/Bundles\n    wget http://github.com/drnic/ruby-on-rails-tmbundle/tarball/master\n    tar zxf drnic-ruby-on-rails-tmbundle*.tar.gz\n    rm drnic-ruby-on-rails-tmbundle*.tar.gz\n    mv drnic-ruby-on-rails-tmbundle* \""Ruby on Rails.tmbundle\""\n    osascript -e 'tell app \""TextMate\"" to reload bundles'\n\nRuby 1.8.7 or greater is required."""
https://github.com/anotherjesse/taboo,"""* Before release 0.20 [0/8]\n  - [ ] null titles break taboo\n  - [ ] make sure re-clicking the taboo button doesn't overwrite data?\n  - [ ] inplace editor doesn't handle escape key correctly:\n    click to edit, save changes, then click escape again to change\n  - [ ] inplace editor breaks if you change textarea while it is in edit mode\n  - [ ] deleting from grid mode doesn't show the undelete box\n  - [ ] undelete / delete all isn't show correctly on trash.js\n  - [ ] use humanized messages on deletion/undelete?\n  - [ ] use favicons on dropdown menu?\n  - [ ] tooltips on grid.js?\n  - [ ] tooltips on calendar.js\n"""
https://github.com/mojombo/yaws,"""\nThis is yaws, a webserver for dynamic content written in Erlang.\n\n\nTo build and install\n\n\n1. Get and install an erlang system (http://www.erlang.org)\n\n2. ./configure --prefix=/usr/local\n   This will install everything under /usr/local including var files\n   in /usr/local/var/run/yaws and etc files in\n   /usr/local/etc/yaws.*\n\n  A plain ./configure will install executables under \n  /usr/local/bin and libs in /usr/local/lib/yaws etc and\n  var files will end up under /usr/local/etc and /usr/local/var\n\n\nNote: We can also change the target directory for etc and var \n      directories by using:\n\n  --localstatedir=DIR for files that should go in /var\n  --sysconfdir=DIR for files that should go in /etc\n  --disable-pam  If we for some reason do not want pam support\n  --with-extrainclude=DIR Will add DIR to the include path\n                      May be useful if e.g. pam is installed\n\t\t      somewhere where its usually not found\n  --with-defaultcharset=String  Will set the default charset used\n                        in generated page headers. Usually never needed.\n                        \nThis way you can precisely control where you install Yaws (This is\nusefull for computers where you do not have right access to the \nstandard systemdirs). \n\nFor example:\n./configure --prefix=/home/install/yaws --localstatedir=/home/install/yaws/var --sysconfdir=/home/install/etc\n\n\n2b. Note to packagers (rpm, deb ...) All install targets support the \n    DESTDIR variable.\n    Thus, if we do ./configure --prefix=/usr; make\n    we can subsequently do:\n    DESTDIR=/foo/bar make install\n    All yaws files will be installed under DESTDIR, but all \n    code will assume yaws should be installed under /usr\n\n\n3. make\n     This will build the system\n\n  make docs \n     (Optionnal) You can issue this command if you want to build Yaws\n     documentation.\n\n  make local_install\n     and perform something we call a\n     local install. It will create an executable script in the $HOMe/bin \n     directory and a config file in $HOME/yaws.conf. This is for developers\n     only\n\n4.   To test the build, Start as bin/yaws -i \n     This will start a webserver at http://0.0.0.0:8000\n     Terminate through ^C or > init:stop()\n\n5. as root make install\n\n6. as root Start as /usr/local/bin/yaws -i \n   (this starts an interactive system)\n\n7. This will create a webserver at http://${host} and one at https://${host}\n\n8. as root Edit /etc/yaws.conf \n\n9. Create content in /var/yaws\n\n10a. Start as /usr/local/bin/yaws --daemon --heart\n     This will start a daemon (--daemon) which will be autorestarted when/if\n     it crashes or hangs (--heart)\n\n10b. Or start interactive system as /usr/local/bin/yaws -i\n\n"""
https://github.com/wayneeseguin/alogr,"""= About\n\n  AlogR enables a Ruby project to log to the filesystem using non-blocking asynchronous IO with no external dependencies.\n\n= Author\n\n  Wayne E. Seguin (wayneeseguin at gmail dot com)\n\n= How it works\n\n  A global logging buffer gets added to the running application.\n  There is a global buffer which is an array of fifo queues.\n  Worker threads are to pop the first element (which is a string) off of a fifo queue and \""process\"" it. \n  Processing involves writing the string to disk using non-blocking asynchronous IO\n  Threads will be event based where the event is something being placed in the queue, or the queue non-empty.\n  \n= Config\n  \n  You can choose the log that the application uses:\n\n  AlogR.new( \""log/app_log.log\"" )\n  \n  :log specifies the default log\n  \n  AlogR.new( :log => \""log/app_log.log\"" )\n\n  You may also specify any combination of logs corresponding to the log levels in addition to the default log:\n\n  AlogR.new( :log => \""log/app_log.log\"", :error => \""log/error.log\"", :debug => \""log/debug.log\"")\n\n  where log levels are one of: [ emergency, alert, critical, error, warning, notice, info, debug ] \n\n= Application Usage\n\n  First be sure to setup the logger:\n\n  $alogger = AlogR.new(:log)\n\n  To log a string to either the error log or the default log (depending on your configuration):\n\n  \""Jonnie! You borked it!\"".log(:error)\n\nFeature Requests:\n# Be able to specify conditional filters\n\n= Examples\n\n* Example 1\nrequire \""alogr\""\n$logger = AlogR::Logger.new(:log => \""/Users/wayne/projects/ruby/alogr/trunk/log/default.log\"")\n\""a test, should go to the logs 10 times\\n\"".log.log.log.log.log.log.log.log.log.log\n\n* Example 2\nrequire \""alogr\""\n$logger = AlogR.new(\n:log => \""/Users/wayne/projects/ruby/alogr/trunk/log/production.log\"", \n:error => \""/Users/wayne/projects/ruby/alogr/trunk/log/error.log\""\n)\n\n\""(1)this should go to the production log\\n\"".log\n\n\""(2)this should go to error log\\n\"".log(:error)\n\n\""(3)error\\n\"".log :error\n\n\""(4)production\\n\"".log :info\n\n\""(5)error\"".log :error\n\n\n* Example 3\nrequire \""lib/alogr\""\n$logger = AlogR.new(\n:log => \""/Users/wayne/projects/ruby/alogr/trunk/log/production.log\"", \n:error => \""/Users/wayne/projects/ruby/alogr/trunk/log/error.log\"",\n:info => \""/Users/wayne/projects/ruby/alogr/trunk/log/info.log\"",\n:warning => \""/Users/wayne/projects/ruby/alogr/trunk/log/warning.log\""\n)\n\n\""this should go to info log\"".log\n\n\""this should go to error log\"".log(:error)\n\n\""this should go to production log\"".log(:warning)\n\n\""error\"".log :error\n\n\""warning\"".log :warning\n\n\""info\"".log :info\n\n\""yetanother error\"".log :error\n\n* Example 4\nrequire \""lib/alogr\""\n$logger = AlogR.new(\n:log => \""/Users/wayne/projects/ruby/alogr/trunk/log/production.log\"", \n:error => \""/Users/wayne/projects/ruby/alogr/trunk/log/error.log\"",\n:info => \""/Users/wayne/projects/ruby/alogr/trunk/log/info.log\"",\n/paypal => \""/Users/wayne/projects/ruby/alogr/trunk/log/paypal.log\""\n)\n\""this should go to info log\"".log\n\""this should go to error log\"".log(:error)\n\""this should go to production log\"".log(:warning)\n\n* Example 4:\nIf line matches a regexp then sent log/paypal.log as well as production.log\nAlogR.new(:log => \""log/production.log\"", /paypal/ => \""log/paypal.log\"")\n\nGets logged to both\n{ :something => \""value\"", :something_else => \""value\"" }.log\n\n"""
https://github.com/macournoyer/thin,"""# Thin\n\nA small and fast Ruby web server\n\n## Installation\n\n```\ngem install thin\n```\n\nOr add `thin` to your `Gemfile`:\n\n```ruby\ngem 'thin'\n```\n\n## Usage\n\nA +thin+ script offers an easy way to start your Rack application:\n\n```\nthin start\n```\n\nBrowse the `example` directory for sample applications.\n\n## Usage with Rails Action Cable\n\nTo use Thin with Action Cable, add the following to your `Gemfile`:\n\n```ruby\ngem 'faye-websocket'\ngem 'thin' # If not already done\n```\n\nCreate a `config/initializers/thin_action_cable.rb`:\n\n```ruby\nRails.application.config.action_cable.use_faye = true\nFaye::WebSocket.load_adapter 'thin'\n```\n\n### CLI\n\nUse a rackup (config.ru) file and bind to localhost port 8080:\n\n```\nthin -R config.ru -a 127.0.0.1 -p 8080 start\n```\n\nStore the server process ID, log to a file and daemonize:\n\n```\nthin -p 9292 -P tmp/pids/thin.pid -l logs/thin.log -d start\n```\n\nThin is quite flexible in that many options can be specified at the command line (see `thin -h` for more).\n\n### Configuration files\n\nYou can create a configuration file using `thin config -C config/thin.yml`.\n\nYou can then use it with all commands, such as: `thin start -C config/thin.yml`.\n\nHere is an example config file:\n\n```yaml\n--- \nuser: www-data\ngroup: www-data\npid: tmp/pids/thin.pid\ntimeout: 30\nwait: 30\nlog: log/thin.log\nmax_conns: 1024\nrequire: []\nenvironment: production\nmax_persistent_conns: 512\nservers: 1\nthreaded: true\nno-epoll: true\ndaemonize: true\nsocket: tmp/sockets/thin.sock\nchdir: /path/to/your/apps/root\ntag: a-name-to-show-up-in-ps aux\n```\n\n## License\n\nRuby License, http://www.ruby-lang.org/en/LICENSE.txt.\n\n## Credits\n\nThe parser was originally from Mongrel http://mongrel.rubyforge.org by Zed Shaw.\nMongrel is copyright 2007 Zed A. Shaw and contributors. It is licensed under\nthe Ruby license and the GPL2.\n\nThin is copyright Marc-Andre Cournoyer <macournoyer@gmail.com>\n\nGet help at http://groups.google.com/group/thin-ruby/\nReport bugs at https://github.com/macournoyer/thin/issues\nand major security issues directly to me at macournoyer@gmail.com.\n"""
https://github.com/up_the_irons/ram,"""= Welcome to RAM: Ruby Asset Manager\n\nRAM is the premiere open-source, role-based, access-controlled digital asset\nmanager for Ruby on Rails. It was built from the ground up to be a fast, secure\nand efficient platform for the distribution, aggregation and tracking of online\ndigital assets.\n\n\n= Installation\n\nFrom the root directory of this application type:\n\n  rake install\n  \nThis will launch the install wizard, which will take you step by step in setting up RAM.\n\nIf you have problems installing RAM, consult the support section of our \nwebsite, which can be found here: http://www.locusfoc.us/ram/pages/docs.\n\nAdditionally, you can come by our IRC channel at:\n\n  Server  : irc.freenode.net\n  Channel : #ram\n\nWe hope you enjoy RAM!\n\n\n= License\n\nRAM is distributed under the same license as Ruby on Rails. See\nhttp://www.opensource.org/licenses/mit-license.php\n"""
https://github.com/danwrong/low-pro-for-jquery,"""Low Pro JQ\n----------\n\nAuthor: Dan Webb (dan@danwebb.net)\nGIT: github.com:danwrong/low-pro-for-jquery.git\nDownload: http://github.com/danwrong/low-pro-for-jquery/tree/master/src/lowpro.jquery.js?raw=true\n\nA jQuery port of the Low Pro behavior framework that was originally written for Prototype.\n\n\n\nIn brief\n--------\n\nCreate a behavior as a class:\n\nTesty = $.klass({\n initialize: function(arg) {\n   alert('ive just been attached with the arg ' + arg);\n },\n onclick: function() {\n   alert('ive been clicked');\n }\n});\n\nBtw, $.klass is a full port of Prototype's Class.create so youget that as a bonus and \ncan use all the inheritance stuff in the same way.\n\nNext, attach the behavior on DOM ready in the jQuery way:\n\njQuery(function($) {\n $('p').attach(Testy, 'My arg');\n});\n\nAlternatively, if you just need to attach behaviors and get references to the behavior instances\ncreated then you can use:\n\n$('a').attachAndReturn(Clicky, 45) //=> Array of behavior instances\n\nAside from this everything works the same as Low Pro for Prototype.\nSee http://www.danwebb.net/lowpro for details.\n\n\n\nLivequery support\n-----------------\n\nIf the livequery plugin is found then Low Pro will use it to automatically bind behaviors to\nnewly created content so if, taking the above example, you did something like:\n\n$(document.body).append('<p>A new para</p>')\n\nThen it too would get a behavior binded to it.\n\n\n\nAcknowledgements\n----------------\n\nThe $.klass code is a direct port of the Class.create code from Prototype (http://prototypejs.org)."""
https://github.com/wayneeseguin/autozest,"""= About\n\nAutoZest is an autotest extension\n\n= Author\n\n  Wayne E. Seguin (wayneeseguin at gmail dot com)\n\n= Features\n\n* automated growl installation\n  $ autozest install growl\n\n* generation of .autotest with growl & autozest config\n  $ autozest setup autotest\n\n* generation of .autozest.yml config file\n  $ autozest setup\n\n* autozest.sqlite3 database file for pulling random messages based on severity, update via:\n  $ autozest update\n\nNotes:\n\n* config file can specify extra image fetching options\n* dependency: ZenTest\n\n"""
https://github.com/technoweenie/attachment_fu,"""attachment-fu\n=============\n\nattachment_fu is a plugin by Rick Olson (aka technoweenie <http://techno-weenie.net>) and is the successor to acts_as_attachment.  To get a basic run-through of its capabilities, check out Mike Clark's tutorial <http://clarkware.com/cgi/blosxom/2007/02/24#FileUploadFu>.\n\n\nattachment_fu functionality\n===========================\n\nattachment_fu facilitates file uploads in Ruby on Rails.  There are a few storage options for the actual file data, but the plugin always at a minimum stores metadata for each file in the database.\n\nThere are four storage options for files uploaded through attachment_fu:\n  File system\n  Database file\n  Amazon S3\n  Rackspace (Mosso) Cloud Files\n\nEach method of storage many options associated with it that will be covered in the following section.  Something to note, however, is that the Amazon S3 storage requires you to modify config/amazon_s3.yml, the Rackspace Cloud Files storage requires you to modify config/rackspace_cloudfiles.yml, and the Database file storage requires an extra table.\n\n\nattachment_fu models\n====================\n\nFor all three of these storage options a table of metadata is required.  This table will contain information about the file (hence the 'meta') and its location.  This table has no restrictions on naming, unlike the extra table required for database storage, which must have a table name of db_files (and by convention a model of DbFile).\n  \nIn the model there are two methods made available by this plugins: has_attachment and validates_as_attachment.\n\nhas_attachment(options = {})\n  This method accepts the options in a hash:\n    :content_type     # Allowed content types.\n                      # Allows all by default.  Use :image to allow all standard image types.\n    :min_size         # Minimum size allowed.\n                      # 1 byte is the default.\n    :max_size         # Maximum size allowed.\n                      # 1.megabyte is the default.\n    :size             # Range of sizes allowed.\n                      # (1..1.megabyte) is the default.  This overrides the :min_size and :max_size options.\n    :resize_to        # Used by RMagick to resize images.\n                      # Pass either an array of width/height, or a geometry string.\n    :thumbnails       # Specifies a set of thumbnails to generate.\n                      # This accepts a hash of filename suffixes and RMagick resizing options.\n                      # This option need only be included if you want thumbnailing.\n    :thumbnail_class  # Set which model class to use for thumbnails.\n                      # This current attachment class is used by default.\n    :path_prefix      # Path to store the uploaded files in.\n                      # Uses public/#{table_name} by default for the filesystem, and just #{table_name} for the S3 and Cloud Files backend.  \n                      # Setting this sets the :storage to :file_system.\n    :partition        # Whether to partiton files in directories like /0000/0001/image.jpg. Default is true. Only applicable to the :file_system backend.\n    :storage          # Specifies the storage system to use..\n                      # Defaults to :db_file.  Options are :file_system, :db_file, :s3, and :cloud_files.\n    :cloudfront       # If using S3 for storage, this option allows for serving the files via Amazon CloudFront.\n                      # Defaults to false.\n    :processor        # Sets the image processor to use for resizing of the attached image.\n                      # Options include ImageScience, Rmagick, and MiniMagick.  Default is whatever is installed.\n    :uuid_primary_key # If your model's primary key is a 128-bit UUID in hexadecimal format, then set this to true.\n    :association_options  # attachment_fu automatically defines associations with thumbnails with has_many and belongs_to. If there are any additional options that you want to pass to these methods, then specify them here.\n    \n\n  Examples:\n    has_attachment :max_size => 1.kilobyte\n    has_attachment :size => 1.megabyte..2.megabytes\n    has_attachment :content_type => 'application/pdf'\n    has_attachment :content_type => ['application/pdf', 'application/msword', 'text/plain']\n    has_attachment :content_type => :image, :resize_to => [50,50]\n    has_attachment :content_type => ['application/pdf', :image], :resize_to => 'x50'\n    has_attachment :thumbnails => { :thumb => [50, 50], :geometry => 'x50' }\n    has_attachment :storage => :file_system, :path_prefix => 'public/files'\n    has_attachment :storage => :file_system, :path_prefix => 'public/files', \n                   :content_type => :image, :resize_to => [50,50], :partition => false\n    has_attachment :storage => :file_system, :path_prefix => 'public/files',\n                   :thumbnails => { :thumb => [50, 50], :geometry => 'x50' }\n    has_attachment :storage => :s3\n    has_attachment :store => :s3, :cloudfront => true\n    has_attachment :storage => :cloud_files\n\nvalidates_as_attachment\n  This method prevents files outside of the valid range (:min_size to :max_size, or the :size range) from being saved.  It does not however, halt the upload of such files.  They will be uploaded into memory regardless of size before validation.\n  \n  Example:\n    validates_as_attachment\n\n\nattachment_fu migrations\n========================\n\nFields for attachment_fu metadata tables...\n  in general:\n    size,         :integer  # file size in bytes\n    content_type, :string   # mime type, ex: application/mp3\n    filename,     :string   # sanitized filename\n  that reference images:\n    height,       :integer  # in pixels\n    width,        :integer  # in pixels\n  that reference images that will be thumbnailed:\n    parent_id,    :integer  # id of parent image (on the same table, a self-referencing foreign-key).\n                            # Only populated if the current object is a thumbnail.\n    thumbnail,    :string   # the 'type' of thumbnail this attachment record describes.  \n                            # Only populated if the current object is a thumbnail.\n                            # Usage:\n                            # [ In Model 'Avatar' ]\n                            #   has_attachment :content_type => :image, \n                            #                  :storage => :file_system, \n                            #                  :max_size => 500.kilobytes,\n                            #                  :resize_to => '320x200>',\n                            #                  :thumbnails => { :small => '10x10>',\n                            #                                   :thumb => '100x100>' }\n                            # [ Elsewhere ]\n                            # @user.avatar.thumbnails.first.thumbnail #=> 'small'\n  that reference files stored in the database (:db_file):\n    db_file_id,   :integer  # id of the file in the database (foreign key)\n    \nField for attachment_fu db_files table:\n  data, :binary # binary file data, for use in database file storage\n\n\nattachment_fu views\n===================\n\nThere are two main views tasks that will be directly affected by attachment_fu: upload forms and displaying uploaded images.\n\nThere are two parts of the upload form that differ from typical usage.\n  1. Include ':multipart => true' in the html options of the form_for tag.\n    Example:\n      <% form_for(:attachment_metadata, :url => { :action => \""create\"" }, :html => { :multipart => true }) do |form| %>\n      \n  2. Use the file_field helper with :uploaded_data as the field name.\n    Example:\n      <%= form.file_field :uploaded_data %>\n\nDisplaying uploaded images is made easy by the public_filename method of the ActiveRecord attachment objects using file system, s3, and Cloud Files storage.\n\npublic_filename(thumbnail = nil)\n  Returns the public path to the file.  If a thumbnail prefix is specified it will return the public file path to the corresponding thumbnail.\n  Examples:\n    attachment_obj.public_filename          #=> /attachments/2/file.jpg\n    attachment_obj.public_filename(:thumb)  #=> /attachments/2/file_thumb.jpg\n    attachment_obj.public_filename(:small)  #=> /attachments/2/file_small.jpg\n\nWhen serving files from database storage, doing more than simply downloading the file is beyond the scope of this document.\n\n\nattachment_fu controllers\n=========================\n\nThere are two considerations to take into account when using attachment_fu in controllers.\n\nThe first is when the files have no publicly accessible path and need to be downloaded through an action.\n\nExample:\n  def readme\n    send_file '/path/to/readme.txt', :type => 'plain/text', :disposition => 'inline'\n  end\n  \nSee the possible values for send_file for reference.\n\n\nThe second is when saving the file when submitted from a form.\nExample in view:\n <%= form.file_field :attachable, :uploaded_data %>\n\nExample in controller:\n  def create\n    @attachable_file = AttachmentMetadataModel.new(params[:attachable])\n    if @attachable_file.save\n      flash[:notice] = 'Attachment was successfully created.'\n      redirect_to attachable_url(@attachable_file)     \n    else\n      render :action => :new\n    end\n  end\n\nattachement_fu scripting\n====================================\n\nYou may wish to import a large number of images or attachments. \nThe following example shows how to upload a file from a script. \n\n#!/usr/bin/env ./script/runner\n\n# required to use ActionController::TestUploadedFile \nrequire 'action_controller'\nrequire 'action_controller/test_process.rb'\n\npath = \""./public/images/x.jpg\""\n\n# mimetype is a string like \""image/jpeg\"". One way to get the mimetype for a given file on a UNIX system\n# mimetype = `file -ib #{path}`.gsub(/\\n/,\""\"")\n\nmimetype = \""image/jpeg\""\n\n# This will \""upload\"" the file at path and create the new model.\n@attachable = AttachmentMetadataModel.new(:uploaded_data => ActionController::TestUploadedFile.new(path, mimetype))\n@attachable.save\n"""
https://github.com/cristibalan/braid,"""# Braid\n\n[![Build Status](https://secure.travis-ci.org/cristibalan/braid.png?branch=master)](http://travis-ci.org/cristibalan/braid)\n[![Gem](https://img.shields.io/gem/v/braid.svg?maxAge=2592000)](https://rubygems.org/gems/braid)\n\nBraid is a simple tool to help track vendor branches in a\n[Git](http://git-scm.com/) repository.\n\n## Motivation\n\nVendoring allows you take the source code of an external library and ensure it's\nversion controlled along with the main project. This is in contrast to including\na reference to a packaged version of an external library that is available in a\nbinary artifact repository such as Maven Central, RubyGems or NPM.\n\nVendoring is useful when you need to patch or customize the external libraries\nor the external library is expected to co-evolve with the main project. The\ndeveloper can make changes to the main project and patch the library in a single\ncommit.\n\nThe problem arises when the external library makes changes that you want to\nintegrate into your local vendored version or the developer makes changes to the\nlocal version that they want integrated into the external library.\n\nA typical \""implementation\"" of vendoring is to simply download or checkout the\nsource for the external library, remove the `.git` or `.svn` directories and\ncommit it to the main source tree. However this approach makes it very difficult\nto update the library. When you want to update the library do you re-apply your\nlocal changes onto a new copy of the vendored library or do you re-apply the\nchanges from the external library to local version? Both cases involve manual\ngeneration and application of patch files to source trees.\n\nThis is where Braid comes into play. Braid makes it easy to vendor in remote git\nrepositories and use an automated mechanism for updating the external library\nand generating patches to upgrade the external library.\n\nBraid creates a file `.braids.json` in the root of your repository that contains\nreferences to external libraries or mirrors. The configuration allows you to control\naspects of the mirroring process such as;\n\n* whether the mirror is locked to a particular version of the external library.\n* whether the mirror is tracking a tag or a branch.\n* whether the mirror includes the entire external library or just a subdirectory.\n\n## Installation\n\n    gem install braid\n\n## Quick usage - ruby project\n\nLet's assume we're writing the project `myproject` that needs grit in lib/grit. Initialize the repo (nothing braid related here):\n\n    git init myproject\n    cd myproject\n    touch README\n    git add README\n    git commit -m \""initial commit\""\n\nNow let's vendor grit:\n\n    braid add git://github.com/mojombo/grit.git lib/grit\n\nAnd you're done! Braid vendored grit into lib/grit. Feel free to inspect the changes with git log or git show.\n\nIf further down the line, you want to bring new changes from grit into your repository, just update the mirror:\n\n    braid update lib/grit\n\nIf you make changes to the grit library and want to generate a patch file so that you can submit the patch file\nto the grit project:\n\n    braid diff lib/grit > grit.patch\n\nAlternatively you can push changes back to the source directory directly using the following command. The command\nwill push the changes to the branch `myproject_customizations` that has been branched off the source branch (`master`\nin this example). Omit the `--branch` argument to push directly to the source branch.\n\n    braid push lib/grit --branch myproject_customizations\n\nOnce those changes have been applied to grit you probably want to update your local version of grit again.\n\n    braid update lib/grit\n\n## More usage\n\nUse the built in help system to find out about all commands and options:\n\n    braid help\n    braid help add # or braid add --help\n\n### Examples\n\n#### Adding a mirror\n\n    braid add git://github.com/rails/rails.git vendor/rails\n\n#### Adding a subdirectory from a mirror\n\nThis is useful if you want to add a subdirectory from a mirror into your own project.\n\n    braid add --path dist https://github.com/twbs/bootstrap.git vendor/assets/bootstrap\n\n#### Adding a mirror based on a branch\n\n    braid add --branch 5-0-stable https://github.com/rails/rails.git vendor/rails\n\n#### Adding a mirror based on a tag\n\n    braid add --tag v1.0 https://github.com/realityforge/backpack.git vendor/tools/backpack\n\n#### Adding mirror locked to a revision\n\n    braid add --revision bf1b1e0 git://github.com/rails/rails.git vendor/rails\n\n#### Updating mirrors\n\n    # Update a specific mirror\n    braid update vendor/plugins/cache_fu\n    # Update all mirrors\n    braid update\n\n#### Updating mirrors with conflicts\n\nIf a braid update creates a conflict, braid will stop execution and leave the partially committed\nfiles in your working copy, just like a normal git merge conflict would.\n\nYou will then have to resolve all conflicts and manually run `git commit`. The commit message is\nalready prepared.\n\nIf you want to cancel the braid update and the merge, you'll have to reset your working copy and\nindex with `git reset --hard`.\n\n#### Locking and unlocking mirrors\n\nLock to a particular version in the mirror.\n\n    braid update --revision 6c1c16b vendor/rails\n\nGo back to tracking a particular branch.\n\n    braid update --branch master vendor/rails\n\n#### Showing local changes made to mirrors\n\n    braid diff vendor/rails\n\n## Braid version compatibility\n\nSince Braid has been regularly changing the configuration format and adding new\nfeatures that some projects may choose to rely on, and somewhat less often\nmaking breaking changes in how the configuration is handled, problems can arise\nif different developers work on the same project using different versions of\nBraid.  Since version 1.1.0, Braid refuses to operate if it detects potentially\nproblematic version skew.  If this happens, Braid will tell you what you can do.\nIf you'd like an overview of what to expect, read on.\n\nRoughly speaking, the `.braids.json` configuration file contains a configuration\nversion number that corresponds to a range of compatible Braid minor versions\n(`x.y`). \""Patch\"" upgrades to Braid (i.e., `x.y.z` -> `x.y.(z+1)`) will never\n(intentionally!) have configuration compatibility implications and are always\nrecommended as they may fix critical bugs.\n\nIf you use a Braid version too old for your configuration file, Braid will\ndirect you to the [configuration version history page](config_versions.md) with\ninstructions to upgrade Braid.  If you use a Braid version too new, Braid will\ntell you how you can upgrade your configuration file or find a compatible older\nBraid version to use.  (As an exception, a newer version of Braid can run\nread-only commands on an older configuration file without upgrading it if there\nare no breaking changes.)  If you upgrade your configuration file, then other\ndevelopers on the project may need to upgrade Braid.  Braid does not support\ndowngrading a configuration file, though you can revert the commit that upgraded\nit if you haven't made any subsequent changes to the configuration.\n\nIf you work on multiple projects, you may need to install multiple versions of\nBraid and manually run the correct version for each project.  Fortunately, the\nRubyGems system makes this reasonably straightforward.\n\nAnother approach is to standardize the Braid version for a project by listing\nBraid in a `Gemfile` (either checking in `Gemfile.lock` or using a version\nconstraint in the `Gemfile`) and run the project's version of Braid via\n[Bundler](http://bundler.io/) with `bundle exec braid`.  Even non-Ruby projects\ncan do this if it's acceptable to have a `Gemfile` and `Gemfile.lock`.  Ruby\nprojects that don't want Braid to interact with their other gems can potentially\nput the `Gemfile` in a subdirectory and provide a wrapper script for `bundle`\nthat sets the `BUNDLE_GEMFILE` environment variable.  We do not yet have enough\nexperience with this approach to make a firm recommendation for or against it.\n\nThis is the best design we could find to prevent surprises and adequately\nsupport normal development processes while minimizing the additional maintenance\ncost of the version compatibility mechanism.  We want to have a scheme in place\nthat is robust enough to make it reasonable to encourage serious adoption of\nBraid, yet we don't want to spend extra work adding conveniences until there's\nevidence of sufficient demand for them.\n\n## Contributing\n\nWe appreciate any patches, error reports and usage ideas you may have. Please\nsubmit an issue or pull request on GitHub.\n\n### Subversion\n\nWhile preparing to release Braid v1.0 the support for subversion repositories was removed as\nthere was no active maintainers and inadequate test coverage. If there is anyone motivated to\nre-add and maintain the Subversion support, please contact the authors.\n\n# Authors\n\n* Cristi Balan\n* Norbert Crombach\n* Peter Donald\n\n## Contributors (alphabetically)\n\n* Alan Harper\n* Brad Durrow\n* Christoph Sturm\n* Dennis Muhlestein\n* Ferdinand Svehla\n* Matt McCutchen\n* Michael Klishin\n* Roman Heinrich\n* Travis Tilley\n* Tyler Rick\n"""
https://github.com/mojombo/chronic,"""Chronic\n=======\n\nChronic is a natural language date/time parser written in pure Ruby. See below\nfor the wide variety of formats Chronic will parse.\n\n## Installation\n\n```\n$ gem install chronic\n```\n\n## Usage\n\n```ruby\nrequire 'chronic'\n\nTime.now   #=> Sun Aug 27 23:18:25 PDT 2006\n\nChronic.parse('tomorrow')\n  #=> Mon Aug 28 12:00:00 PDT 2006\n\nChronic.parse('monday', :context => :past)\n  #=> Mon Aug 21 12:00:00 PDT 2006\n\nChronic.parse('this tuesday 5:00')\n  #=> Tue Aug 29 17:00:00 PDT 2006\n\nChronic.parse('this tuesday 5:00', :ambiguous_time_range => :none)\n  #=> Tue Aug 29 05:00:00 PDT 2006\n\nChronic.parse('may 27th', :now => Time.local(2000, 1, 1))\n  #=> Sat May 27 12:00:00 PDT 2000\n\nChronic.parse('may 27th', :guess => false)\n  #=> Sun May 27 00:00:00 PDT 2007..Mon May 28 00:00:00 PDT 2007\n\nChronic.parse('6/4/2012', :endian_precedence => :little)\n  #=> Fri Apr 06 00:00:00 PDT 2012\n\nChronic.parse('INVALID DATE')\n  #=> nil\n```\n\nIf the parser can find a date or time, either a Time or Chronic::Span\nwill be returned (depending on the value of `:guess`). If no\ndate or time can be found, `nil` will be returned.\n\nSee `Chronic.parse` for detailed usage instructions.\n\n## Examples\n\nChronic can parse a huge variety of date and time formats. Following is a\nsmall sample of strings that will be properly parsed. Parsing is case\ninsensitive and will handle common abbreviations and misspellings.\n\n#### Simple\n\n* thursday\n* november\n* summer\n* friday 13:00\n* mon 2:35\n* 4pm\n* 10 to 8\n* 10 past 2\n* half past 2\n* 6 in the morning\n* friday 1pm\n* sat 7 in the evening\n* yesterday\n* today\n* tomorrow\n* last week\n* next week\n* this tuesday\n* next month\n* last winter\n* this morning\n* last night\n* this second\n* yesterday at 4:00\n* last friday at 20:00\n* last week tuesday\n* tomorrow at 6:45pm\n* afternoon yesterday\n* thursday last week\n\n#### Complex\n\n* 3 years ago\n* a year ago\n* 5 months before now\n* 7 hours ago\n* 7 days from now\n* 1 week hence\n* in 3 hours\n* 1 year ago tomorrow\n* 3 months ago saturday at 5:00 pm\n* 7 hours before tomorrow at noon\n* 3rd wednesday in november\n* 3rd month next year\n* 3rd thursday this september\n* 4th day last week\n* fourteenth of june 2010 at eleven o'clock in the evening\n* may seventh '97 at three in the morning\n\n#### Specific Dates\n\n* January 5\n* 22nd of june\n* 5th may 2017\n* February twenty first\n* dec 25\n* may 27th\n* October 2006\n* oct 06\n* jan 3 2010\n* february 14, 2004\n* february 14th, 2004\n* 3 jan 2000\n* 17 april 85\n* 5/27/1979\n* 27/5/1979\n* 05/06\n* 1979-05-27\n* Friday\n* 5\n* 4:00\n* 17:00\n* 0800\n\n#### Specific Times (many of the above with an added time)\n\n* January 5 at 7pm\n* 22nd of june at 8am\n* 1979-05-27 05:00:00\n* 03/01/2012 07:25:09.234567\n* 2013-08-01T19:30:00.345-07:00\n* 2013-08-01T19:30:00.34-07:00\n* etc\n\n\n## Time Zones\n\nChronic allows you to set which Time class to use when constructing times. By\ndefault, the built in Ruby time class creates times in your system's local\ntime zone. You can set this to something like ActiveSupport's\n[TimeZone](http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html)\nclass to get full time zone support.\n\n```\n>> Time.zone = \""UTC\""\n>> Chronic.time_class = Time.zone\n>> Chronic.parse(\""June 15 2006 at 5:45 AM\"")\n=> Thu, 15 Jun 2006 05:45:00 UTC +00:00\n```\n\n## Limitations\n\nChronic uses Ruby's built in Time class for all time storage and computation.\nBecause of this, only times that the Time class can handle will be properly\nparsed. Parsing for times outside of this range will simply return `nil`.\nSupport for a wider range of times is planned for a future release.\n\n\n## Contribute\n\nIf you'd like to hack on Chronic, start by forking the repo on GitHub:\n\nhttps://github.com/mojombo/chronic\n\nThe best way to get your changes merged back into core is as follows:\n\n1. Clone down your fork\n1. Create a thoughtfully named topic branch to contain your change\n1. Install the development dependencies by running `bundle install`\n1. Hack away\n1. Add tests and make sure everything still passes by running `bundle exec rake`\n1. Ensure your tests pass in multiple timezones. ie `TZ=utc bundle exec rake` `TZ=BST bundle exec rake`\n1. If you are adding new functionality, document it in the README\n1. Do not change the version number, we will do that on our end\n1. If necessary, rebase your commits into logical chunks, without errors\n1. Push the branch up to GitHub\n1. Send a pull request for your branch\n"""
https://github.com/jnicklas/uploadcolumn,"""= UploadColumn\n\nUploadColumn is a plugin for the Ruby on Rails framework that enables easy uploading of files, especially images.\n\nSuppose you have a list of users, and you would like to associate a picture to each of them. You could upload the image to a database, or you could use upload_column for simple storage to the file system.\n\nAssuming you have a User model with a column called 'picture' that is of type String, you could simply add the upload_column instruction to your User model:\n\n    class User < ActiveRecord::Base\n      upload_column :picture\n    end\n\nThat's it! You can start uploading files. Of course, +upload_column+ has a lot of different options you can use to customize your uploads.\n\nUploading files is no fun without a user interface, so get going and make one:\n\nadd an upload_column_field to your form, maybe like this:\n\n    <p><label for=\""user_picture\"">Picture</label><br/>\n    <%= upload_column_field 'user', 'picture'  %></p>\n\nYou should use upload_column_field instead of Rails' file_field, since it will work even when the form is redisplayed, like when a validation fails. Unfortunately file_field doesn't work in that case.\n\nNow that's excellent, but most likely it will fail, because instead of sending the file, it just sends a string. No worries though, if we just set the form's encoding to multipart it will all work out, UploadColumn even comes with some nice helpers to avoid that nasty multipart syntax. This could look something like this:\n\n    <%= upload_form_tag( :action => 'create' ) %>\n\nAnd that's it! Your uploads are up and running (hopefully) and you should now be able to add pictures to your users. The madness doesn't stop there of course!\n\n== Storage Path\n\nYou won't always want to store the pictures in the directory that upload_column selects for you, but that's not a problem, because changing that directory is trivial. You can pass a <tt>:store_dir</tt> key to the upload_column declaration, this will override the default mechanism and always use that directory as the basis.\n\n    upload_column :picture, :store_dir => \""pictures\""\n    \nmight be sensible in our case. Note that this way, all files will be stored in the same directory.\n\nIf you need more refined control over the storage path (maybe you need to store it by the id of an association?) then you can use a proc instead. Our proc might look like this:\n\n    upload_column :picture, :store_dir => proc{|record, file| \""images/#{record.category.name}/#{record.id}/#{file.extension}\""}\n\nThe proc will be passed two parameters, the first is the current instance of your model class, the second is the name of the attribute that is being uploaded to (in our case +attr+ would be <tt>:picture</tt>).\n\nYou can change the <tt>:tmp_dir</tt> in the same way.\n\n== Filename\n\nBy default, UploadColumn will keep the name of the original file, however this might be inconvenient in some cases. You can pass a :filename directive to your upload_column declaration:\n\n    upload_column :picture, :filename => \""donkey.png\""\n    \nIn which case all files will be named +donkey.png+. This is not desirable if the file in question is a jpeg file of course. Usually it is more sensible to pass a Proc to :filename.\n\n    upload_column :picture, :filename => proc{|record, file| \""avatar#{record.id}.#{file.extension}\""}\n    \nThe Proc will be passed two parameters, the current instance, and the file itself.\n\n== Manipulators\n\nUploadColumn allows you to use manipulators on your file, that in some way transform your file, or perform any kind\nof operations on it. There are currently two manipulators bundled, the RMagick manipulator and the ImageScience\nmanipulator, but writing your own is very easy. There are further instructions on the website.\n\n== Manipulating Images with RMagick\n\nSay you would want (for whatever reason) to have a funky solarize effect on your users' images. Manipulating images with upload_column can be done either at runtime or after the image is saved, let's look at some possibilities:\n\n    class User < ActiveRecord::Base\n      upload_column :picture, :manipulator => UploadColumn::Manipulators::RMagick\n      \n      def picture_after_assign\n        \n        picture.process! do |img|\n          img.solarize\n        end\n        \n      end\n    end\n\nYou can also use the :process instruction, which will automatically apply the manipulation when a new image is uploaded. If you wanted to resize your image to a maximum of 800 by 600 pixels for example, you could do:\n\n    class User < ActiveRecord::Base\n      upload_column :picture, :process => '800x600', :manipulator => UploadColumn::Manipulators::RMagick\n    end\n    \nthe previous example with solarize could be written shorter as:\n\n    class User < ActiveRecord::Base\n      upload_column :picture, :process => proc{|img| img.solarize }, :manipulator => UploadColumn::Manipulators::RMagick\n    end\n\nOr maybe we want different versions of our image, then we could simply specify:\n \n    class User < ActiveRecord::Base\n      upload_column :picture, :versions => [ :solarized, :sepiatoned ], :manipulator => UploadColumn::Manipulators::RMagick\n      \n      def picture_after_assign\n        picture.solarized.process! do |img|\n          img.solarize\n        end\n        picture.sepiatoned.process! do |img|\n          img.sepiatone\n        end\n      end\n    end\n    \nyou can also use a Hash for versions and pass a dimension or a proc to it, so you can do:\n\n    class User < ActiveRecord::Base\n      upload_column :picture, :versions => { :thumb => \""c100x100\"", :large => \""200x300\"", :sepiatoned => proc{ |img| img.sepiatone } }, :manipulator => UploadColumn::Manipulators::RMagick\n    end\n    \nNote the 'c' in front of the dimensions for the thumb image, this will crop the image to the exact dimensions. All of this is a bit wordy though, and it also doesn't take check, that the files really are images. Sepiatoning the latest GreenDay song somehow doesn't sound too good. For that reason UploadColumn comes with the image_column function:\n\n    class User < ActiveRecord::Base\n      image_column :picture, :versions => { :thumb => \""c100x100\"", :large => \""200x300\"", :sepiatoned => proc{ |img| img.sepiatone } }\n    end\n\nThis also puts your images in public/images instead of public, which is neat!\n\n== Runtime rendering\n\nYou can manipulate images at runtime (it's a huge performance hit though!). In your controller add an action and use UploadColumnRenderHelper.render_image.\n\n    def sepiatone\n      @user = User.find(parms[:id])\n      render_image @user.picture do |img|\n        img.sepiatone\n      end\n    end\n    \nAnd that's it!\n\nIn your view, you can use UploadColumnHelper.image to easily create an image tag for your action:\n\n    <%= image :action => \""sepiatone\"", :id => 5 %>\n    \n== Views\n\nIf your uploaded file is an image you would most likely want to display it in your view, if it's another kind of file you'll want to link to it. Both of these are easy using UploadColumn::BaseUploadedFile.url.\n\n    <%= link_to \""Guitar Tablature\"", @song.tab.url %>\n    \n    <%= image_tag @user.picture.url %>\n\n== Magic Columns\n\nUploadColumn allows you to add 'magic' columns to your model, which will be automatically filled with the appropriate data. Just add the column, for example via migrations:\n\n    add_column :users, :picture_content_type\n\nAnd if our model looks like this:\n\n    class User < ActiveRecord::Base\n      upload_column :picture\n    end\n\nThe column <tt>picture_content_type</tt> will now automatically be filled with the file's content-type (or at least with UploadColumn's best guess ;).\n\nYou can use any method method on UploadColumn::UploadedFile that takes no argument, so you can use for example, size, url, store_dir and so on.\n\nYou can also do <tt>picture_exif_date_time</tt> or <tt>picture_exif_model</tt>, etc. This works only, of course, if the uploaded file is a JPEG image, since that is the only filetype that has exif data. This requires the EXIFR library, which you can get by installing the gem via <tt>gem install exifr</tt>.\n      \n== Validations\n\nUploadColumn comes with its own validation method, validates_integrity_of. This method will ensure that only files with an extension from a whitelist will be uploaded. This prevents a hacker from uploading executable files (such as .rb, .pl or .cgi for example) or it can be used to restrict what kind of file are allowed to be uploaded, for example only images. You can customize the whitelist with the :extensions parameter to upload column.\n\nIf you want to only allow the upload of XHTML and XML files, so you can manipulate them with XSLT you could do:\n\n    upload_column :xml, :extensions => %w(xml html htm), :manipulator => MyXSLTProcessor\n\n\tvalidate_integrity_of :xml\n\nYou can also use some of Rails' validations with UploadColumn.\n\nvalidates_presence_of and validates_size_of have been verified to work. \n\n    validates_size_of :image, :maximum => 200000, :message => \""is too big, must be smaller than 200kB!\""\n\nRemember to change the error message, the default one sounds a bit stupid with UploadColumn.\n\nvalidates_uniqueness_of does NOT work, this is because validates_uniqueness_of will send(:your_upload_column) instead of asking for the instance variable, thus it will get an UploadedFile object, which it can't really compare to other values in the database, this is rather difficult to work around without messing with Rails internals (if you manage, please let me know!). Meanwhile you could do\n\n    validates_each :your_upload_column do |record, attr, value|    \n      record.errors.add attr, 'already exists!' if YourModel.find( :first, :conditions => [\""#{attr.to_s} = ?\"", value ] )\n    end\n\nIt's not elegant I know, but it should work.\n"""
https://github.com/chneukirchen/rack-mirror,"""= Rack, a modular Ruby webserver interface\n\nRack provides a minimal, modular and adaptable interface for developing\nweb applications in Ruby.  By wrapping HTTP requests and responses in\nthe simplest way possible, it unifies and distills the API for web\nservers, web frameworks, and software in between (the so-called\nmiddleware) into a single method call.\n\nThe exact details of this are described in the Rack specification,\nwhich all Rack applications should conform to.\n\n== Supported web servers\n\nThe included *handlers* connect all kinds of web servers to Rack:\n* Mongrel\n* EventedMongrel\n* WEBrick\n* FCGI\n* CGI\n* SCGI\n* LiteSpeed\n\nThese web servers include Rack handlers in their distributions:\n* Ebb\n* Fuzed\n* Thin\n\nAny valid Rack app will run the same on all these handlers, without\nchanging anything.\n\n== Supported web frameworks\n\nThe included *adapters* connect Rack with existing Ruby web frameworks:\n* Camping\n\nThese frameworks include Rack adapters in their distributions:\n* Coset\n* Halcyon\n* Maveric\n* Merb\n* Racktools::SimpleApplication\n* Ramaze\n* Sinatra\n* Vintage\n\nRuby on Rails can be run with the adapter included with Thin, which\nwill be merged into a later Rack version.\n\nCurrent links to these projects can be found at\nhttp://ramaze.net/#other-frameworks\n\n== Available middleware\n\nBetween the server and the framework, Rack can be customized to your\napplications needs using middleware, for example:\n* Rack::URLMap, to route to multiple applications inside the same process.\n* Rack::CommonLogger, for creating Apache-style logfiles.\n* Rack::ShowException, for catching unhandled exceptions and\n  presenting them in a nice and helpful way with clickable backtrace.\n* Rack::File, for serving static files.\n* ...many others!\n\nAll these components use the same interface, which is described in\ndetail in the Rack specification.  You can choose to use them exactly\nin the way you want.\n\n== Convenience\n\nIf you want to develop outside of existing frameworks, implement your\nown ones, or develop middleware, Rack provides many helpers to create\nRack applications quickly and without doing the same web stuff all\nover:\n* Rack::Request, which also provides query string parsing and\n  multipart handling.\n* Rack::Response, for convenient generation of HTTP replies and\n  cookie handling.\n* Rack::MockRequest and Rack::MockResponse for efficient and quick\n  testing of Rack application without real HTTP round-trips.\n\n== rackup\n\nrackup is a useful tool for running Rack applications, which uses the\nRack::Builder DSL to configure middleware and build up applications\neasily.\n\nrackup automatically figures out the environment it is run in, and\nruns your application as FastCGI, CGI, or standalone with Mongrel or\nWEBrick---all from the same configuration.\n\n== Quick start\n\nTry the lobster!\n\nEither with the embedded WEBrick starter:\n\n    ruby -Ilib lib/rack/lobster.rb\n\nOr with rackup:\n\n    bin/rackup -Ilib example/lobster.ru \n\nBy default, the lobster is found at http://localhost:9292.\n\n== Installing with RubyGems\n\nA Gem of Rack is available.  You can install it with:\n\n    gem install rack\n\nI also provide a local mirror of the gems (and development snapshots)\nat my site:\n\n    gem install rack --source http://chneukirchen.org/releases/gems\n\n== Running the tests\n\nTesting Rack requires the test/spec testing framework:\n\n    gem install test-spec\n\nThe full set of tests also test FCGI access with lighttpd so you will\nneed lighttpd installed as well as the FCGI libraries and the fcgi gem\ninstalled:\n\nDownload and install lighttpd:\n\n    http://www.lighttpd.net/download\n\nInstalling the FCGI libraries:\n\n    curl -O http://www.fastcgi.com/dist/fcgi-2.4.0.tar.gz\n    tar xzvf fcgi-2.4.0.tar.gz\n    cd fcgi-2.4.0\n    ./configure --prefix=/usr/local\n    make\n    sudo make install\n    cd ..\n\nInstalling the Ruby fcgi gem:\n\n    gem install fcgi\n\nThere are two rake-based test tasks:\n\n    rake test       tests all the fast tests (no Handlers or Adapters)\n    rake fulltest   runs all the tests\n\n== History\n\n* March 3rd, 2007: First public release 0.1.\n\n* May 16th, 2007: Second public release 0.2.\n  * HTTP Basic authentication.\n  * Cookie Sessions.\n  * Static file handler.\n  * Improved Rack::Request.\n  * Improved Rack::Response.\n  * Added Rack::ShowStatus, for better default error messages.\n  * Bug fixes in the Camping adapter.\n  * Removed Rails adapter, was too alpha.\n\n* February 26th, 2008: Third public release 0.3.\n  * LiteSpeed handler, by Adrian Madrid.\n  * SCGI handler, by Jeremy Evans.\n  * Pool sessions, by blink.\n  * OpenID authentication, by blink.\n  * :Port and :File options for opening FastCGI sockets, by blink.\n  * Last-Modified HTTP header for Rack::File, by blink.\n  * Rack::Builder#use now accepts blocks, by Corey Jewett.\n    (See example/protectedlobster.ru)\n  * HTTP status 201 can contain a Content-Type and a body now.\n  * Many bugfixes, especially related to Cookie handling.\n\n* XXX, 2008: Fourth public release 0.4.\n  * New Memcache sessions, by blink.\n  * Rack::Reloader is not loaded in rackup development mode.\n  * Many bugfixes, especially for pool sessions and URLMap.\n\n== Contact\n\nPlease mail bugs, suggestions and patches to\n<mailto:chneukirchen@gmail.com>.\n\nDarcs repository (\""darcs send\"" is welcome for patches):\nhttp://chneukirchen.org/repos/rack\n\nYou are also welcome to join the #rack channel on irc.freenode.net.\n\n== Thanks to\n\n* blink for the Pool sessions, OpenID support, many tweaks, patches\n  and bugreports.\n* Michael Fellinger, for the helpful discussion, bugfixes and a better\n  Rack::Request interface.\n* Adrian Madrid, for the LiteSpeed handler.\n* Christoffer Sawicki, for the Rails adapter.\n* Tim Fletcher, for the HTTP authentication code.\n* Luc Heinrich for the Cookie sessions, the static file handler and bugfixes.\n* Armin Ronacher, for the logo and racktools.\n* Aredridel, for bug fixing.\n* Stephen Bannasch, for bug reports and documentation.\n* Gary Wright, for proposing a better Rack::Response interface.\n* Jonathan Buch, for improvements regarding Rack::Response.\n* Armin R\u00f6hrl, for tracking down bugs in the Cookie generator.\n* Alexander Kellett for testing the Gem and reviewing the announce.\n* Marcus R\u00fcckert, for help with configuring and debugging lighttpd.\n* The WSGI team for the well-done and documented work they've done and\n  Rack builds up on.\n\n== Copyright\n\nCopyright (C) 2007, 2008 Christian Neukirchen <http://purl.org/net/chneukirchen>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \""Software\""), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \""AS IS\"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\nTHE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER \nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n== Links\n\nRack:: <http://rack.rubyforge.org/>\nRack's Rubyforge project:: <http://rubyforge.org/projects/rack>\n\nCamping:: <http://camping.rubyforge.org/>\nRamaze:: <http://ramaze.rubyforge.org/>\nMaveric:: <http://maveric.rubyforge.org/>\nracktools:: <http://lucumr.pocoo.org/trac/repos/racktools/>\n\nChristian Neukirchen:: <http://chneukirchen.org/>\n\n"""
https://github.com/mojombo/glowstick,"""glowstick\n    by FIX (your name)\n    FIX (url)\n\n== DESCRIPTION:\n  \nFIX (describe your package)\n\n== FEATURES/PROBLEMS:\n  \n* FIX (list of features or problems)\n\n== SYNOPSIS:\n\n  FIX (code sample of usage)\n\n== REQUIREMENTS:\n\n* FIX (list of requirements)\n\n== INSTALL:\n\n* FIX (sudo gem install, anything else)\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) 2008 FIX\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"""
https://github.com/simonjefford/ruby-on-rails-tmbundle,"""TextMate bundle for Ruby on Rails development\n\nGET IT NOW: with Rails 2.0 support.\n\nRails 2.0 (copied from CHANGELOG)\n\n* Snippets/Commands for:\n  * Tests\n    * assert_select (ass)\n    * assert_difference/assert_no_difference (asd/asnd)\n    * GET+POST test method stubs (defg+defp)\n  * Controllers\n    * respond_to (rst)\n    * REMOVED: render_component snippets\n    * loggers - pass a block instead of raw string to save time if logging not used (e.g. production) [thx Stephen Touset]\n    * redirect_to for resource paths (rep, repp, renp, renpp)\n    * render :update (ru) [thx Simon Jefford]\n  * Views\n    * form_for (ff)\n    * link_to for resource paths (lip, lipp, linp, linpp)\n    * <% end -%> (end)\n  * Models\n    * has_many :though (hmt)\n    * association snippets give better defaults (e.g. bt + hm)\n    * validates_format_of (vf,vfif) [thx Dean Strelau]\n  * Migrations\n    * Sexy Migrations now available as \""t.\"" snippets [thx Lawrence Pit]\n    * Migration classes have own textmate scope\n    * Add/Remove Columns - the 'down' statements are in reverse order [thx Lawrence Pit, Daniel Kristensen]\n* Language/Syntax\n  * New keywords: rescue_from\n  * Added rb as a valid Rails file type [thx James Deville]\n* Commands\n  * html.erb is the default for new templates (backwards compatibility is being worked on too)\n* Plugins\n  * Footnote\n    * footnote-edge uses .erb for templates [thx Stephen Bannasch]\n\n"""
https://github.com/bmizerany/simply_versioned,"""SimplyVersioned\n===============\n\nRelease:\t1.0.0\nDate:\t\t\t28-01-2008\nAuthor:\t\tMatt Mower <self@mattmower.com>\n\nSimplyVersioned is a simple, non-invasive, approach to versioning ActiveRecord models.\n\nSimplyVersioned does not require any structural change to the models to be versioned and requires only one versions table to be created (a migration generator is supplied with the plugin) for the application, regardless of the number of models being versioned.\n\nThe plugin introduces a 'Version' ActiveRecord model (that reflects changes to model attributes) to which versioned models are polymorphically associated. Version records store the model information as a YAML hash.\n\t\nSimplyVersioned meets a simple need for model versioning. If your needs are more complex maybe try Rick Olsen's acts_as_versioned (http://svn.techno-weenie.net/projects/plugins/acts_as_versioned/).\n\t\nSimplyVersioned is (so far) actively tested with Rails 2.0.2 and Ruby 1.8.6\n\t\nUsage\n=====\n\n1. Install the plugin\n\n  ./script/plugin install http://rubymatt.rubyforge.org/svn/simply_versioned\n\n2. Generate the migration\n\n  ./script/generate simply_versioned_migration\n\n\tNote that the migration defaults to storing the version info in a TEXT field. On MySQL this will default to a\n\tlimit of 64K. If you are versioning particularly large models you will want to modify the migration to include\n\ta :limit => n condition to promote the yaml column to a MEDIUMTEXT or (god forbid) a LONGTEXT.\n\n3. Create the versions table\n\n  rake db:migrate\n\n4. Annotate the models you want to version specifying how many versions to keep\n\n\tclass Thing < ActiveRecord::Base\n\t  simply_versioned :keep => 10\n\tend\n\t\n\tIf you do not specify a limit then old versions are never automatically deleted. You can\n\tmanually delete them like this:\n\t\n\tthing.versions.purge( 10 )\n\t\n\twhich would delete all the but the last ten versions.\n\t\n\tIf you want fine-grained control over when versions are created you can use:\n\t\n\tclass Thing < ActiveRecord::Base\n\t\tsimply_versioned :automatic => false\n\tend\n\t\n\tand new versions will no longer be created by default. You will then need to use\n\tthe with_versioning method to create a version.\n\t\n\tLastly you can control which columns will be versioned by specifying an exclude parameter.\n\t\n\tclass Thing < ActiveRecord::Base\n\t\tsimply_versioned :exclude => :awkward_column\n\tend\n\t\t\n\tor\t\n\t\n\tclass Thing < ActiveRecord::Base\n\t\tsimply_versioned :exclude => [:first_awkward_column,:second_awkward_column,...]\n\tend\n\t\n\tThis may be helpful if you run into conflicts with other plugins which try to manage columns.\n\n5. Create versions\n\n\tthing = Thing.create!( :foo => bar ) # creates v1\n\tthing.foo = baz\n\tthing.save! # creates v2\n\t\n\tIf you need to control whether a version is created or not, use #with_versioning. For example:\n\t\n\tthing.with_versioning( false ) do |t|\n\t\tt.save!\n\tend\n\t\n\tor, using the \""magic pen\"" (http://dablog.rubypal.com/2007/2/18/the-magic-pens-of-ruby thanks hmj):\n\t\n\tthing.with_versioning( false, &:save! )\n\n6. Find versions\n\n\tthing.versions.each do |version| ... end\n\trender :partial => 'thing_version', :collection => thing.versions\n\tthing.versions.current\n\tthing.versions.first\n\tthing.versions.get( 3 )\n\t\n\tTo find a version number:\n\t\n\tthing.version_number\n\n7. Revert to a previous version\n\n\tthing.revert_to_version( 5 )\n\t\n\tIf a specific reversion needs to avoid overwriting some column values pass\n\tan :except option, e.g.\n\t\n\tthing.revert_to_version( 1, :except => [:name,:age] )\n\t\n\tThe revert_to_version method also takes an existing Version instance, e.g.\n\t\n\tversion = thing.versions.find( ... )\n\tthing.revert_to_version( version )\n\n8. Traverse versions\n\n\tthing.versions.current.previous\n\tthing.versions.first.next\n\n9. Obtain a copy of a previous versioned model\n\n\tthing.versions.first.model # => Instantiated Thing with versioned values\n\t\nThanks to:\n\n\tChris Wanstrath (http://ozmm.org/) for useful feedback and GitHub\n\tJosh Susser (http://blog.hasmanythrough.com/) for useful suggestions and feedback\n\tRick Olson (http://techno-weenie.net/) for all the many plugins whose code i've read\n\t\nCopyright (c) 2007 Matt Mower <self@mattmower.com> and released under the MIT license\n"""
https://github.com/up_the_irons/credit_card_tools,"""Credit Card Tools\n=================\n\nThese are a set of ruby scripts for processing credit cards on the command\nline.\n\nSupported processors:\n\n  * PayPal (Business or Premier account required)\n\nRequirements\n------------\n\n  * RubyGems\n  * ActiveMerchant\n\nSetup\n-----\n\nCopy gateway.yml.example to gateway.yml and fill in the fields in that file.\n\nThere is one block for the \""live\"" environment, where real credit cards are\ncharged, and one block for the \""test\"" environment, which mocks everything\nthrough PayPal's Sandbox and no real money is exchanged.\n\nInstall ActiveMerchant::\n\n  gem install activemerchant\n\nIf the following files are not set executable, you should do::\n\n  chmod 755 charge.rb refund.rb\n\nUsage\n-----\n\nCommands:\n\n  * charge.rb\n  * refund.rb\n\nRun the commands without arguments to see the options.\n\nExample $1.00 charge::\n\n  ./charge.rb 1.00 4111111111111111 02/2012\n\nExample $1.00 refund::\n\n  ./refund.rb 1.00 2TL24258DY409104G\n\nThe second argument in the above example is the Auth ID of the original \ntransaction.\n\nThe output will be a nicely formatted response from PayPal.  The response is\nin YAML format, so you could do further processing with your own scripts \nrelatively easily.\n\nOther Processors\n----------------\n\nActiveMerchant supports a large list of credit card processors / gateways.\nTo use these tools with a gateway besides PayPal, modify gateway.rb to suit\nyour needs.  It should be relatively straight forward.\n\nSee: http://www.activemerchant.org\n\nAuthor\n------\n\nGarry C. Dolley\n\ngdolley [at] NOSPAM- ucla.edu\n\nAIM: garry97531\n\nIRC: I am up_the_irons in #ram, #git and #caboose on Freenode.\n\nCopyright\n---------\n\nCopyright (c) 2008 Garry C. Dolley\n\nThis is free software; you can redistribute it and/or modify it under the\nterms of the GNU General Public License as published by the Free Software\nFoundation; either version 2 of the License, or (at your option) any later \nversion.\n\nThis is distributed in the hope that it will be useful, but WITHOUT ANY\nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\nFOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\ndetails.\n\nYou should have received a copy of the GNU General Public License along with\nthis software; if not, write to the Free Software Foundation, Inc., 51 Franklin\nStreet, Fifth Floor, Boston, MA  02110-1301, USA\n"""
https://github.com/kevinclark/god,"""god\n    by Tom Preston-Werner\n       Kevin Clark (kqueue/netlink support)\n       \n    http://god.rubyforge.org\n\n== DESCRIPTION:\n  \nGod is an easy to configure, easy to extend monitoring framework written \nin Ruby.\n\nKeeping your server processes and tasks running should be a simple part of \nyour deployment process. God aims to be the simplest, most powerful \nmonitoring application available.\n\n== DOCUMENTATION:\n\nSee online documentation at http://god.rubyforge.org\n\n== COMMUNITY:\n\nSign up for the god mailing list at http://groups.google.com/group/god-rb\n\n== INSTALL:\n\n  $ sudo gem install god\n  \n== CONTRIBUTE:\n\nLatest code is available at http://github.com/mojombo/god\n\nThe 'master' branch can be cloned with:\n\n  $ git clone git://github.com/mojombo/god.git\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) 2007 Tom Preston-Werner\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"""
https://github.com/technomancy/bus-scheme,"""= Bus Scheme\n    by Phil Hagelberg (c) 2007 - 2008\n    http://bus-scheme.rubyforge.org\n\n== Description\n\nBus Scheme is a Scheme written in Ruby, but implemented on the bus!\nEvery programmer must implement Scheme as a rite of passage; this is\nmine. Note that at least half of the implementation of Bus Scheme must\nbe written while on a bus. Documentation, tests, and administrivia may\nbe accomplished elsewhere, but the majority of actual implementation\ncode is strictly bus-driven. Bus Scheme is primarily a toy; using it\nfor anything serious is (right now) ill-advised.\n\nBus Scheme aims for general Scheme usefulness optimized for learning\nand fun. It's loosely targeting R5RS, but varies in huge ways. (For\nthe purposes of this project we pretend that R6RS never happened.) See\nthe file R5RS.diff for ways in which Bus Scheme differs from the\nstandard, both things that are yet unimplemented and things that are\nintentionally different.\n\n== Usage\n\n$ bus # drop into the REPL\n\n$ bus -e \""(do some stuff)\""\n\n$ bus foo.scm # load a file\n\n== Tutorial\n\nSee http://technomancy.us/104 for a \""Getting Started\"" tutorial.\n\n== Contributing\n\nIf you're looking for stuff to do, try \""rake todo\""\n\nPatches are welcome especially if they were written while riding a\nbus. If your daily commute does not involve a bus but you want to\nsubmit a patch, we may be able to work something out regarding code\nwritten on trains, ferries, or perhaps even carpool lanes.\n\nJoin the mailing list to ask questions and discuss:\nhttp://rubyforge.org/mail/?group_id=5094\n\n== What makes Bus Scheme different?\n\nWell, for starters it's implemented on the bus. No other Scheme\nimplementation can claim this. Here are a few other things that set\nBus Scheme apart:\n\n=== Flexible calling syntax\n\nTaking a hint from Arc, Bus Scheme allows you to use the notation\n(mylist n) to access the nth place of the mylist list instead of (nth\nmylist n) or the (myhash key) notation to access the slot in myhash\ncorresponding to the value of key instead of (gethash myhash key). \nTODO: This notation is flexible, and other data types may have\ntheir own \""call behaviour\"" specified.\n\n=== Web functionality\n\nPlanned: Web and RESTful application development are part of the\npackage. Bus Scheme uses the Rack library to allow scheme programs to\nserve web applications. Representations of data can be easily\ntranslated between s-expressions, HTML, and JSON.\n\n=== Written in a high-level language\n\nBus Scheme is written in Ruby, which means anyone with experience in\nhigh-level dynamic languages (like, oh, I don't know... Scheme?)\nshould be right at home poking around at the implementation. Using\nRuby allows the implementation code to remain compact and concise. Bus\nScheme should run on Ruby 1.8, Ruby 1.9, Rubinius, and JRuby at\nleast. Bus Scheme also allows you to drop into Ruby when that's\nconvenient. TODO: allow real inline Ruby blocks instead of access via\na function call.\n\n=== Test-Driven\n\nBus Scheme is written in an entirely test-driven manner. As much as\npossible, it tries to keep its tests written in Scheme itself, so it\nincludes a fairly comprehensive testing suite and encourages programs\nto be written test-first.\n\n== Install\n\n* sudo gem install bus-scheme\n\nFor the source:\n\n* git clone git://github.com/technomancy/bus-scheme.git\n\n== Todo\n\nBus Scheme is currently missing pieces of functionality:\n\n=== Parser\n* multiline strings\n* regular expressions\n\n=== General\n* filter stacktrace\n* continuations\n* macros\n\nFailing tests for some of these are already included (commented out,\nmostly) in the relevant test files.\n\n=== Long Term (post 1.0)\n* web functions (defresource and friends)\n* (lambda (arg1 arg2 . args) body) for rest args\n* string interpolation\n* escape sequences in strings\n* Ruby blocks inline?\n* XML literals?\n* optimize tail call recursion\n* compile to Rubinius bytecode\n* custom call behaviour\n* parse non-decimal base numbers\n* parse rationals, scientific, complex, and polar complex numbers\n\n== Requirements\n\nBus Scheme should run on (at least) Ruby 1.8, Ruby 1.9, Rubinius,\nJRuby. Any support for Windows is entirely accidental.\n\n== Bonus Fact\n\nI haven't actually used a real Scheme yet. Everything I know about it\nI've gathered from reading The Little Schemer, watching the Structure\nand Interpretation of Computer Programs videos, and reading lots about\nCommon Lisp and Emacs Lisp. If there are huge gaping flaws in the\nimplementation, this is likely to be why.\n"""
https://github.com/peterc/switchpipe,"""SwitchPipe 1.05\nBy Peter Cooper\n~~~~ February 10, 2008 (development began January 11, 2008)\nswitchpipe@peterc.org\n\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\n\nTHE LATEST, CANONICAL DOCUMENTATION FOR SWITCHPIPE IS LOCATED AT:\nhttp://groups.google.com/group/switchpipe/web\n\nTHE DOCUMENTATION BELOW IS INCLUDED MERELY TO HELP IF YOU'RE IN A RUSH OR UNABLE \nTO VISIT THE ONLINE VERSION. IT IS INCOMPLETE, SECTIONS MAY BE INACCURATE, AND \nTHE ONLINE DOCUMENTATION EXPLAINS A LOT MORE AND IS MORE UP TO DATE.\n\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\n\n\nWHAT IS SWITCHPIPE?\n-------------------\nOnline @ http://groups.google.com/group/switchpipe/web/introduction-overview\n\nSwitchPipe is a proof of concept \""Web application server.\"" More accurately,\nit's a Web application process manager and request dispatcher / proxy. Backend \nHTTP-speaking applications (Web applications) do not run directly within\nSwitchPipe, but are loaded into their own processes making SwitchPipe language\nand framework agnostic.\n\nSwitchPipe takes control of, and manages, the backend application processes, \nincluding loading and proxying to multiple instances of each application in a\nround-robin style configuration. As an administrator, you can define the maximum\nnumber of backend processes to run for each app, along with other settings so \nthat you do not exceeded preferred resource limits. SwitchPipe quickly removes\nprocesses that \""break\"" or otherwise outlive their welcome. For example, you can\nlet SwitchPipe kill any backend processes that have not been accessed for, say,\n20 seconds. This makes hosting many multiple Rails applications, for example, a\nquick and non-memory demanding process, ideal for shared hosting environments.\n\nSwitchPipe proxies incoming HTTP requests at the TCP level, using information \nextracted from the HTTP request and headers to work out which backend application\nis required to handle the request.\n\nSwitchPipe's goal is to be:\n\n  * super easy to configure\n  * the easiest way to deploy multiple HTTP-talking backend applications\n  * painless in terms of management; no hand-holding of different applications is needed\n  * a permanent daemon that can handle configuration changes in backend apps \""on the fly\""\n  * a reliable solution on Linux and OS/X (and anything POSIX compatible, ideally)\n\n\nQUICK INSTALL / STEPS TO SEEING A QUICK DEMO OF SWITCHPIPE\n----------------------------------------------------------\nOnline @ http://groups.google.com/group/switchpipe/web/installation-instructions\n\nRun the \""demo\"" script from SwitchPipe's base directory:\n  # ./script/demo\n\nThe \""demo\"" script does everything that the manual process below does, except it runs\nSwitchPipe as a daemon temporarily, does one test request, then closes down and\ncleans up.\n\nOR DO IT \""THE MANUAL WAY\"" (preferred by all true hackers)...\n\nInstall dependencies:\n  # sudo gem install daemons eventmachine open4\n\nInstate configuration file:\n  # cp config.yml.example config.yml\n\nMove application configurations for the demo apps into the \""apps\"" directory:\n  # mv demo_apps/*.yml apps/\n\nRun SwitchPipe as an interactive process:\n  # ./script/switchpipe run\n\nVisit these URLs in a browser:\n  http://127.0.0.1:10000/webrick_thing/\n  http://127.0.0.1:10000/python_http_server/ (won't run unless Python is installed)\n  http://127.0.0.1:10000/camping_demo_app/ (won't run unless Camping is installed)\n\nYou should notice SwitchPipe start and manage the relevant processes, killing them\nwhenever the timeouts kick in. Use CTRL+C to break out of SwitchPipe's non-daemonized\nmode. In future use ./script/switchpipe start and ./script/switchpipe stop to start\nand stop SwitchPipe as a daemonized process.\n\nInformation about setting up SwitchPipe as a system service in /etc/init.d, etc, is\navailable within SwitchPipe's online documentation.\n\n\nTHE KEY STEPS TO GETTING STARTED FOR YOUR OWN APPS\n--------------------------------------------------\nOnline @ http://groups.google.com/group/switchpipe/web/setting-up-your-own-webapps-with-switchpipe\n(significantly more up to date than this)\n\n1) Put YAML files into /apps\n\tExample for Rails:\n\t\tpath: /Users/peter/dev/rails/app1\n\t\ttype: mongrel_rails\n\t\tmax_instances: 6\n\t\ttimeout: 60\n\n\tExample for WEBrick / regular app:\n\t\tpath: demo_apps\n\t\tcmd: ruby webrick_thing [[PORT]]\n\t\tsingle_threaded: false\n\n\tExample for Camping:\n\t\tpath: demo_apps\n\t\tcmd: camping -p [[PORT]] camping_demo.rb\n\t\tmax_instances: 1\n\t\ttimeout: 15\n\n2) Make sure config.yml exists, by copying config.yml.example to config.yml and tweaking.\n\n3) Run ./script/switchpipe run  \n   Note: This runs it as a regular process, not daemonized.\n         To daemonize use ./script/switchpipe start and ./script/switchpipe stop\n\n4) Make your main HTTP server (Apache / Nginx / whatever) proxy requests to SwitchPipe at directories with the same name as the YAML files you made.\n\tExample: If your YAML file is some_rails_app.yml, then proxy to http://switchpipe-host.example.com/some_rails_app/\n\t\t\t If your YAML file is acampingapp.yml, then proxy to http://switchpipe-host.example.com/acampingapp/\n\t\t\t\n\tmod_proxy / <VirtualHost> example:\n\t         ProxyPass / http://127.0.0.1:10000/rails_app_name/\n             ProxyPassReverse / http://127.0.0.1:10000/rails_app_name/\n\n    .htaccess example (useful so that Apache can serve static files!):\n             RewriteEngine On\n             RewriteCond %{REQUEST_FILENAME} !-f\n             RewriteRule ^(.*)$ http://127.0.0.1:10000/rails_app_name/$1 [P]\n\n5) Enjoy watching the output of SwitchPipe as it starts and stops backend processes as you access the different apps.\n\n\nEXAMPLE OF ADDING AN APPLICATION\n--------------------------------\nOnline @ http://groups.google.com/group/switchpipe/web/setting-up-your-own-webapps-with-switchpipe\n\nLet's say you've developed a Rails application and you want SwitchPipe to manage it. Just \ncreate a new YAML file in /apps called rails_app_name.yml (or anything, but the base name\nof the file name is used as the app's identifier), and drop in a few lines like so:\n\npath: /path/to/the/rails/app\ntype: mongrel_rails\nmax_instances: 6\ntimeout: 8\n\nRestart SwitchPipe, or merely wait a few seconds until it picks up the new file itself, and\nthe application is made available, with up to six backend processes, in seconds at\na directory just off of SwitchPipe's main URL. For example: http://switchpipe/rails_app_name\n\nYou can deploy Camping, Merb, or even plain old WEBrick apps in the same way. As long\nas it can be run at a prompt, given a specific port to run on, and talk HTTP, SwitchPipe will\ndeploy it. That goes for Ruby and non-Ruby apps.\n\nTo complete the setup, you would then configure your normal Apache, nginx, or other\nmain HTTP daemon to forward requests to a particular domain / virtual host / directory\nthrough to SwitchPipe at the relevant folder. For example, from Apache <Virtualhost>\ndirectives:\n\n  ProxyPass / http://127.0.0.1:10000/rails_app_name/\n  ProxyPassReverse / http://127.0.0.1:10000/rails_app_name/\n\nAn even better way to do it, if possible, is from a .htaccess file. Example:\n\n  RewriteEngine On\n  RewriteCond %{REQUEST_FILENAME} !-f\n  RewriteRule ^(.*)$ http://127.0.0.1:10000/rails_app_name/$1 [P]\n\nThe benefit of this technique is that static files can be served up by Apache at usual\nbreakneck speed!\n\nNo more port numbers. No more setting up individual clusters for different apps. No\nmore worrying about how different frameworks handle clustering. Hurrah!\n\nNote that a \""hostname\"" config variable can also be used on applications to serve up the\napplication through SwitchPipe DIRECTLY. This means you can serve up apps WITHOUT Apache\nor Nginx in front of SwitchPipe!\n\n\nTO DOS\n------\nOnline @ http://groups.google.com/group/switchpipe/web/todos-limitations\n\n * Improve error handling\n * Web-accessible status / information URL\n * Caching (potentially)\n * Test suite\n * Test SwitchPipe on more platforms and architectures (OS X and Linux on i386/686 tested so far)\n * Improve documentation and Web site\n * Stream HTTP message bodies over a certain size to backend apps rather than buffer the whole lot in SwitchPipe\n   (this becomes a necessity when dealing with huge HTTP uploads, say)\n\nCONTRIBUTORS\n------------\n\n - Peter Cooper is / was the primary developer of SwitchPipe (so far).\n - Jason Stirk provided a key patch in April 2008 that resolved hanging issues.\n - Mike Auclair provided a fix so that trailing slashes are not necessary on app names\n\n\""LICENSE\""\n---------\nOnline @ http://groups.google.com/group/switchpipe/web/licensing-information\n\nThis work is hereby released into the Public Domain. To view a copy of the public \ndomain dedication, visit http://creativecommons.org/licenses/publicdomain/ or send\na letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, \nCalifornia, 94105, USA.\n\nSwitchPipe is distributed and made available with the freedoms of the\npublic domain, but with a stern reminder to be ethical.\n\nThis software / content / other work is released into the public \ndomain. Do what you want with it, but may your conscience and \nmoral compass encourage you to be a good guy (or gal). Being good means:\n\n * Not using the same, identical name or title for any substantially\n   different or derived works in such a way that confusion could be\n   caused amongst other users.\n\n * Providing the original author(s) with feedback, notices, patches\n   or credit relating to further extended usage of the work. It's\n   only the decent thing to do.\n\nTHE WORK IS PROVIDED \""AS IS\"", WITHOUT WARRANTY OF ANY KIND, \nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES\nOR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR \nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\nOR THE USE OR OTHER DEALINGS IN THIS WORK.\n\nNote: If you or your company REQUIRES a license for SwitchPipe (e.g.\ncompany policy), Peter Cooper can prove you with one for a fee. Contact\ndetails can be found at http://www.petercooper.co.uk/. The same applies\nto anyone who wishes to support Peter Cooper in his work on SwitchPipe.\nThank you.\n"""
https://github.com/jnicklas/rorem,"""Rorem\n=====\n\nRorem is a random data generator that automatically fill Ruby classes with Random data, here's how:\n\n\n  class Car\n  \n    include Rorem::Model\n  \n    attr_accessor :brand, :seats, :owner_name, :owner_age, :special_car\n    \n  end\n  \n  Car.factory do |car|\n  \n    # all brands are equality likely\n    car.brand = random(%w(BMW Mercedes Volvo Jaguar))\n    \n    # assign probabilities to each value\n    car.seats = random([2, 4], :distribution => [0.2, 0.8])\n    \n    # use a normal distribution to describe probabilities\n    car.owner_age = random(18..70, :distribution => normal(40, 15))\n    \n    # generate a name from rorem's database of names\n    car.owner_name = random(:name\n    \n    # a deterministic value can be set\n    car.special_car false\n  \n  end\n  \n  c = Car.new\n  \n  c.fill\n  \n  c.brand #=> 'BMW'\n  c.seats #=> 4\n  c.owner_age #=> 27\n  c.owner_name #=> 'Allan Hernandez'\n  c.special_car #=> false\n  \nanother (more complex) example\n\n  class Employee\n  \n    include Rorem::Model\n    \n    attr_accessor :first_name, :last_name, :email, :employee_nr, :empolyee_id, :address, :city, :country\n  \n  end\n  \n  Employee.factory do\n  \n    c.employee_nr = sequence(:employee_nr, :start => 1)\n  \n    person = random(:person, :unique => true)\n    location = random(:location)\n  \n    c.first_name = person.first_name\n    c.last_name = person.last_name\n    c.email = person.email\n    c.address = location.address\n    c.city = location.city\n    c.country = location.country\n    \n    c.employee_id = c.first_name[1..3] + c.last_name[1..4] + c.employee_nr.to_s\n    \n  \n  \n  end\n\n"""
https://github.com/hornbeck/blerb-core,"""= Welcome to Blerb!\n\n== Installation\n  * from your working directory, say ~/code/, clone the blerb repository:\n  * git clone git://github.com/hornbeck/blerb-core.git - anon checkout\n  * git clone git@github.com:hornbeck/blerb-core.git   - commit access\n  * cd blerb-core\n  * use script/install to update or install merb-* in the parent directory (e.g. ~/code/merb-core/):\n  * script/install_merb\n  * cp config/database.sample.yml config/database.yml\n  * fill in the correct database credentials\n  * cp config/settings.sample.yml config/settings.yml\n  * fill in the correct blog settings\n  * rake dm:auto_migrate\n  * to start a webserver, run the merb command:\n  * merb\n\nBlerb should now be running on port 4000, so open up your browser and visit localhost:4000!\n\n== Dependencies (versions tested)\n\n\nmerb-core         (0.9)\nmerb-more         (0.9.0)\nmerb-action-args  (0.9.0)\nmerb-assets       (0.9.0)\nmerb-mailer       (0.9.1)\nmerb-test         (0.9.0)\nmerb_datamapper   (0.9.0)\nmerb_helpers      (0.9.0)\nmerb_rspec        (0.9.0)\ndatamapper        (0.3.0)\nrspec             (1.1.3)\ndo_yourdbhere     (varies)\n\n"""
https://github.com/up_the_irons/ebay4r,"""=================\nWelcome to eBay4R\n=================\n\n:Author: Garry Dolley\n:Date: 03-28-2008\n:Version: v1.1\n:eBay API: 583\n\neBay4R is a Ruby wrapper for eBay's Web Services SOAP API (v583). Emphasis is\non ease of use and small footprint.\n\nPlease report bugs and other problems, see \""Author\"" section at the bottom.\n\nCurrent release can be downloaded from:\n\nhttp://rubyforge.org/projects/ebay4r\n\nThe latest code is available at both RubyForge and GitHub:\n\n  * git://rubyforge.org/ebay4r.git\n  * git://github.com/up_the_irons/ebay4r.git\n\n\nRequirements\n------------\n\n* SOAP4R library v1.5.7 or newer.  The specific version I'm using for testing\n  is soap4r-1.5.7.90.20070921.\n\n\nOptionals\n---------\n\n* RubyGems\n\n\nInstallation\n------------\n\ntar/gzip\n~~~~~~~~\n\nJust unzip the archive anywhere you like, and see \""Getting Started\"" below \n(you will need to add the ebay4r/lib path to your $RUBYLIB environment\nvariable)\n\nRubyGems\n~~~~~~~~\n\n* To install a gem you already downloaded::\n  \n    gem install ebay-<version>.gem\n\n* For the latest release with no fuss (previous download not required)::\n  \n    gem install -r ebay\n\nGit\n~~~\n\nYou can download the latest and greatest code using Git, just type::\n\n  git clone git://github.com/up_the_irons/ebay4r.git\n\n\nImportant Note about Using eBay4R and Ruby on Rails\n---------------------------------------------------\n\nIf you installed SOAP4R as a gem you must put the following two lines at the\nvery top of your config/environment.rb::\n\n  require 'rubygems'\n  gem 'soap4r'\n\nThis must be done before Rails starts auto-loading things.\n\nAdditionally, you have to put those two lines in *every* Rails app you have\non your machine, even if it doesn't use SOAP4R!  This is, allegedly, because\nActiveSupport (in dependency.rb) wrongly loads the SOAP4R included with Ruby\ninstead of your Gem.  More details can be found here:\n\n  http://dev.ctor.org/soap4r/ticket/433\n\nIf you get this error, or similar, in every Rails app::\n\n  [...]/activesupport-1.4.2/lib/active_support/dependencies.rb:477:in `const_missing': uninitialized constant XSD::NS::KNOWN_TAG (NameError?)\n\nyou've hit this problem.\n\n\nGetting Started\n---------------\n\nIf you installed eBay4R from a tarball or git repo, you will want to add the\nebay4r/lib directory to your Ruby include path ($RUBYLIB).  Then put\n\n::\n\n  require 'eBayAPI'\n \nat the top of your programs.\n\nIf you installed eBay4R with RubyGems, you don't have to add anything to\nRuby's include path, just put\n\n::\n\n  require 'rubygems'\n  gem 'ebay'\n\nat the top of your programs.\n\nExamples\n--------\n\nLook at the examples/ directory.  Edit the file myCredentials.rb and insert\nthe appropriate values.  Then you can run any of the example programs.\n\nHello, World!\n~~~~~~~~~~~~~\n\nThe simplest eBay API call is \""GeteBayOfficialTime\"".  Here's how to call it\nwith eBay4R::\n\n  require 'rubygems'\n  gem 'ebay'\n\n  # Put your credentials in this file\n  load('myCredentials.rb')\n\n  # Create new eBay caller object.  Omit last argument to use live platform.\n  eBay = EBay::API.new($authToken, $devId, $appId, $certId, :sandbox => true)\n\n  resp = eBay.GeteBayOfficialTime\n\n  puts \""Hello, World!\""\n  puts \""The eBay time is now: #{resp.timestamp}\""\n\n  # Wasn't that easy?!\n\nAdding an Item\n~~~~~~~~~~~~~~\n\nThis is a more complex example that performs a real (useful) function::\n\n  require 'rubygems'\n  gem 'ebay'\n\n  load('myCredentials.rb')\n\n  eBay = EBay::API.new($authToken, $devId, $appId, $certId, :sandbox => true)\n\n  # Notice how we nest hashes to mimic the XML structure of an AddItem request\n  resp = eBay.AddItem(:Item => EBay.Item(:PrimaryCategory => EBay.Category(:CategoryID => 57882),\n                                         :Title => 'Mouse Pad',\n                                         :Description => 'A really cool mouse pad, you know you want it...',\n                                         :Location => 'On Earth',\n                                         :StartPrice => '12.0',\n                                         :Quantity => 1,\n                                         :ListingDuration => \""Days_7\"",\n                                         :Country => \""US\"",\n                                         :Currency => \""USD\"",\n                                         :PaymentMethods => [\""VisaMC\"", \""PersonalCheck\""]))\n\n  puts \""New Item #\"" + resp.itemID + \"" added.\""\n\n\nDon't worry too much about EBay.Item and EBay.Category calls for now, they are\nexplained in the \""Creating Complex Data Types\"" section below.\n\n\nFormat of Requests\n~~~~~~~~~~~~~~~~~~\n\nIf ``eBay`` is your caller object, then you can issue any eBay API call\nby doing::\n\n  eBay.<call_name>( ... hash of named-arguments ... )\n\nFor example, to issue the GetItem call for Item #4503432058 and return all\ninformation, you do::\n\n  eBay.GetItem(:DetailLevel => 'ReturnAll', :ItemID => '4503432058')\n\nor to see your last invoice using the GetAccount call, you do::\n\n  eBay.GetAccount(:AccountHistorySelection => 'LastInvoice')\n\nSee the \""eBay Web Services SOAP API Guide\"" for acceptable parameters and values\nfor each API call.  This guide can be downloaded at eBay's \n`SOAP Development Center <http://developer.ebay.com/soap/>`_.\n\nCreating Complex Data Types\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA number of elements in eBay's schema are XML Schema simple types.  For\nexample, CategoryID, Title, and Description are all strings.  But many \nelements, like Item and Seller, are of types \""ItemType\"" and \""SellerType\"", \nrespectively.  These are complex data types, meaning they are structures\ncomposed of collections of simple types.\n\n\""How do I make a complex type object?\"", you ask.  Simple::\n\n  EBay.<element_name>( ... hash of named-arguments ... )\n\ncreates a new `<element_name>` element of type ``<element_name>Type``.  For\nexample,\n\n::\n\n  EBay.Item(:Title => 'Mouse Pad', :Description => '...')\n\ncreates a new ``ItemType`` object.  Please note, these factory methods are class\nmethods of module EBay, so the upper-case \""E\"" in \""EBay\"" is not a typo.  A\nmore common way to see this is::\n\n  EBay::Item( ... )\n\nThe only difference is if you do not pass any arguments to the factory method\nand do not explicitly put empty parentheses (), Ruby will assume it is a \nconstant, not a method.\n\nSetting XML Attributes\n~~~~~~~~~~~~~~~~~~~~~~\n\nThe symbol you use to set an XML attribute on an element is::\n\n  :xmlattr_<attribute_name>\n\nFor example, to create a <Label> element (corresponding to eBay's LabelType)\nwith an attribute of \""visible\"" equal to \""true\"", you would do::\n\n  EBay.Label(:Name => \""some string\"", :xmlattr_visible => true)\n\n\nFormat of Responses\n~~~~~~~~~~~~~~~~~~~\n\nThere is a one-to-one correspondence between the XML returned by eBay and the\nway you access the values contained therein using the response object returned\nby the call.  For example, let's say you issued a \""GetItem\"" call::\n  \n  resp = eBay.GetItem(:DetailLevel => 'ReturnAll', :ItemID => '4503432058')\n\nand eBay returned the following XML (abbreviated where appropriate)::\n\n  <?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n  <soapenv:Envelope xmlns:soapenv=\""http://schemas.xmlsoap.org/soap/envelope/\"" \n                    xmlns:xsd=\""http://www.w3.org/2001/XMLSchema\"" \n                    xmlns:xsi=\""http://www.w3.org/2001/XMLSchema-instance\"">\n   <soapenv:Body>\n    <GetItemResponse xmlns=\""urn:ebay:apis:eBLBaseComponents\"">\n     <Timestamp>2005-12-09T09:40:41.602Z</Timestamp>\n     <Ack>Success</Ack>\n     <Version>437</Version>\n     <Build>e437_core_Bundled_2119808_R1</Build>\n     <Item>\n      ...\n\n      <AutoPay>false</AutoPay>\n      <BuyerProtection>ItemIneligible</BuyerProtection>\n      <BuyItNowPrice currencyID=\""USD\"">0.0</BuyItNowPrice>\n      <Country>US</Country>\n      <Currency>USD</Currency>\n      <Description>Fund. of Physics, 5th, by Halliday, Resnick, Walker</Description>\n      <Escrow>None</Escrow>\n      <GiftIcon>0</GiftIcon>\n      ...\n\n      <ShipToLocations>US</ShipToLocations>\n      <ShipToLocations>CA</ShipToLocations>\n     </Item>\n    </GetItemResponse>\n   </soapenv:Body>\n  </soapenv:Envelope>\n\n\nThe \""resp\"" object is of type\n  \n  SOAP::Mapping::Object\n\nand contains all the XML elements between ``<GetItemResponse> ... </GetItemResponse>``.\n\nSo, if you want to print the item description, just do::\n\n  puts resp.item.description\n\nand you will see::\n  \n  \""Fund. of Physics, 5th, by Halliday, Resnick, Walker\""\n\nRepeated XML elements automatically become arrays of the same name, so to see\nall the locations this item can ship to, just do::\n\n  resp.item.shipToLocations.each { |loc| puts loc }\n\nand you will see::\n\n  US\n  CA\n\nIt's that easy! (Are any Java or C# developers reading this?  Don't be\njealous... ;)\n\nA Note about Case\n~~~~~~~~~~~~~~~~~\n\nAstute readers (all of you, right?) will notice that the first letter of every\nelement contained within the response object is lower-case, even though in the\nXML it is upper-case.  This is currently the way things are and you will have\nto remember to lower the first character in your code.  \n\nRuby's convention is that only classes, modules, and constants begin with \nupper-case letters.  The author of the SOAP4R library (which contains \nwsdl2ruby.rb) respected this convention, and as a result, the eBay.rb \nfile I use (generated from eBay's WSDL) has this mapping.\n\nI haven't come up with any Ruby magic to dynamically allow upper-case first\ncharacters to work also, so if you happen to want to take a crack at it and\nget it working, please send me your patches (see \""Author\"" section at the \nbottom).\n\nPlease note, the opposite does _not_ apply.  That is, you can *submit* a call\nusing either case of the first character, and your arguments can also have\neither case letter first.  For example, this::\n\n  resp = eBay.GetItem(:DetailLevel => 'ReturnAll', :ItemID => '4503432058')\n\nis the same as::\n\n  resp = eBay.getItem(:detailLevel => 'ReturnAll', :itemID => '4503432058')\n\n\nDebugging\n---------\n\nIf \""eBay\"" is your eBay caller object, as in::\n\n  eBay = EBay::API.new( ... )\n\nYou can see XML wiredumps by doing::\n\n  eBay.debug = true\n\nbefore you issue any eBay API calls.  This is useful to see the raw XML of\nwhat eBay is sending back to you.\n\n\nFiles\n-----\n\ncontrib/\n  Extras contributed by the community (myself included)\n\nexamples/\n  Examples of eBay API calls using this library. You will want to check out\n  these examples before making your own calls.\n\nlib/eBayAPI.rb\n  The heart of this library\n\nlib/eBayDriver.rb\n  Autogenerated by wsdl2ruby.rb\n\nlib/eBay.rb\n  Autogenerated by wsdl2ruby.rb\n\nlib/RequesterCredentialsHandler.rb\n  Helper for generating the eBay Authentication header for each call\n\ntest/\n  Unit and functional tests\n\n\nTo Do\n-----\n\n* Add many more examples\n* Add more unit and functional tests\n\n\nAuthor\n------\n\nGarry C. Dolley\n\ngdolley [at] NOSPAM- ucla.edu\n\nAIM: garry97531\n\nIRC: up_the_irons in #ram, #git, #caboose on Freenode (and usually many other\nchannels)\n\n\nFormatting\n----------\n\nI've dropped RDoc formatting for this README.  Headings never looked like\nheadings to me, which was annoying.\n\nThis README is formatted in reStructredText [RST]_.  It has the best\ncorrelation between what a document looks like as plain text vs. its\nformatted output (HTML, LaTeX, etc...).  What I like best is, markup doesn't\nlook like markup, even though it is.\n\n.. [RST] http://docutils.sourceforge.net/rst.html\n\nCopyright\n---------\n\nCopyright (c) 2005,2006,2007,2008 Garry C. Dolley\n\neBay4R is free software; you can redistribute it and/or modify it under the\nterms of the GNU General Public License as published by the Free Software\nFoundation; either version 2 of the License, or (at your option) any later \nversion.\n\neBay4R is distributed in the hope that it will be useful, but WITHOUT ANY\nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\nFOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\ndetails.\n\nYou should have received a copy of the GNU General Public License along with\neBay4R; if not, write to the Free Software Foundation, Inc., 51 Franklin\nStreet, Fifth Floor, Boston, MA  02110-1301, USA\n\n"""
https://github.com/chneukirchen/gitsum,"""= gitsum.el --- basic darcsum feelalike for Git\n\nCopyright (C) 2008  Christian Neukirchen <purl.org/net/chneukirchen>\nLicensed under the same terms as Emacs.\n\nGitsum provides a mode to do interactive partial commits with Emacs.\nRun `M-x gitsum' inside a Git repository and kill everything you don't\nwant to commit with `k'.  You can navigate easily between hunks with\n`n' and `p' and between files with `N' and `P'.  A whole file can be\nkilled with `K'.  If you want to refine the patch, you can split it\nwith `C-c C-s'.  If you toggle read-only with `C-x C-q', you can edit\neverything freely (be careful!).\n\nIf you are ready, commit the patch with `C-c C-c' or just `c'.\nEnter the message and press `C-c C-c' again.\n\nN.B: If you want to add files in the commit, use `M-x git-status' from\ngit.el, add the files with `a', then switch to gitsum with `s'.  You\ncan only add files as a whole.  You need git.el from the git\nrepository then.\n\n\nRepository: http://github.com/chneukirchen/gitsum\n             git://github.com/chneukirchen/gitsum.git\nPatches to: chneukirchen@gmail.com\n"""
https://github.com/brosner/django-mptt,"""===========\nDjango MPTT\n===========\n\nUtilities for implementing Modified Preorder Tree Traversal with your\nDjango Models and working with trees of Model instances.\n\nFor installation instructions, see the file \""INSTALL\"" in this\ndirectory; for instructions on how to use this application, and on what\nit provides, see the file \""overview.txt\"" in the \""docs/\"" directory.\n"""
https://github.com/wayneeseguin/sequel-model,"""== Sequel: Concise ORM for Ruby\n\nSequel is an ORM framework for Ruby. Sequel provides thread safety, connection pooling, and a concise DSL for constructing queries and table schemas.\n\nSequel makes it easy to deal with multiple records without having to break your teeth on SQL.\n\n== Resources\n\n* {Project page}[http://code.google.com/p/ruby-sequel/]\n* {Source code}[http://ruby-sequel.googlecode.com/svn/]\n* {Bug tracking}[http://code.google.com/p/ruby-sequel/issues/list]\n* {Google group}[http://groups.google.com/group/sequel-talk]\n* {RubyForge page}[http://rubyforge.org/projects/sequel/]\n\nTo check out the source code:\n  \n  svn co http://ruby-sequel.googlecode.com/svn/trunk\n  \n=== Contact\n\nIf you have any comments or suggestions please send an email to ciconia at gmail.com and I'll get back to you.\n\n== Installation\n\n  sudo gem install sequel\n  \n== Supported Databases\n\nSequel currently supports:\n\n* ADO (on Windows)\n* DBI\n* Informix\n* MySQL\n* ODBC\n* Oracle\n* PostgreSQL\n* SQLite 3\n\nThere are also experimental adapters for DB2, OpenBase and JDBC (on JRuby).\n\n== The Sequel Console\n\nSequel includes an IRB console for quick'n'dirty access to databases. You can use it like this:\n\n  sequel sqlite:///test.db\n\nYou get an IRB session with the database object stored in DB.\n\n== An Introduction\n\nSequel was designed to take the hassle away from connecting to databases and manipulating them. Sequel deals with all the boring stuff like maintaining connections, formatting SQL correctly and fetching records so you can concentrate on your application.\n\nSequel uses the concept of datasets to retrieve data. A Dataset object encapsulates an SQL query and supports chainability, letting you fetch data using a convenient Ruby DSL that is both concise and infinitely flexible.\n\nFor example, the following one-liner returns the average GDP for the five biggest countries in the middle east region:\n\n  DB[:countries].filter(:region => 'Middle East').reverse_order(:area).limit(5).avg(:GDP)\n  \nWhich is equivalent to:\n\n  SELECT avg(GDP) FROM countries WHERE region = 'Middle East' ORDER BY area DESC LIMIT 5\n\nSince datasets retrieve records only when needed, they can be stored and later reused. Records are fetched as hashes (they can also be fetched as custom model objects), and are accessed using an Enumerable interface:\n\n  middle_east = DB[:countries].filter(:region => 'Middle East')\n  middle_east.order(:name).each {|r| puts r[:name]}\n  \nSequel also offers convenience methods for extracting data from Datasets, such as an extended map method:\n\n  middle_east.map(:name) #=> ['Egypt', 'Greece', 'Israel', ...]\n  \nOr getting results as a transposed hash, with one column as key and another as value:\n\n  middle_east.to_hash(:name, :area) #=> {'Israel' => 20000, 'Greece' => 120000, ...}\n\nMuch of Sequel is still undocumented (especially the part relating to model classes). The following section provides examples of common usage. Feel free to explore...\n\n== Getting Started\n\n=== Connecting to a database\n\nTo connect to a database you simply provide Sequel with a URL:\n\n  require 'sequel'\n  DB = Sequel.open 'sqlite:///blog.db'\n  \nThe connection URL can also include such stuff as the user name and password:\n\n  DB = Sequel.open 'postgres://cico:12345@localhost:5432/mydb'\n\nYou can also specify optional parameters, such as the connection pool size, or a logger for logging SQL queries:\n\n  DB = Sequel.open(\""postgres://postgres:postgres@localhost/my_db\"",\n    :max_connections => 10, :logger => Logger.new('log/db.log'))\n\n=== Arbitrary SQL queries\n\n  DB.execute(\""create table t (a text, b text)\"")\n  DB.execute(\""insert into t values ('a', 'b')\"")\n\nOr more succinctly:\n\n  DB << \""create table t (a text, b text)\""\n  DB << \""insert into t values ('a', 'b')\""\n\n=== Getting Dataset Instances\n\nDataset is the primary means through which records are retrieved and manipulated. You can create an blank dataset by using the dataset method:\n\n  dataset = DB.dataset\n\nOr by using the from methods:\n\n  posts = DB.from(:posts)\n\nYou can also use the equivalent shorthand:\n\n  posts = DB[:posts]\n\nNote: the dataset will only fetch records when you explicitly ask for them, as will be shown below. Datasets can be manipulated to filter through records, change record order and even join tables, as will also be shown below.\n\n=== Retrieving Records\n\nYou can retrieve records by using the all method:\n\n  posts.all\n\nThe all method returns an array of hashes, where each hash corresponds to a record.\n\nYou can also iterate through records one at a time:\n\n  posts.each {|row| p row}\n\nOr perform more advanced stuff:\n\n  posts.map(:id)\n  posts.inject({}) {|h, r| h[r[:id]] = r[:name]}\n  \nYou can also retrieve the first record in a dataset:\n\n  posts.first\n  \nOr retrieve a single record with a specific value:\n\n  posts[:id => 1]\n  \nIf the dataset is ordered, you can also ask for the last record:\n\n  posts.order(:stamp).last\n  \n=== Filtering Records\n\nThe simplest way to filter records is to provide a hash of values to match:\n\n  my_posts = posts.filter(:category => 'ruby', :author => 'david')\n  \nYou can also specify ranges:\n\n  my_posts = posts.filter(:stamp => (2.weeks.ago)..(1.week.ago))\n  \nOr lists of values:\n\n  my_posts = posts.filter(:category => ['ruby', 'postgres', 'linux'])\n  \nSequel now also accepts expressions as closures, AKA block filters:\n\n  my_posts = posts.filter {:category == ['ruby', 'postgres', 'linux']}\n  \nWhich also lets you do stuff like:\n\n  my_posts = posts.filter {:stamp > 1.month.ago}\n  \nSome adapters (like postgresql) will also let you specify Regexps:\n\n  my_posts = posts.filter(:category => /ruby/i)\n  \nYou can also use an inverse filter:\n\n  my_posts = posts.exclude(:category => /ruby/i)\n\nYou can then retrieve the records by using any of the retrieval methods:\n\n  my_posts.each {|row| p row}\n  \nYou can also specify a custom WHERE clause:\n\n  posts.filter('(stamp < ?) AND (author <> ?)', 3.days.ago, author_name)\n\nDatasets can also be used as subqueries:\n\n  DB[:items].filter('price > ?', DB[:items].select('AVG(price) + 100'))\n\n=== Summarizing Records\n\nCounting records is easy:\n  posts.filter(:category => /ruby/i).count\n\nAnd you can also query maximum/minimum values:\n  max_value = DB[:history].max(:value)\n  \nOr calculate a sum:\n  total = DB[:items].sum(:price)\n  \n=== Ordering Records\n\n  posts.order(:stamp)\n  \nYou can also specify descending order\n\n  posts.order(:stamp.DESC)\n\n=== Deleting Records\n\n  posts.filter('stamp < ?', 3.days.ago).delete\n  \n=== Inserting Records\n\n  posts.insert(:category => 'ruby', :author => 'david')\n  \nOr alternatively:\n\n  posts << {:category => 'ruby', :author => 'david'}\n  \n=== Updating Records\n\n  posts.filter('stamp < ?', 3.days.ago).update(:state => 'archived')\n\n=== Joining Tables\n\nJoining is very useful in a variety of scenarios, for example many-to-many relationships. With Sequel it's really easy:\n\n  order_items = DB[:items].join(:order_items, :item_id => :id).\n    filter(:order_items__order_id => 1234)\n  \nThis is equivalent to the SQL:\n\n  SELECT * FROM items LEFT OUTER JOIN order_items\n  ON order_items.item_id = items.id \n  WHERE order_items.order_id = 1234\n\nYou can then do anything you like with the dataset:\n\n  order_total = order_items.sum(:price)\n  \nWhich is equivalent to the SQL:\n\n  SELECT sum(price) FROM items LEFT OUTER JOIN order_items\n  ON order_items.item_id = items.id\n  WHERE order_items.order_id = 1234\n  \n"""
https://github.com/bs/starling,"""= Name\n\nStarling - a light weight server for reliable distributed message passing.\n\n= Synopsis\n\n  # Start the Starling server as a daemonized process:\n  starling -h 192.168.1.1 -d\n\n  # Put messages onto a queue:\n  require 'memcache'\n  starling = MemCache.new('192.168.1.1:22122')\n  starling.set('my_queue', 12345)\n\n  # Get messages from the queue:\n  require 'memcache'\n  starling = MemCache.new('192.168.1.1:22122')\n  loop { puts starling.get('my_queue') }\n\n  # See the Starling documentation for more information.\n\n= Description\n\nStarling is a powerful but simple messaging server that enables reliable \ndistributed queuing with an absolutely minimal overhead. It speaks the\nMemCache protocol for maximum cross-platform compatibility. Any language\nthat speaks MemCache can take advantage of Starling's queue facilities.\n\n= Known Issues\n\n* Starling is \""slow\"" as far as messaging systems are concerned. In practice,\n  it's fast enough.\n\n= Authors\n\nBlaine Cook <romeda@gmail.com>\n\n= Copyright\n\nStarling - a light-weight server for reliable distributed message passing.\nCopyright 2007 Blaine Cook <blaine@twitter.com>, Twitter Inc.\n\n<<to be completed>>\n"""
https://github.com/josh/rails,"""## Welcome to Rails\n\nRails is a web-application framework that includes everything needed to\ncreate database-backed web applications according to the\n[Model-View-Controller (MVC)](http://en.wikipedia.org/wiki/Model-view-controller)\npattern.\n\nUnderstanding the MVC pattern is key to understanding Rails. MVC divides your\napplication into three layers, each with a specific responsibility.\n\nThe _Model layer_ represents your domain model (such as Account, Product,\nPerson, Post, etc.) and encapsulates the business logic that is specific to\nyour application. In Rails, database-backed model classes are derived from\n`ActiveRecord::Base`. Active Record allows you to present the data from\ndatabase rows as objects and embellish these data objects with business logic\nmethods. You can read more about Active Record in its [README](activerecord/README.rdoc).\nAlthough most Rails models are backed by a database, models can also be ordinary\nRuby classes, or Ruby classes that implement a set of interfaces as provided by\nthe Active Model module. You can read more about Active Model in its [README](activemodel/README.rdoc).\n\nThe _Controller layer_ is responsible for handling incoming HTTP requests and\nproviding a suitable response. Usually this means returning HTML, but Rails controllers\ncan also generate XML, JSON, PDFs, mobile-specific views, and more. Controllers load and\nmanipulate models, and render view templates in order to generate the appropriate HTTP response.\nIn Rails, incoming requests are routed by Action Dispatch to an appropriate controller, and\ncontroller classes are derived from `ActionController::Base`. Action Dispatch and Action Controller\nare bundled together in Action Pack. You can read more about Action Pack in its\n[README](actionpack/README.rdoc).\n\nThe _View layer_ is composed of \""templates\"" that are responsible for providing\nappropriate representations of your application's resources. Templates can\ncome in a variety of formats, but most view templates are HTML with embedded\nRuby code (ERB files). Views are typically rendered to generate a controller response,\nor to generate the body of an email. In Rails, View generation is handled by Action View.\nYou can read more about Action View in its [README](actionview/README.rdoc).\n\nActive Record, Action Pack, and Action View can each be used independently outside Rails.\nIn addition to them, Rails also comes with Action Mailer ([README](actionmailer/README.rdoc)), a library\nto generate and send emails; Active Job ([README](activejob/README.md)), a\nframework for declaring jobs and making them run on a variety of queueing\nbackends; and Active Support ([README](activesupport/README.rdoc)), a collection\nof utility classes and standard library extensions that are useful for Rails,\nand may also be used independently outside Rails.\n\n## Getting Started\n\n1. Install Rails at the command prompt if you haven't yet:\n\n        gem install rails\n\n2. At the command prompt, create a new Rails application:\n\n        rails new myapp\n\n   where \""myapp\"" is the application name.\n\n3. Change directory to `myapp` and start the web server:\n\n        cd myapp\n        rails server\n\n   Run with `--help` or `-h` for options.\n\n4. Using a browser, go to `http://localhost:3000` and you'll see:\n\""Welcome aboard: You're riding Ruby on Rails!\""\n\n5. Follow the guidelines to start developing your application. You may find\n   the following resources handy:\n    * [Getting Started with Rails](http://guides.rubyonrails.org/getting_started.html)\n    * [Ruby on Rails Guides](http://guides.rubyonrails.org)\n    * [The API Documentation](http://api.rubyonrails.org)\n    * [Ruby on Rails Tutorial](http://www.railstutorial.org/book)\n\n## Contributing\n\nWe encourage you to contribute to Ruby on Rails! Please check out the\n[Contributing to Ruby on Rails guide](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for guidelines about how to proceed. [Join us!](http://contributors.rubyonrails.org)\n\n## Code Status\n\n[![Build Status](https://travis-ci.org/rails/rails.svg?branch=master)](https://travis-ci.org/rails/rails)\n\n## License\n\nRuby on Rails is released under the [MIT License](http://www.opensource.org/licenses/MIT).\n"""
https://github.com/collectiveidea/imap_authenticatable,"""IMAPAuthenticatable\n===================\n\nA quick library for authenticating against an IMAP server.\n\nSee http://daniel.collectiveidea.com/blog/tags/imap_authenticatable for more info.\n\nIt expects a model with a 'username' column. You must pass a host.\n\nExample:\n\nclass User < ActiveRecord::Base\n  imap_authenticatable :host => 'mail.example.com'\n  \n  ...\nend\n\n\nother options:\n\t:allow_new_users => true/false\n\t\tAlters whether to use find_by_username or find_or_create_by_username.\n\t\tThe default is true (find or create).\n\t:default_domain => 'example.com'\n\t\tWhat usernames have at the end.\n\t\tDefaults to the :host option.\n\t:append_domain => false/true\n\t\tShould we always add or remove the default_domain (with preceding '@) value?\n\t\tThe default is false (always remove).\n\t:ssl => false/true\n\t  Sets whether to connect via SSL (TLS).  You must have OpenSSL installed.\n\t  Defaults to false.\n\t:port => 143\n\t  Sets the port.  The :ssl option will set the port automatically unless you override it.\n\t  Defaults to 143 if :ssl => false, 993 if :ssl => true\n\t\t\n\nOther options may be added as need arises.\n\n\nTesting:\n\nTo mock the IMAP login in your tests, add the following line to the top of your test_helper.rb\n  require File.join(File.dirname(__FILE__), '..', 'vendor', 'plugins', 'imap_authenticatable', 'test', 'mocks', 'imap.rb')\n\nThis mock makes the valid password the reverse of the username (username.reverse)."""
https://github.com/drnic/javascript-unittest-tmbundle,"""JavaScript Unit Testing TextMate bundle\n\nA set of snippets for using prototypejs' unittest.js test suite."""
https://github.com/sr/ape,"""== Atom Protocol Exerciser (APE)\n\nAPE is a sanity-checker for implementations of the Atom Publishing Protocol (AtomPub or APP). It is written in Ruby,\nand provides a Mongrel-based HTML interface describing its interactions with the APP implementation under test.\n\nFor more information about the history and impetus for the creation of APE, see Tim Bray's account here[http://www.tbray.org/ongoing/When/200x/2006/08/11/Meet-the-Ape].\n  \n== License\n\nCopyright (c) 2006 Sun Microsystems, Inc. All rights reserved. See the included LICENSE[link:/files/LICENSE.html] file for details.\n\n== Quick Start\n\nInstall APE via RubyGems:\n\n $ gem install ape\n \nNow, you should have the ape_server command available in your $PATH. Start the server with:\n\n $ ape_server\n \nThis will start the server in the foreground. You can access APE in your browser at http://localhost:4000\n\n== The Source\n\nTo access the latest source code for APE, see the project site at https://rubyforge.org/projects/ape\n"""
https://github.com/cdcarter/backpacking,"""# Backpacking: Io-powered web framework #\n\nInspired by the simplicity of other web frameworks, and the awesome\nmetaprogramming power of Io, Chris Carter set out to recreate nails,\nhammer and toolbox.\n\nHere it is: the wheel, recreated in Io. \n\n* both DBRMS- and ORM-agnostic \n* simple template system\n* MIT-licensed, yours to fiddle with\n\n## Run it ##\n\n  $ io\n\nWill start a server on port 8000 per default.\n\n## Get the source code ##\n\ngit clone git://github.com/cdcarter/backpacking.git\n\n## Co-creators ##\n\nChris Carter\nIan Ownbey (the View system, among other things)\nOlle Jonsson (this Readme)\n\n## Read more ##\n\nhttp://iolanguage.com/"""
https://github.com/collectiveidea/awesomeness,"""Collective Idea's Awesomeness\n=============================\n\nA collection of stuff that we use often, but not generic enough to go in another plugin.\n\nIf you've stumbled across this and love/hate it, let us know!\n\n== Compatability\n\nThis plugin is compatible with edge-rails that is slated to be Rails 2.2.  For a version compatible with 2.1, check out the \""rails-2.1\"" tag from git.\n\n== Core Extensions\n\n* Object#tap (http://moonbase.rydia.net/mental/blog/programming/eavesdropping-on-expressions)\n\n* String#widont to make typography nicer (http://shauninman.com/archive/2006/08/22/widont_wordpress_plugin)\n\n* Array#uniq with a block\n\n  >> %w(the cow jumped over the moon).uniq {|s| s.length }\n  => [\""the\"", \""jumped\"", \""over\""]\n\n* Round floats to the nearest x\n\n  >> 5.38475.round(0.5)\n  => 5.5\n\n* Hash goodies\n\n  >> {:a => [1,3,4], :b => [2,5]}.without(:a => 1)\n  => {:a => [3,4], :b => [2,5]}\n\n  >> {:a => \""\"", :b => nil, :c => 1}.compact\n  => {:c => 1}\n\n* And more\u2026\n\n== Rails Helpers\n\n* Unicode TextHelper additions that change the default truncate & excerpt string to an elipsis (\u2026)\u00a0instead of just three periods (...)\n\n* Add widont to textilize methods\n\n* Transparent removal of trailing slashes in URLs\n\n== Rake Tasks\n\n== Capistrano Recipes\n\n* Use :remote_cache by default\n\n* Disable and enable web during restarts\n\n* Run deploy:cleanup after deploys\n\n* Backups"""
https://github.com/collectiveidea/audited,"""Audited [![Build Status](https://secure.travis-ci.org/collectiveidea/audited.svg)](http://travis-ci.org/collectiveidea/audited) [![Code Climate](https://codeclimate.com/github/collectiveidea/audited.svg)](https://codeclimate.com/github/collectiveidea/audited) [![Security](https://hakiri.io/github/collectiveidea/audited/master.svg)](https://hakiri.io/github/collectiveidea/audited/master)\n=======\n\n**Audited** (previously acts_as_audited) is an ORM extension that logs all changes to your models. Audited can also record who made those changes, save comments and associate models related to the changes.\n\nAudited currently (4.x) works with Rails 5.2, 5.1, 5.0 and 4.2.\n\nFor Rails 3, use gem version 3.0 or see the [3.0-stable branch](https://github.com/collectiveidea/audited/tree/3.0-stable).\n\n## Supported Rubies\n\nAudited supports and is [tested against](http://travis-ci.org/collectiveidea/audited) the following Ruby versions:\n\n* 2.3.7\n* 2.4.4\n* 2.5.1\n\nAudited may work just fine with a Ruby version not listed above, but we can't guarantee that it will. If you'd like to maintain a Ruby that isn't listed, please let us know with a [pull request](https://github.com/collectiveidea/audited/pulls).\n\n## Supported ORMs\n\nAudited is currently ActiveRecord-only. In a previous life, Audited worked with MongoMapper. Use the [4.2-stable branch](https://github.com/collectiveidea/audited/tree/4.2-stable) if you need MongoMapper.\n\n## Installation\n\nAdd the gem to your Gemfile:\n\n```ruby\ngem \""audited\"", \""~> 4.7\""\n```\n\nThen, from your Rails app directory, create the `audits` table:\n\n```bash\n$ rails generate audited:install\n$ rake db:migrate\n```\n\nIf you're using PostgreSQL, then you can use `rails generate audited:install --audited-changes-column-type jsonb` (or `json`) to store audit changes natively with its JSON column types. If you're using something other than integer primary keys (e.g. UUID) for your User model, then you can use `rails generate audited:install --audited-user-id-column-type uuid` to customize the `audits` table `user_id` column type.\n\n#### Upgrading\n\nIf you're already using Audited (or acts_as_audited), your `audits` table may require additional columns. After every upgrade, please run:\n\n```bash\n$ rails generate audited:upgrade\n$ rake db:migrate\n```\n\nUpgrading will only make changes if changes are needed.\n\n\n## Usage\n\nSimply call `audited` on your models:\n\n```ruby\nclass User < ActiveRecord::Base\n  audited\nend\n```\n\nBy default, whenever a user is created, updated or destroyed, a new audit is created.\n\n```ruby\nuser = User.create!(name: \""Steve\"")\nuser.audits.count # => 1\nuser.update_attributes!(name: \""Ryan\"")\nuser.audits.count # => 2\nuser.destroy\nuser.audits.count # => 3\n```\n\nAudits contain information regarding what action was taken on the model and what changes were made.\n\n```ruby\nuser.update_attributes!(name: \""Ryan\"")\naudit = user.audits.last\naudit.action # => \""update\""\naudit.audited_changes # => {\""name\""=>[\""Steve\"", \""Ryan\""]}\n```\n\nYou can get previous versions of a record by index or date, or list all\nrevisions.\n\n```ruby\nuser.revisions\nuser.revision(1)\nuser.revision_at(Date.parse(\""2016-01-01\""))\n```\n\n### Specifying columns\n\nBy default, a new audit is created for any attribute changes. You can, however, limit the columns to be considered.\n\n```ruby\nclass User < ActiveRecord::Base\n  # All fields\n  # audited\n\n  # Single field\n  # audited only: :name\n\n  # Multiple fields\n  # audited only: [:name, :address]\n\n  # All except certain fields\n  # audited except: :password\nend\n```\n\n### Specifying callbacks\n\nBy default, a new audit is created for any Create, Update or Destroy action. You can, however, limit the actions audited.\n\n```ruby\nclass User < ActiveRecord::Base\n  # All fields and actions\n  # audited\n\n  # Single field, only audit Update and Destroy (not Create)\n  # audited only: :name, on: [:update, :destroy]\nend\n```\n\n### Comments\n\nYou can attach comments to each audit using an `audit_comment` attribute on your model.\n\n```ruby\nuser.update_attributes!(name: \""Ryan\"", audit_comment: \""Changing name, just because\"")\nuser.audits.last.comment # => \""Changing name, just because\""\n```\n\nYou can optionally add the `:comment_required` option to your `audited` call to require comments for all audits.\n\n```ruby\nclass User < ActiveRecord::Base\n  audited :comment_required => true\nend\n```\n\n### Limiting stored audits\n\nYou can limit the number of audits stored for your model. To configure limiting for all audited models, put the following in an initializer:\n\n```ruby\nAudited.max_audits = 10 # keep only 10 latest audits\n```\n\nor customize per model:\n\n```ruby\nclass User < ActiveRecord::Base\n  audited max_audits: 2\nend\n```\n\nWhenever an object is updated or destroyed, extra audits are combined with newer ones and the old ones are destroyed.\n\n```ruby\nuser = User.create!(name: \""Steve\"")\nuser.audits.count # => 1\nuser.update_attributes!(name: \""Ryan\"")\nuser.audits.count # => 2\nuser.destroy\nuser.audits.count # => 2\n```\n\n### Current User Tracking\n\nIf you're using Audited in a Rails application, all audited changes made within a request will automatically be attributed to the current user. By default, Audited uses the `current_user` method in your controller.\n\n```ruby\nclass PostsController < ApplicationController\n  def create\n    current_user # => #<User name: \""Steve\"">\n    @post = Post.create(params[:post])\n    @post.audits.last.user # => #<User name: \""Steve\"">\n  end\nend\n```\n\nTo use a method other than `current_user`, put the following in an initializer:\n\n```ruby\nAudited.current_user_method = :authenticated_user\n```\n\nOutside of a request, Audited can still record the user with the `as_user` method:\n\n```ruby\nAudited.audit_class.as_user(User.find(1)) do\n  post.update_attributes!(title: \""Hello, world!\"")\nend\npost.audits.last.user # => #<User id: 1>\n```\n\nThe standard Audited install assumes your User model has an integer primary key type. If this isn't true (e.g. you're using UUID primary keys), you'll need to create a migration to update the `audits` table `user_id` column type. (See Installation above for generator flags if you'd like to regenerate the install migration.)\n\n#### Custom Auditor\n\nYou might need to use a custom auditor from time to time. It can be done by simply passing in a string:\n\n```ruby\nclass ApplicationController < ActionController::Base\n  def authenticated_user\n    if current_user\n      current_user\n    else\n      'Elon Musk'\n    end\n  end\nend\n```\n\n### Associated Audits\n\nSometimes it's useful to associate an audit with a model other than the one being changed. For instance, given the following models:\n\n```ruby\nclass User < ActiveRecord::Base\n  belongs_to :company\n  audited\nend\n\nclass Company < ActiveRecord::Base\n  has_many :users\nend\n```\n\nEvery change to a user is audited, but what if you want to grab all of the audits of users belonging to a particular company? You can add the `:associated_with` option to your `audited` call:\n\n```ruby\nclass User < ActiveRecord::Base\n  belongs_to :company\n  audited associated_with: :company\nend\n\nclass Company < ActiveRecord::Base\n  has_many :users\n  has_associated_audits\nend\n```\n\nNow, when an audit is created for a user, that user's company is also saved alongside the audit. This makes it much easier (and faster) to access audits indirectly related to a company.\n\n```ruby\ncompany = Company.create!(name: \""Collective Idea\"")\nuser = company.users.create!(name: \""Steve\"")\nuser.update_attribute!(name: \""Steve Richert\"")\nuser.audits.last.associated # => #<Company name: \""Collective Idea\"">\ncompany.associated_audits.last.auditable # => #<User name: \""Steve Richert\"">\n```\n\nYou can access records' own audits and associated audits in one go:\n```ruby\ncompany.own_and_associated_audits\n```\n\n### Conditional auditing\n\nIf you want to audit only under specific conditions, you can provide conditional options (similar to ActiveModel callbacks) that will ensure your model is only audited for these conditions.\n\n```ruby\nclass User < ActiveRecord::Base\n  audited if: :active?\n\n  private\n\n  def active?\n    last_login > 6.months.ago\n  end\nend\n```\n\nJust like in ActiveModel, you can use an inline Proc in your conditions:\n\n```ruby\nclass User < ActiveRecord::Base\n  audited unless: Proc.new { |u| u.ninja? }\nend\n```\n\nIn the above case, the user will only be audited when `User#ninja` is `false`.\n\n### Disabling auditing\n\nIf you want to disable auditing temporarily doing certain tasks, there are a few\nmethods available.\n\nTo disable auditing on a save:\n\n```ruby\n@user.save_without_auditing\n```\n\nor:\n\n```ruby\n@user.without_auditing do\n  @user.save\nend\n```\n\nTo disable auditing on a column:\n\n```ruby\nUser.non_audited_columns = [:first_name, :last_name]\n```\n\nTo disable auditing on an entire model:\n\n```ruby\nUser.auditing_enabled = false\n```\n\nTo disable auditing on all models:\n\n```ruby\nAudited.auditing_enabled = false\n```\n\n### Custom `Audit` model\n\nIf you want to extend or modify the audit model, create a new class that\ninherits from `Audited::Audit`:\n```ruby\nclass CustomAudit < Audited::Audit\n  def some_custom_behavior\n    \""Hiya!\""\n  end\nend\n```\nThen set it in an initializer:\n```ruby\n# config/initializers/audited.rb\n\nAudited.config do |config|\n  config.audit_class = CustomAudit\nend\n```\n\n## Support\n\nYou can find documentation at: http://rdoc.info/github/collectiveidea/audited\n\nOr join the [mailing list](http://groups.google.com/group/audited) to get help or offer suggestions.\n\n## Contributing\n\nIn the spirit of [free software](http://www.fsf.org/licensing/essays/free-sw.html), **everyone** is encouraged to help improve this project. Here are a few ways _you_ can pitch in:\n\n* Use prerelease versions of Audited.\n* [Report bugs](https://github.com/collectiveidea/audited/issues).\n* Fix bugs and submit [pull requests](http://github.com/collectiveidea/audited/pulls).\n* Write, clarify or fix documentation.\n* Refactor code.\n"""
https://github.com/technicalpickles/ambitious-sphinx,"""= An Ambitious Sphinx Adapter\n\nI don't know about you, but I like me some sexy full-text searching.\n\n== The basics\n\nWant to find all meals that mention bacon?\n\n  Meal.select {'bacon'}\n\nWhat about bacon bits and sour cream?\n\n  Meal.select {'bacon bits' && 'sour cream'}\n\nMaybe with bacon in the name, or cheese in the recipe?\n\n  Meal.select {|m| m.name =~ 'bacon' || m.recipe =~ 'cheese'}\n\nCheese in the name, but not grilled?\n\n  Meal.select {|m| m.name =~ 'bacon' && m.name !~ 'grilled'}\n\n== Pagination\n\nYou're going to want to use pagination. Ultrasphinx, the underlying library, only supports it, as in, you can't just get all the objects matching your query. You _have_ to use paging.\n\nIt's pretty simple:\n\n  Meal.select {'bacon'}.page(2)\n  Meal.select {'bacon'}.page(3)\n\n== Big honking disclaimer\n\nWe're still learning a lot about how sphinx and ambition work, so things are likely to change a lot, and features are likely to be missing.\n\n== Getting Started\n\n\n=== Installing\n\n  sudo gem install ambitious-sphinx\n  \n=== Add it to your app\n    \nRequire our files somewhere, like at the end of config/environment.rb, maybe create config/initializers/sphinx.rb\n\n  require 'ultrasphinx'\n  require 'ambition/adapters/ambitious_sphinx'\n  \n=== Sphinx and Ultrasphinx\n    \nYou will also need to go through the motions of setting up ultrasphinx.\n\nThis includes:\n\n * Configuring/installing sphinx\n * Modifying your model to indicate what's to be indexed\n * Bootstrapping ultrasphinx\n \nAll this is discussed in detail in ultrasphinx's README\n\n== Playing with the code base\n\nIn addition to the other dependencies, you'll need to:\n\n  gem install echoe redgreen mocha test-spec\n  \nRun the tests with:\n  \n  rake test\n  \n\n== More information on Sphinx:\n\n -> http://www.sphinxsearch.com/\n -> http://blog.evanweaver.com/articles/2007/07/09/ultrasphinx-searching-the-world-in-231-seconds/\n -> http://blog.evanweaver.com/files/doc/fauna/ultrasphinx/files/README.html\n\n== More information on Ambition:\n\n-> http://ambition.rubyforge.org\n-> http://groups.google.com/group/ambition-rb/\n"""
https://github.com/lazyatom/soup,"""Soup is a bit of everything, summoned from nothing. Soup is like an imaginary friend - comforting, \nand will often talk to you, but when you look closely, they don't exist.\n\nTerrifying. And so:\n\n  require 'soup'\n  soup = Soup.new(File.join(\""soup\"", __FILE__))\n\n  soup << { \n    :name => \""James\"",\n    :skills => \""Bowstaff, nunchuck\"" \n  }\n\n  # ...much later...\n\n  s = soup['james']\n  s.skills # => \""Bowstaff, nunchuck\""\n\n  soup << {\n    :mane => \""Lush and thick\""\n    :teeth => \""Sharp and ready\""\n    :position => \""Above my bed!!!\"" \n  }\n\n\nThe point is that you can set any attribute on a Soup data, and it will be persisted without \ncare. With reckless abandon, really.\n\nThe data can be stored using anything - Soup doesn't really care much about the underlying \npersistence layer. I've written implementations using DataMapper, ActiveRecord and Sequel... \nthere are other implementations of course. Unknowable implementations. \nTerrifying implementations. You Fool! Warren is Dead!\n\n\n\n(c) 2008 James Adam, MIT LICENSE. Yeah.\n\n  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXP\n  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXY?\""\""\""  .\n  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXY?\""\""   ,;ciCCC\n  \""?YXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXYYY??\""\""   .,;iCCCCCCCCCC\n  .,.  `\""\""\""\""\""\""???YYYYYYYYYYXXXXXXXYYYYY???\""\""\""\""\""\""\""   ..,;ciiCCCCCCCCCCC''`\n  ```'`CCiiicccccccccc;;,,.    .,..,..,;cccciiiCCCCCCC????>''`````   .;ciCCC\n  Cic;,.   `''<<????CCCCCCCCCCCC?????''''''''`````'   ..,;;;ccciiiCCCCCCCCCC\n  CCCCCCCCCCCCcc;;;,,.       .,..,..,..,;;cciiiiCCCCCCCCCCCCCCCCCCCCC??>'`\n  ``''?CCCCCCCCCC\""'```''CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC??\""\""''``   _.,;cciCC\n  ic;;,. ````'<?Ciiccc;,,.  ````'''`CCCCCC''''''''`' .,;cciiiCCCCCCCCCC?\""'`\n  CCCCCCCCCiic;._  ```''\""<?CCC;;;,,,.,..,...,;;;;;;C777???CC'''''``'  _,xiXX\n  .  ```'''`CCCCCCCiicc;,,,,,..        ```````'            .,,,xiiXXXXXXXXXX\n  XXXXXxXx,,,.   ```````````````````   .,..,..,.xiXiiXiiXXXXXXXXXXXXXXXXXXXX\n  XXXXXXXXXXXXXXXXXXxXxxXxXXXXXxxXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXY??\""\""\""\n  \""\""\""?YXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXYY???\""\""\""\n  =          \""\""\""\""\""???YYXXXXXXXXXXXXXXXXXXXXXXXXXXYYY???\""\""                 ,;\n   -;ccccc;;,.,..            \""\""\""\""\""\""\""\""\""\""                          ,;ciCC'``'\n  ;;, ```'???CCCCC  `''--;CCicc;;,      .,;;,,,.   ..      .,;ciCCCCCCCicc;-\n  C'```CCiiiiiCCCCtCiicc;,.  ```' . .,;;iCCCCC'' .,;;cccc-''`CCCCCCCCCCCCC;;\n  CCCCc;,,.,;CCCcc,,,,..'' .;CC'`'CCCCCCCCCC'' ``' .,;;;cc===`CC''````````'\n  .,...```' .C.,.`\""\""\""\""?CCCCC'`CCC''''``'  .,.,;ciCCCCCC..,;cciiCtttCCCCCCCtt\n   ```'     `'`CCCCCCCCCCC' . `'       ```' .,. ```CCC''''`CCCCCCCCCCCCC?\""''\n  ..                           ``'                            ```'\n  $$$$$$$$$$$$ccc$$$$$$$$\""?hccc=Jcc$$hccccccc$$$$$$$$$$$$$cccccc,,,,,ccc,,..\n  $$$??hcccci???CCCCCC$$L ,$$$$c $$hcccccJ???LcccccccccJCCC???????CCCC??????\n  $$F `?$$$$$$$$$$$$$$$$. ,$$\""$$.?$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n  $$,. ,$$$$$$$$$$$$$$$$. ,$$ $$h $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$??????????$$\n  $$$h $$$$$$$$$$$$$$$$$$ $$$ ?$h ?$$$$$$$$$$$$$$$$$$$$$$$???izc?????????i??\n  ???\"" ?????$$$$$$$\""\""\""\""\""\""  \""\"" ?\""\"" `\""?\""\""\""$$$$$$$$??<Lr??cr?=\""\""    .  .      .\n  ,,,,,,,,,J$$$$$$$$,.,,,,,,,,..       ,$$$$$$P>JP\""       .,;;,.!!;,.!!!!!!!\n  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$C3$$  -'  --''`!!!!'`'   ..  `!\n  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$Ci??c,,,.,..,.            `````\n  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$JJCCCC????????$$????rrrcccc,\n  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$C<<$$$$$PF<$$$$\n  $$$$$cizccCCCCCCCCCcccc$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$?????)>>J$CLccc$??\""\""\n  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$????ii?iiJJJ$$??\""\""\""\n  $$$$$$$$$$$$$??$$$$????P$$$???iiiiicccccc<<????)Cicc$P\""\""      ..   .,;;!!!\n  $$$$$CCCCCCC>>J>>>>cccccc>>>??C????CC>cccJ$??\""\""\""\""\""         -``!!;!'  .!!!'\n  $$$$$??CCCCCCCCCCCff>>>>>J$$$P\""\""\""\""\""\""\""\""            ..,;;;;;;;!'`.,;;!'''\n  ??????????????\""\""\""\""\""'' `'              .,..,;;;;!!!'```..```' .,.,;;;- `,;'\n                      .,.    ,;;----'''''''```````'  `''`,;;!!'''`..,;;'' ,;\n  ---;;;;;;;-----'''''''''``'  --- `'  .,,ccc$$hcccccc,.  `' ,;;!!!'``,;;!!'\n  ;;;;,,.,;-------''''''' ,;;!!-    .zJ$$$$$$$$$$$$$$$$$$$c,. `' ,;;!!!!' ,;\n    ```'    -;;;!'''''-  `.,..   .zJ$$$$$$$$$$$$$$$$$$$$$$$$$$c, `!!'' ,;!!'\n  !!-  ' `,;;;;;;;;;;'''''```' ,c$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$c,  ;!!'' ,;\n  ,;;;!!!!!!!!''``.,;;;;!'`'  z$$$$$$$$???\""\""\""\""\""'.,,.`\""?$$$$$$$$$$$  ``,;;!!!\n  ;;..       --''```_..,;;!  J$$$$$$??,zcd$$$$$$$$$$$$$$$$$$$$$$$$h  ``'``'\n  ```'''   ,;;''``.,.,;;,  ,$$$$$$F,z$$$$$$$$$$$$$$$$$$$c,`\""\""?$$$$$h\n  !!!!;;;;,   --`!'''''''  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$h.`\""$$$$h .\n  `'''``.,;;;!;;;--;;   zF,$$$$$$$$$$?????$$$$$$$$$$$$$?????$$r ;?$$$ $.\n  !;.,..,.````.,;;;;  ,$P'J\""$$$$$$P\"" .,c,,.J$$$$$$$$$\""',cc,_`?h.`$$$$ $L\n  '``````'    .,..  ,$$\"". $ $$$$P\"",c$$$$$$$$$$$$$$$$',$$$$$$$$$$ $$$$ $$c,\n  !!!!!!!!!!!!!'''  J$',$ $.`$$P c$$$$$$$$$$$$$$$$$$,$$$$$$$$$$$ $$$$ $$$$C\n     ``            J$ ,$P $$ ?$',$$$$???$$$$$$$$$$$$$$$??\""\""\""?$$$ <$$$ $$$$$\n  c           ;,  z$F,$$  `$$ $ ?$\""      \""$$$.?$$$ $$$P c??c, ?$.<$$',$$$$$F\n  $$h.  -!>   ('  $\"" $F ,F ?$ $ F ,=\""?$$c,`$$F $$\""z$$',$' ,$$P $h.`$ ?$$$$$r\n  $$$$$hc,. ``'  J$ $P J$ . $$F L \"",,J$$$F <$hc$$ \""$L,`??????,J$$$.` z$$$$$\n  $$$$$$$$$$c,'' ?F,$',$F.: $$ c$c,,,,,c,,J$$$$$$$ ?$$$c,,,c$$$$$$F. $$$$$$\n  `\""$$$$$$$$$$$c, $$',$$ :: $$$$$$$$F\""',$$$$$$$$$$h ?$$$L;;$$$??$$$$ $$$$$$\n     \""?$$$$$$$$$$ $$$$$$ : .`F\""$$$$$$$$$$$$\""\""\""\""?\""\""\""h $$$$$$$\""$,J$$$$ $$$$$'\n        \""?$$$$$$$ $$$$$$.`.` h `$$$$$$$$$$$cccc$$c,zJ$$$$$P' $$$$$P',$$$$P\n  $.       `\""\""?$$ $$$$$$$  ` \""$c \""?$$$$$$$$$$$$??$$$$$$$$\"" ,J$$$P\"",J$$$$P\n  ..           `\"" ?$$$$$$h    ?$$c.`?$$$$$$$$$' . <$$$$$' ,$$$\""  ,$$$$$\""\n  !!>. .          `$$$$$$$h  . \""$$$c,\""$$$$$$$' `' `$$$P  ,$$$' ,c$$$$$'   ;!\n  ```<!!!>         `$$$$$$$c     \""$$$c`?$$$$$  : : $$$  ,$$P' z$$$$$$'   ;!!\n  $hc ```'  ;       `$$$$$$$.      ?$$c ?$$$$ .: : $$$  $$F ,J$$$$$$'   ;!!\n  .,..      '        `$$$$$$$       \""$$h`$$$$ .' ' $$$ ,$$ ,J$$$$$$'    !!!\n  ????P               `$$$$$$L       $$$ $$$F :.: J$$P J$F J$$$$$P     ;!!\n  -=<                  ?$$.\""$$       `$$ ?$$' `' z$$$F $P  $$$$$$'     !!'\n  cc                   `$$$c`?        ?$.`$$hc, cd$$F ,$'  $$$$$$     ;!!\n                        $$$$c         `$$c$$$$$$$$$\"",c$'   $$$$$$     `!!\n                        $$$$$          `?$$$$$$$$$$$$P'    $$$$$$> ..\n                        $$$$$            `\""?$$$$$$$P\""      $$$$$$L $$c,\n            !!         <$$$$$            zc,`\""\""\""',         <$$$$$$.`$$$$cc,\n            !!         J$$$$P            `$$$$$$$' !'       $$$$$$L `$$$$$$h\n           ;,          $$$$$L          `! J$$$$$',!!        $$$$$$$  `$$$$$$\n            '         <$$$$$.           ! $$$$$$ !!         ?$$$$$$   `$$$$$\n                     ,$$$$$$$c          `,`???? ;'         c,?$$$$'    `?$$$\n                     $$$$$$$??           `!;;;;!     .     `h.\""?$P      `$$$\n                    ,$$$$$$$h.            `'''      `'      `$$$P        `?$\n                     $$$$$$$$h                      `!'      `\""'           `\n                    `$$$$$$$$F          !;     !    ;,\n                     `$$$$$$$'         `!!>         `!\n  c,        ;,        `?$$$$P           !!>             .\n  $F        !!>         `\""\""'            `!!            ;!>    <-\n  $F       `!!'                      ;!; '   `!        <!>    ;\n  $F        `'      <!               !!!               !!>    !!\n  ?'       `'      !!!               !!!               !!>    !!\n           !!'    <!!               ;!!!               `'     ;\n          ;!!     !!                !!!!                      !'\n          !!!     `'                !!!                       '            ;\n          !!                       ;!!'                                    !\n                                   !!!                      ;!             !\n                                  <!!!                      )'            `!\n            ,;;>                 ;!!!                                     `!\n            `''                 ;!!!                     !                `!\n                ;!             ;!!!                                  ,$$c, `\n              !''             ;!!!           '                    ,c$$$$$$c.\n  >                       ;   !!!                                 ?$$$$$$$$$\n  !!>                   ;!! .!!!     .!>                           \""?$$$$$$$\n  <! `!         ,;     ;!!  !!!!     !!                              `\""?$$$$\n   . '          '    ;!!! .!!!!     !!   .                              `\""?$\n   `'               <!!' .!!!!!!   !!!'  !                     >           `\n                  .!!!  <!!'`!!! .!!!!;                   !!>\n                  !!!  <!!'  !! ;!!!!!!                   (' ;,\n                 <!!  !!!'  !!! !!!'!!!                   !> `!\n                 !!' !!!'  `!!';!>  !!                 <! `' `!  !>.\n                 ' ;<!!'  .!!! !!' <!'       ;        `!! ;  `!  !!!>\n              .<!>;!!!'   !!! `!! <!!                .. ' '      !!!' ;,\n             <!!! <!! ;   !!! !!>;!!''!             J$$c         `!!; !!>\n            ;!!! ;!! <!   !!> !! `!! !'            J$$$$hr        `'' !!!,;;\n            ;!!! !! <!!  <!!  !' ;!! '            <$$$$$$$.           <!!!'!\n            !!!  !;<!!'  !!! ;!  !!>              $$$$$$$$$$.          `'  !\n           `!!! !!!!!'   !!! !! `!!!              ?$$$$$$$??$c        !!>;\n           ;!! ;!!!!!   ;!!> !! <!!>               ?$$$$$$c,`$$.      `!!!\n           !!! !!! !'   `!!> !! !!!                 \""?$$$$$$ \""?$c      `<!\n          ;!!  !! ;!    !!!> ! ;!!!,                  \""$$$$$$c,\""?$c,\n          ;!!  !! ;!    !!!! ! `!!!!                    \""$$$$$$c ?$$h.\n          !!!> !! !!    !!!!    !!!                       \""?$$$$c \""$$$c,\n          !!!' '  !!    `!!!    `!                          \""$$$$h.`?$$$c,\n         <!!!>   <!!    `!!!     !>                          ?$$$$$c ?$$$$h.\n         `!!!    `!!     !!!     `'                           \""?$$$$h.`?$$$$\n          `!!>    !!     `!!                                    `?$$$$$$$$$$\n           `!'    !!      `'                                      \""$$$$$$$$$\n                  `!>                                               ?$$$$$$$\n                   `!                                                `\""?$$$$\n                    `-                ;!                                `\""$$\n                                                                          `?\n(http://www.edvard-munch.com/Paintings/other_artists/scream_ascii_3.htm)"""
https://github.com/Caged/groomlake,"""This code is OLD and may not work AT ALL anymore.  It was a crazy idea I had way back when.  \nAt one point in time it used to workto some extent.  It parses Photoshop Brush (ABR) files and \ngenerates PNG images.  It could also extract color information from color palette files.\n\nJust figured I'd Open Source it since I'm no longer doing anything with it and someone, somewhere \nmight find it useful.\n\nUse it under an MIT LICENSE"""
https://github.com/collectiveidea/acts_as_geocodable,"""# acts_as_geocodable\n\n[![Gem Version](https://img.shields.io/gem/v/acts_as_geocodable.svg?style=flat)](http://rubygems.org/gems/acts_as_geocodable)\n[![Build Status](https://img.shields.io/travis/collectiveidea/acts_as_geocodable/master.svg?style=flat)](https://travis-ci.org/collectiveidea/acts_as_geocodable)\n[![Code Climate](https://img.shields.io/codeclimate/github/collectiveidea/acts_as_geocodable.svg?style=flat)](https://codeclimate.com/github/collectiveidea/acts_as_geocodable)\n[![Code Coverage](http://img.shields.io/codeclimate/coverage/github/collectiveidea/acts_as_geocodable.svg?style=flat)](https://codeclimate.com/github/collectiveidea/acts_as_geocodable)\n[![Dependency Status](https://img.shields.io/gemnasium/collectiveidea/acts_as_geocodable.svg?style=flat)](https://gemnasium.com/collectiveidea/acts_as_geocodable)\n\nacts_as_geocodable helps you build geo-aware applications. It automatically geocodes your models when they are saved, giving you the ability to search by location and calculate distances between records.\n\n**Beginning with version 2, we require Rails 3. Use one of the 1.0.x tags to work with Rails 2.3.**\n\nWe've adopted the ARel style syntax for finding records.\n\n## Usage\n\n```ruby\nevent = Event.create(\n  street: \""777 NE Martin Luther King, Jr. Blvd.\"",\n  locality: \""Portland\"",\n  region: \""Oregon\"",\n  postal_code: 97232\n)\n\nevent.geocode.latitude  # => 45.529100000000\nevent.geocode.longitude # => -122.644200000000\n\nevent.distance_to(\""49423\"") # => 1807.66560483205\n\nEvent.origin(\""97232\"", within: 50)\n\nEvent.origin(\""Portland, OR\"").nearest\n```\n\n## Installation\n\nInstall as a gem\n\n```\ngem install acts_as_geocodable\n```\n\nor add it to your Gemfile\n\n```ruby\ngem \""acts_as_geocodable\""\n```\n\n[Graticule](http://github.com/collectiveidea/graticule) is used for all the heavy lifting and will be installed too.\n\n## Upgrading\n\nBefore October 2008, precision wasn't included in the `Geocode` model. Make sure you add a string precision column to your geocode table if you're upgrading from an older version, and update Graticule.\n\nAlso, if you're upgrading from a previous version of this plugin, note that `:city` has been renamed to `:locality` to be consistent with Graticule 0.2. Create a migration that has:\n\n```ruby\nrename_column :geocodes, :city, :locality\n```\n\nAlso remember to change your mapping in your geocodable classes to use the `:locality` key instead of `:city`:\n\n```ruby\nclass Event < ActiveRecord::Base\n  acts_as_geocodable address: { street: :address1, locality: :city, region: :state, postal_code: :zip }\nend\n```\n\n## Configuration\n\nCreate the required tables\n\n```\nrails generate acts_as_geocodable\nrake db:migrate\n```\n\nSet the default geocoder in your environment.rb file.\n\n```ruby\nGeocode.geocoder = Graticule.service(:yahoo).new(\""your_api_key\"")\n```\n\nThen, in each model you want to make geocodable, add `acts_as_geocodable`.\n\n```ruby\nclass Event < ActiveRecord::Base\n  acts_as_geocodable\nend\n```\n\nThe only requirement is that your model must have address fields. By default, acts_as_geocodable looks for attributes called _street_, _locality_, _region_, _postal_code_, and _country_. To change these, you can provide a mapping in the `:address` option:\n\n```ruby\nclass Event < ActiveRecord::Base\n  acts_as_geocodable address: { street: :address1, locality: :city, region: :state, postal_code: :zip }\nend\n```\n\nIf that doesn't meet your needs, simply override the default `to_location` method in your model, and return a `Graticule::Location` with those attributes set.\n\nacts_as_geocodable can also update your address fields with the data returned from the geocoding service:\n\n```ruby\nclass Event < ActiveRecord::Base\n  acts_as_geocodable normalize_address: true\nend\n```\n\n## IP-based Geocoding\n\nacts_as_geocodable adds a `remote_location` method in your controllers that uses http://hostip.info to guess remote users location based on their IP address.\n\n```ruby\ndef index\n  @nearest = Store.origin(remote_location).nearest if remote_location\n  @stores = Store.all\nend\n```\n\nKeep in mind that IP-based geocoding is not always accurate, and often will not return any results.\n\n## Contributing\n\nIn the spirit of [free software](http://www.fsf.org/licensing/essays/free-sw.html), **everyone** is encouraged to help improve this project.\n\nHere are some ways **you** can contribute:\n\n* using alpha, beta, and prerelease versions\n* reporting bugs\n* suggesting new features\n* writing or editing documentation\n* writing specifications\n* writing code (**no patch is too small**: fix typos, add comments, clean up inconsistent whitespace)\n* refactoring code\n* closing [issues](https://github.com/collectiveidea/acts_as_geocodable/issues/)\n* reviewing patches\n\n## Submitting an Issue\n\nWe use the [GitHub issue tracker](https://github.com/collectiveidea/acts_as_geocodable/issues/) to track bugs\nand features. Before submitting a bug report or feature request, check to make sure it hasn't already\nbeen submitted. You can indicate support for an existing issuse by voting it up. When submitting a\nbug report, please include a [Gist](https://gist.github.com/) that includes a stack trace and any\ndetails that may be necessary to reproduce the bug, including your gem version, Ruby version, and\noperating system. Ideally, a bug report should include a pull request with failing specs.\n\n## Submitting a Pull Request\n\n1. Fork the project.\n2. Create a topic branch.\n3. Implement your feature or bug fix.\n4. Add specs for your feature or bug fix.\n5. Run `bundle exec rake`. If your changes are not 100% covered and passing, go back to step 4.\n6. Commit and push your changes.\n7. Submit a pull request. Please do not include changes to the gemspec, version, or history file. (If you want to create your own version for some reason, please do so in a separate commit.)\n\n### To Do\n\n* configurable formulas\n"""
https://github.com/collectiveidea/acts_as_money,"""= ActsAsMoney\n\nacts_as_money is a plugin that makes it easier to work with the money gem.\n\n  class Product < ActiveRecord::Base\n    money :price\n  end\n  \nThis assumes that there are 2 columns in the database, price_in_cents (integer) and currency (string).  These fields can be changed by setting the :cents and :currency options.  To use the default currency (USD), you can simply leave off :currency.\n\n  class Room < ActiveRecord::Base\n    money :rate, :cents => :rate_in_cents, :currency => :rate_currency\n    money :discount, :cents => :discount_in_cents, :currency => false\n  end\n\nacts_as_money allows you to pass a String, Fixnum, Float or Money object as a parameter to the setter, and it will call #to_money to convert it to a Money object.  This makes it convenient for using money fields in forms.\n\n  r = Room.new :rate => \""100.00\""\n  r.rate                            # returns <Money:0x249ef9c @currency=\""USD\"", @cents=10000>\n\n\n= Compatibility\n\nThis plugin is compatible with the current edge-rails that is slated to be 2.2. If you are using Rails <= 2.1, check out the \""rails-2.1\"" tag from git."""
https://github.com/collectiveidea/css_naked_day,"""CssNakedDay\n===========\n\nThis plugin disables all stylesheets on CSS Naked Day.\nhttp://naked.dustindiaz.com/\n\nAs long as you're using Rails' stylesheet_link_tag helper, your CSS will automatically be hidden on Naked Day (April 9, 2009).\n\nIt also adds a method to the Date class so you can check if a day is Naked Day.\n\nExample\n=======\n\n<% if Date.today.is_css_naked_day? %>\n  <h3>What happened to the design?</h3>\n  <p>To know more about why styles are disabled on this website visit the\n  <a href=\""http://naked.dustindiaz.com\"" title=\""Web Standards Naked Day Host Website\"">\n  Annual CSS Naked Day</a> website for more information.</p>\n<% end %>\n\n\nRead more at:\nhttp://daniel.collectiveidea.com/blog/tags/css_naked_day\n\n\nCopyright (c) 2007 Daniel Morrison, Collective Idea http://collectiveidea.com, released under the MIT license"""
